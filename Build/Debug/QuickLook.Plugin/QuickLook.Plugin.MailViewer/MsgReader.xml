<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MsgReader</name>
    </assembly>
    <members>
        <member name="T:MsgReader.Exceptions.MRCannotRemoveAttachment">
            <summary>
            Raised when it is not possible to remove the <see cref="T:MsgReader.Outlook.Storage.Attachment"/> or <see cref="T:MsgReader.Outlook.Storage.Message"/> from
            the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="T:MsgReader.Exceptions.MRFileTypeNotSupported">
            <summary>
            Raised when the Microsoft Outlook message type or EML is not supported
            </summary>
        </member>
        <member name="T:MsgReader.Exceptions.MRInvalidProperty">
            <summary>
                Raised when a property is invalid
            </summary>
        </member>
        <member name="T:MsgReader.Exceptions.MRInvalidSignedFile">
            <summary>
            Raised when the Microsoft Outlook signed message is invalid
            </summary>
        </member>
        <member name="M:MsgReader.Exceptions.MRInvalidSignedFile.#ctor">
            
        </member>
        <member name="T:MsgReader.Exceptions.MRUnknownAttachmentFormat">
            <summary>
            Raised when it is not possible to read the <see cref="T:MsgReader.Outlook.Storage.Attachment"/> from
            the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="T:MsgReader.Helpers.DateDifference">
            <summary>
            This class can be used to calculate the differences between 2 dates in years, months, weeks, days, hours and seconds
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.DateDifference.ToString">
            <summary>
            Returns the years, days, months, weeks, hours, minutes and seconds as a string.
            E.g. 1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes
            </summary>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.DateDifference.Difference(System.DateTime,System.DateTime)">
            <summary>
            Calculates the difference between 2 dates in years, months, weeks, days, hours and seconds
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Helpers.EmailAddress">
            <summary>
            This class contains helper methods for E-mail addresses
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.EmailAddress.IsEmailAddressValid(System.String)">
            <summary>
            Return true when the E-mail address is valid
            </summary>
            <param name="emailAddress"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.EmailAddress.RemoveSingleQuotes(System.String)">
            <summary>
            Removes trailing en ending single quotes from an E-mail address when they exist
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.ExceptionHelpers.GetInnerException(System.Exception)">
            <summary>
            Get the complete inner exception tree
            </summary>
            <param name="e">The exception object</param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Helpers.FileManager">
            <summary>
            This class contains file management functions that are not available in the .NET framework
            </summary>
        </member>
        <member name="F:MsgReader.Helpers.FileManager.MaxPath">
            <summary>
            The max path length in Windows
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.CheckForBackSlash(System.String)">
            <summary>
            Check if there is a backslash at the end of the string and if not add it
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.ValidateLongFileName(System.String,System.Int32)">
            <summary>
            Validates the length of <paramref name="fileName"/>, when this is longer then <see cref="F:MsgReader.Helpers.FileManager.MaxPath"/> chars it will be truncated.
            </summary>
            <param name="fileName">The filename with path</param>
            <param name="extraTruncateSize">Optional extra truncate size, when not used the filename is truncated until it fits</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Raised when no path or file name is given in the <paramref name="fileName"/></exception>
            <exception cref="T:System.IO.PathTooLongException">Raised when it is not possible to truncate the <paramref name="fileName"/></exception>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified <paramref name="path"/> string
            </summary>
            <param name="path">The path of the file</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Raised when no path is given</exception>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified <paramref name="path"/> string without the extension
            </summary>
            <param name="path">The path of the file</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified <paramref name="path"/> string
            </summary>
            <param name="path">The path of a file or directory</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.FileExistsMakeNew(System.String,System.Boolean,System.Int32)">
            <summary>
            Checks if a file already exists and if so adds a number until the file is unique
            </summary>
            <param name="fileName">The file to check</param>
            <param name="validateLongFileName">When true validation will be performed on the max path lengt</param>
            <param name="extraTruncateSize"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Raised when no path or file name is given in the <paramref name="fileName"/></exception>
            <exception cref="T:System.IO.PathTooLongException">Raised when it is not possible to truncate the <paramref name="fileName"/></exception>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.RemoveInvalidFileNameChars(System.String)">
            <summary>
            Removes illegal filename characters
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.FileManager.GetFileSizeString(System.Double)">
            <summary>
            Gives the size of a file in Windows format (GB, MB, KB, Bytes)
            </summary>
            <param name="bytes">Filesize in bytes</param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Helpers.FileTypeFileInfo">
            <summary>
            This class is used as a placeholder for the filetype information
            </summary>
        </member>
        <member name="P:MsgReader.Helpers.FileTypeFileInfo.MagicBytes">
            <summary>
            The magic bytes
            </summary>
        </member>
        <member name="P:MsgReader.Helpers.FileTypeFileInfo.MagicBytesAsString">
            <summary>
            The magic bytes as a string
            </summary>
        </member>
        <member name="P:MsgReader.Helpers.FileTypeFileInfo.Extension">
            <summary>
            The file type extension that belongs to the magic bytes (e.g. doc, xls, msg)
            </summary>
        </member>
        <member name="P:MsgReader.Helpers.FileTypeFileInfo.Description">
            <summary>
            Description of the file
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeFileInfo.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="magicBytes">The magic bytes</param>
            <param name="extension">The file type extension that belongs to the magic bytes (e.g. doc, xls, msg)</param>
            <param name="description">Description of the file (e.g. Word document, Outlook message, etc...)</param>
        </member>
        <member name="T:MsgReader.Helpers.FileTypeSelector">
            <summary>
            This class can be used to recognize files by their magic bytes
            </summary>
        </member>
        <member name="F:MsgReader.Helpers.FileTypeSelector.FileTypes">
            <summary>
            Contains all the magic bytes and their description
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeSelector.Stb(System.String)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="line">String to convert</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeSelector.GetFileTypes">
            <summary>
            A list with most of the used file types and their magic bytes
            </summary>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeSelector.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            IndexOf function for byte arrays
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeSelector.GetFileTypeFileInfo(System.Byte[])">
            <summary>
            Returns a <see cref="T:MsgReader.Helpers.FileTypeFileInfo"/> object by looking to the magic bytes of the <param ref="fileBytes"/> array.
            A <see cref="T:MsgReader.Helpers.FileTypeFileInfo"/> object
            </summary>
            <param name="fileBytes">The bytes of the file</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeSelector.CheckMicrosoftOfficeFormatsWithAsciiReading(System.Byte[])">
            <summary>
            Tries to recognize an Microsoft Office file by looking to it's internal bytes
            </summary>
            <param name="fileBytes">The bytes of the file</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeSelector.CheckZipOrOpenOfficeFormat(System.Byte[])">
            <summary>
            Tries to recognize an Microsoft Office 2007+ file by looking to it's internal bytes
            </summary>
            <param name="fileBytes">The bytes of the file</param>
        </member>
        <member name="M:MsgReader.Helpers.FileTypeSelector.StripByteOrderMarker(System.Byte[])">
            <summary>
            Strips the BOM from the magic bytes array
            </summary>
            <param name="magicBytes"></param>
            <returns>Byte array without BOM</returns>
        </member>
        <member name="F:MsgReader.Helpers.Logger.LogStream">
            <summary>
                When set then logging is written to this stream
            </summary>
        </member>
        <member name="F:MsgReader.Helpers.Logger.InstanceId">
            <summary>
                An unique id that can be used to identify the logging of the converter when
                calling the code from multiple threads and writing all the logging to the same file
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.Logger.WriteToLog(System.String)">
            <summary>
                Writes a line and linefeed to the <see cref="F:MsgReader.Helpers.Logger.LogStream" />
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="T:MsgReader.Helpers.MimeType">
            <summary>
            This class contains all known mimetypes
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.MimeType.GetExtensionFromMimeType(System.String)">
            <summary>
            Returns the file extension for the given <paramref name="mimeType"/>. An empty string
            is returned when the mimetype is not found.
            </summary>
            <param name="mimeType">The mime type</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.StreamHelpers.ToByteArray(System.IO.Stream)">
            <summary>
                Returns the stream as an byte array
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.StreamHelpers.Eos(System.IO.BinaryReader)">
            <summary>
                Returns true when the end of the <see cref="P:System.IO.BinaryReader.BaseStream" /> has been reached
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Helpers.StreamUtility">
            <summary>
            Utility to help reading bytes and strings of a <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:MsgReader.Helpers.StreamUtility.ReadLineAsBytes(System.IO.Stream)">
            <summary>
            Read a line from the stream.
            A line is interpreted as all the bytes read until a CRLF or LF is encountered.<br/>
            CRLF pair or LF is not included in the string.
            </summary>
            <param name="stream">The stream from which the line is to be read</param>
            <returns>A line read from the stream returned as a byte array or <see langword="null"/> if no bytes were readable from the stream</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Helpers.StreamUtility.ReadLineAsAscii(System.IO.Stream)">
            <summary>
            Read a line from the stream. <see cref="M:MsgReader.Helpers.StreamUtility.ReadLineAsBytes(System.IO.Stream)"/> for more documentation.
            </summary>
            <param name="stream">The stream to read from</param>
            <returns>A line read from the stream or <see langword="null"/> if nothing could be read from the stream</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Helpers.Strings.ReadNullTerminatedString(System.IO.BinaryReader,System.Boolean)">
            <summary>
                Reads from the <paramref name="binaryReader"/> until a null terminated char is read
            </summary>
            <param name="binaryReader"></param>
            <param name="unicode"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.Strings.ReadNullTerminatedAsciiString(System.IO.BinaryReader)">
            <summary>
                Reads from the <paramref name="binaryReader"/> until a null terminated char is read
            </summary>
            <param name="binaryReader">The <see cref="T:System.IO.BinaryReader" /></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Helpers.Strings.ReadNullTerminatedUnicodeString(System.IO.BinaryReader)">
            <summary>
                Reads from the <paramref name="binaryReader"/> until a null terminated char is read
            </summary>
            <param name="binaryReader">The <see cref="T:System.IO.BinaryReader" /></param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Localization.LanguageConsts">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentAttachmentsLabel">
            <summary>
              Looks up a localized string similar to Attachments.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentCategoriesLabel">
            <summary>
              Looks up a localized string similar to Categories.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentCanceledText">
            <summary>
              Looks up a localized string similar to Declined.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentDelegateText">
            <summary>
              Looks up a localized string similar to Acting as delegate for the organizer of the meeting.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentDeletedExceptionWithNoResponseText">
            <summary>
              Looks up a localized string similar to Deleted exception with no response.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentDeletedWithNoResponseText">
            <summary>
              Looks up a localized string similar to Deleted meeting with no response.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentExceptionCanceledText">
            <summary>
              Looks up a localized string similar to Declined.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentLabel">
            <summary>
              Looks up a localized string similar to Meeting status.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentManagerText">
            <summary>
              Looks up a localized string similar to Organizer of the meeting.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentModifiedEndTimeText">
            <summary>
              Looks up a localized string similar to Modified end time.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentModifiedLocationText">
            <summary>
              Looks up a localized string similar to Modified location.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentModifiedStartTimeText">
            <summary>
              Looks up a localized string similar to Modified start time.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentRespondedAcceptText">
            <summary>
              Looks up a localized string similar to Accepted.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentRespondedDeclineText">
            <summary>
              Looks up a localized string similar to Declined.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentRespondedExceptionDeclineText">
            <summary>
              Looks up a localized string similar to Exception declined.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentClientIntentRespondedTentativeText">
            <summary>
              Looks up a localized string similar to Tentative.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentEndDateLabel">
            <summary>
              Looks up a localized string similar to End.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentLocationLabel">
            <summary>
              Looks up a localized string similar to Location.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentMandatoryParticipantsLabel">
            <summary>
              Looks up a localized string similar to Mandatory participants.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentOptionalParticipantsLabel">
            <summary>
              Looks up a localized string similar to Optional participants.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentOrganizerLabel">
            <summary>
              Looks up a localized string similar to Organizer.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentReccurenceTypeDailyText">
            <summary>
              Looks up a localized string similar to Daily.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentReccurenceTypeMonthlyText">
            <summary>
              Looks up a localized string similar to Monthly.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentReccurenceTypeNoneText">
            <summary>
              Looks up a localized string similar to (None).
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentReccurenceTypeWeeklyText">
            <summary>
              Looks up a localized string similar to Weekly.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentReccurenceTypeYearlyText">
            <summary>
              Looks up a localized string similar to Yearly.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentRecurrencePaternLabel">
            <summary>
              Looks up a localized string similar to Recurrence patern type.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentRecurrenceTypeLabel">
            <summary>
              Looks up a localized string similar to Recurrence patern.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentResourcesLabel">
            <summary>
              Looks up a localized string similar to Resources.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentStartDateLabel">
            <summary>
              Looks up a localized string similar to Start.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AppointmentSubjectLabel">
            <summary>
              Looks up a localized string similar to Subject.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AssistantLabel">
            <summary>
              Looks up a localized string similar to Assistant.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.AssistantTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Assistant.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.BeeperTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Pager.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.BirthdayLabel">
            <summary>
              Looks up a localized string similar to Birthday.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.BusinessFaxNumberLabel">
            <summary>
              Looks up a localized string similar to Business fax.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.BusinessTelephoneNumber2Label">
            <summary>
              Looks up a localized string similar to Business 2.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.BusinessTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Business.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.CallbackTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Callback.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.CarTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Car.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.CellularTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Mobile.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.CompanyLabel">
            <summary>
              Looks up a localized string similar to Company.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.CompanyMainTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Company main phone.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DataFormat">
            <summary>
              Looks up a localized string similar to MM-dd-yyyy.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DataFormatWithTime">
            <summary>
              Looks up a localized string similar to F.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceDaysText">
            <summary>
              Looks up a localized string similar to days.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceDayText">
            <summary>
              Looks up a localized string similar to day.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceHoursText">
            <summary>
              Looks up a localized string similar to hours.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceHourText">
            <summary>
              Looks up a localized string similar to hour.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceMinutesText">
            <summary>
              Looks up a localized string similar to minutes.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceMinuteText">
            <summary>
              Looks up a localized string similar to minute.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceMonthsText">
            <summary>
              Looks up a localized string similar to months.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceMonthText">
            <summary>
              Looks up a localized string similar to month.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceSecondsText">
            <summary>
              Looks up a localized string similar to seconds.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceSecondText">
            <summary>
              Looks up a localized string similar to second.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceWeeksText">
            <summary>
              Looks up a localized string similar to weeks.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceWeekText">
            <summary>
              Looks up a localized string similar to week.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceYearsText">
            <summary>
              Looks up a localized string similar to years.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DateDifferenceYearText">
            <summary>
              Looks up a localized string similar to year.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DepartmentLabel">
            <summary>
              Looks up a localized string similar to Department.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.DisplayNameLabel">
            <summary>
              Looks up a localized string similar to Full name.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.Email1DisplayNameLabel">
            <summary>
              Looks up a localized string similar to E-mail display as.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.Email1EmailAddressLabel">
            <summary>
              Looks up a localized string similar to E-mail.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.Email2DisplayNameLabel">
            <summary>
              Looks up a localized string similar to E-mail 2 display as.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.Email2EmailAddressLabel">
            <summary>
              Looks up a localized string similar to E-mail 2.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.Email3DisplayNameLabel">
            <summary>
              Looks up a localized string similar to E-mail 3 display as.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.Email3EmailAddressLabel">
            <summary>
              Looks up a localized string similar to E-mail 3.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailAttachmentsLabel">
            <summary>
              Looks up a localized string similar to Attachments.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailBccLabel">
            <summary>
              Looks up a localized string similar to BCC.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailCategoriesLabel">
            <summary>
              Looks up a localized string similar to Categories.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailCcLabel">
            <summary>
              Looks up a localized string similar to CC.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailFollowUpCompletedText">
            <summary>
              Looks up a localized string similar to Completed.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailFollowUpFlag">
            <summary>
              Looks up a localized string similar to Flag.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailFollowUpLabel">
            <summary>
              Looks up a localized string similar to Follow up.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailFollowUpStatusLabel">
            <summary>
              Looks up a localized string similar to Follow up status.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailFromLabel">
            <summary>
              Looks up a localized string similar to From.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailOnBehalfOf">
            <summary>
              Looks up a localized string similar to on behalf of.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailSentOnLabel">
            <summary>
              Looks up a localized string similar to Sent on.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailSignedBy">
            <summary>
              Looks up a localized string similar to Signed by.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailSignedByOn">
            <summary>
              Looks up a localized string similar to on.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailSubjectLabel">
            <summary>
              Looks up a localized string similar to Subject.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.EmailToLabel">
            <summary>
              Looks up a localized string similar to To.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.FunctionLabel">
            <summary>
              Looks up a localized string similar to Job title.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.GivenNameLabel">
            <summary>
              Looks up a localized string similar to First name.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.HomeAddressLabel">
            <summary>
              Looks up a localized string similar to Home address.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.HomeFaxNumberLabel">
            <summary>
              Looks up a localized string similar to Home fax.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.HomeTelephoneNumber2Label">
            <summary>
              Looks up a localized string similar to Home 2.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.HomeTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Home.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.HtmlLabel">
            <summary>
              Looks up a localized string similar to Web page.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.ImportanceHighText">
            <summary>
              Looks up a localized string similar to High.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.ImportanceLabel">
            <summary>
              Looks up a localized string similar to Urgent.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.ImportanceLowText">
            <summary>
              Looks up a localized string similar to Low.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.ImportanceNormalText">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.InstantMessagingAddressLabel">
            <summary>
              Looks up a localized string similar to IM address.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.ISDNNumberLabel">
            <summary>
              Looks up a localized string similar to ISDN.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.NameLessFileName">
            <summary>
              Looks up a localized string similar to Nameless.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.OtherAddressLabel">
            <summary>
              Looks up a localized string similar to Other address.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.OtherFaxLabel">
            <summary>
              Looks up a localized string similar to Other fax.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.OtherTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Other.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.PrimaryFaxNumberLabel">
            <summary>
              Looks up a localized string similar to Other fax.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.PrimaryTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Primary phone.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.ProfessionLabel">
            <summary>
              Looks up a localized string similar to Profession.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.RadioTelephoneNumberLabel">
            <summary>
              Looks up a localized string similar to Radio.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.SpouseNameLabel">
            <summary>
              Looks up a localized string similar to Spouse/Partner.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.StickyNoteDateLabel">
            <summary>
              Looks up a localized string similar to Date.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.SurNameLabel">
            <summary>
              Looks up a localized string similar to Last name.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskActualEffortLabel">
            <summary>
              Looks up a localized string similar to Actual work.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskBillingInformationLabel">
            <summary>
              Looks up a localized string similar to Billing information.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskCompanyLabel">
            <summary>
              Looks up a localized string similar to Company.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskContactsLabel">
            <summary>
              Looks up a localized string similar to Contacts.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskDateCompleted">
            <summary>
              Looks up a localized string similar to Completed on.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskDueDateLabel">
            <summary>
              Looks up a localized string similar to Due date.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskEstimatedEffortLabel">
            <summary>
              Looks up a localized string similar to Total work.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskMileageLabel">
            <summary>
              Looks up a localized string similar to Mileage.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskOwnerLabel">
            <summary>
              Looks up a localized string similar to Owner.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskPercentageCompleteLabel">
            <summary>
              Looks up a localized string similar to Percentage complete.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskRequestedByLabel">
            <summary>
              Looks up a localized string similar to Requested by.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskStartDateLabel">
            <summary>
              Looks up a localized string similar to Start date.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskStatusCompleteText">
            <summary>
              Looks up a localized string similar to Complete.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskStatusInProgressText">
            <summary>
              Looks up a localized string similar to In progress.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskStatusLabel">
            <summary>
              Looks up a localized string similar to Status.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskStatusNotStartedText">
            <summary>
              Looks up a localized string similar to Not started.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskStatusWaitingText">
            <summary>
              Looks up a localized string similar to Waiting.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TaskSubjectLabel">
            <summary>
              Looks up a localized string similar to Subject.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TelexNumberLabel">
            <summary>
              Looks up a localized string similar to Telex.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.TextTelephoneLabel">
            <summary>
              Looks up a localized string similar to TTY/TDD phone.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.WeddingAnniversaryLabel">
            <summary>
              Looks up a localized string similar to Anniversary.
            </summary>
        </member>
        <member name="P:MsgReader.Localization.LanguageConsts.WorkAddressLabel">
            <summary>
              Looks up a localized string similar to Business address.
            </summary>
        </member>
        <member name="T:MsgReader.Mime.Decode.Base64">
            <summary>
            Utility class for dealing with Base64 encoded strings
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.Base64.Decode(System.String)">
            <summary>
            Decodes a base64 encoded string into the bytes it describes
            </summary>
            <param name="base64Encoded">The string to decode</param>
            <returns>A byte array that the base64 string described</returns>
        </member>
        <member name="M:MsgReader.Mime.Decode.Base64.Decode(System.String,System.Text.Encoding)">
            <summary>
            Decodes a Base64 encoded string using a specified <see cref="T:System.Text.Encoding"/> 
            </summary>
            <param name="base64Encoded">Source string to decode</param>
            <param name="encoding">The encoding to use for the decoded byte array that <paramref name="base64Encoded"/> describes</param>
            <returns>A decoded string</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="base64Encoded"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
            <exception cref="T:System.FormatException">If <paramref name="base64Encoded"/> is not a valid base64 encoded string</exception>
        </member>
        <member name="T:MsgReader.Mime.Decode.EncodedWord">
            <summary>
            Utility class for dealing with encoded word strings<br/>
            <br/>
            EncodedWord encoded strings are only in ASCII, but can embed information
            about characters in other character sets.<br/>
            <br/>
            It is done by specifying the character set, an encoding that maps from ASCII to
            the correct bytes and the actual encoded string.<br/>
            <br/>
            It is specified in a format that is best summarized by a BNF:<br/>
            <c>"=?" character_set "?" encoding "?" encoded-text "?="</c><br/>
            </summary>
            <example>
            <c>=?ISO-8859-1?Q?=2D?=</c>
            Here <c>ISO-8859-1</c> is the character set.<br/>
            <c>Q</c> is the encoding method (quoted-printable). <c>B</c> is also supported (Base 64).<br/>
            The encoded text is the <c>=2D</c> part which is decoded to a space.
            </example>
        </member>
        <member name="M:MsgReader.Mime.Decode.EncodedWord.Decode(System.String)">
             <summary>
             Decode text that is encoded with the <see cref="T:MsgReader.Mime.Decode.EncodedWord"/> encoding.<br/>
            <br/>
             This method will decode any encoded-word found in the string.<br/>
             All parts which is not encoded will not be touched.<br/>
             <br/>
             From <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>:<br/>
             <code>
             Generally, an "encoded-word" is a sequence of printable ASCII
             characters that begins with "=?", ends with "?=", and has two "?"s in
             between.  It specifies a character set and an encoding method, and
             also includes the original text encoded as graphic ASCII characters,
             according to the rules for that encoding method.
             </code>
             Example:<br/>
             <c>=?ISO-8859-1?q?this=20is=20some=20text?= other text here</c>
             </summary>
             <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-2">RFC 2047 section 2</a> "Syntax of encoded-words" for more details</remarks>
             <param name="encodedWords">Source text. May be content which is not encoded.</param>
             <returns>Decoded text</returns>
             <exception cref="T:System.ArgumentNullException">If <paramref name="encodedWords"/> is <see langword="null"/></exception>
        </member>
        <member name="T:MsgReader.Mime.Decode.EncodingFinder">
            <summary>
            Utility class used by OpenPop for mapping from a characterSet to an <see cref="T:System.Text.Encoding"/>.<br/>
            <br/>
            The functionality of the class can be altered by adding mappings
            using <see cref="M:MsgReader.Mime.Decode.EncodingFinder.AddMapping(System.String,System.Text.Encoding)"/> and by adding a <see cref="P:MsgReader.Mime.Decode.EncodingFinder.FallbackDecoder"/>.<br/>
            <br/>
            Given a characterSet, it will try to find the Encoding as follows:
            <list type="number">
                <item>
                    <description>If a mapping for the characterSet was added, use the specified Encoding from there. Mappings can be added using <see cref="M:MsgReader.Mime.Decode.EncodingFinder.AddMapping(System.String,System.Text.Encoding)"/>.</description>
                </item>
                <item>
                    <description>Try to parse the characterSet and look it up using <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)"/> for codepages or <see cref="M:System.Text.Encoding.GetEncoding(System.String)"/> for named encodings.</description>
                </item>
                <item>
                    <description>If an encoding is not found yet, use the <see cref="P:MsgReader.Mime.Decode.EncodingFinder.FallbackDecoder"/> if defined. The <see cref="P:MsgReader.Mime.Decode.EncodingFinder.FallbackDecoder"/> is user defined.</description>
                </item>
            </list>
            </summary>
        </member>
        <member name="T:MsgReader.Mime.Decode.EncodingFinder.FallbackDecoderDelegate">
            <summary>
            Delegate that is used when the EncodingFinder is unable to find an encoding by
            using the <see cref="P:MsgReader.Mime.Decode.EncodingFinder.EncodingMap"/> or general code.<br/>
            This is used as a last resort and can be used for setting a default encoding or
            for finding an encoding on runtime for some <paramref name="characterSet"/>.
            </summary>
            <param name="characterSet">The character set to find an encoding for.</param>
            <returns>An encoding for the <paramref name="characterSet"/> or <see langword="null"/> if none could be found.</returns>
        </member>
        <member name="P:MsgReader.Mime.Decode.EncodingFinder.FallbackDecoder">
            <summary>
            Last resort decoder.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Decode.EncodingFinder.EncodingMap">
            <summary>
            Mapping from charactersets to encodings.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.EncodingFinder.#cctor">
            <summary>
            Initialize the EncodingFinder
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.EncodingFinder.Reset">
            <summary>
            Used to reset this static class to facilite isolated unit testing.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.EncodingFinder.FindEncoding(System.String)">
            <summary>
            Parses a character set into an encoding.
            </summary>
            <param name="characterSet">The character set to parse</param>
            <returns>An encoding which corresponds to the character set</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.EncodingFinder.AddMapping(System.String,System.Text.Encoding)">
            <summary>
            Puts a mapping from <paramref name="characterSet"/> to <paramref name="encoding"/>
            into the <see cref="T:MsgReader.Mime.Decode.EncodingFinder"/>'s internal mapping Dictionary.
            </summary>
            <param name="characterSet">The string that maps to the <paramref name="encoding"/></param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> that should be mapped from <paramref name="characterSet"/></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
        </member>
        <member name="T:MsgReader.Mime.Decode.QuotedPrintable">
            <summary>
            Used for decoding Quoted-Printable text.<br/>
            This is a robust implementation of a Quoted-Printable decoder defined in <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a> and <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
            Every measurement has been taken to conform to the RFC.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.DecodeEncodedWord(System.String,System.Text.Encoding)">
            <summary>
            Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
            RFC 2047 is used for decoding Encoded-Word encoded strings.
            </summary>
            <param name="toDecode">Quoted-Printable encoded string</param>
            <param name="encoding">Specifies which encoding the returned string will be in</param>
            <returns>A decoded string in the correct encoding</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.DecodeContentTransferEncoding(System.String)">
            <summary>
            Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a>.<br/>
            RFC 2045 specifies the decoding of a body encoded with Content-Transfer-Encoding of quoted-printable.
            </summary>
            <param name="toDecode">Quoted-Printable encoded string</param>
            <returns>A decoded byte array that the Quoted-Printable encoded string described</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.Rfc2047QuotedPrintableDecode(System.String,System.Boolean)">
            <summary>
            This is the actual decoder.
            </summary>
            <param name="toDecode">The string to be decoded from Quoted-Printable</param>
            <param name="encodedWordVariant">
            If <see langword="true"/>, specifies that RFC 2047 quoted printable decoding is used.<br/>
            This is for quoted-printable encoded words<br/>
            <br/>
            If <see langword="false"/>, specifies that RFC 2045 quoted printable decoding is used.<br/>
            This is for quoted-printable Content-Transfer-Encoding
            </param>
            <returns>A decoded byte array that was described by <paramref name="toDecode"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-4.2">RFC 2047 section 4.2</a> for RFC details</remarks>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.WriteAllBytesToStream(System.IO.Stream,System.Byte[])">
            <summary>
            Writes all bytes in a byte array to a stream
            </summary>
            <param name="stream">The stream to write to</param>
            <param name="toWrite">The bytes to write to the <paramref name="stream"/></param>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.RemoveIllegalControlCharacters(System.String)">
            <summary>
            RFC 2045 states about robustness:<br/>
            <code>
            Control characters other than TAB, or CR and LF as parts of CRLF pairs,
            must not appear. The same is true for octets with decimal values greater
            than 126.  If found in incoming quoted-printable data by a decoder, a
            robust implementation might exclude them from the decoded data and warn
            the user that illegal characters were discovered.
            </code>
            Control characters are defined in RFC 2396 as<br/>
            <c>control = US-ASCII coded characters 00-1F and 7F hexadecimal</c>
            </summary>
            <param name="input">String to be stripped from illegal control characters</param>
            <returns>A string with no illegal control characters</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.RemoveCarriageReturnAndNewLinewIfNotInPair(System.String)">
            <summary>
            This method will remove any \r and \n which is not paired as \r\n
            </summary>
            <param name="input">String to remove lonely \r and \n's from</param>
            <returns>A string without lonely \r and \n's</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.DecodeEqualSignNotLongEnough(System.String)">
            <summary>
            RFC 2045 says that a robust implementation should handle:<br/>
            <code>
            An "=" cannot be the ultimate or penultimate character in an encoded
            object. This could be handled as in case (2) above.
            </code>
            Case (2) is:<br/>
            <code>
            An "=" followed by a character that is neither a
            hexadecimal digit (including "abcdef") nor the CR character of a CRLF pair
            is illegal.  This case can be the result of US-ASCII text having been
            included in a quoted-printable part of a message without itself having
            been subjected to quoted-printable encoding.  A reasonable approach by a
            robust implementation might be to include the "=" character and the
            following character in the decoded data without any transformation and, if
            possible, indicate to the user that proper decoding was not possible at
            this point in the data.
            </code>
            </summary>
            <param name="decode">
            The string to decode which cannot have length above or equal to 3
            and must start with an equal sign.
            </param>
            <returns>A decoded byte array</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">Thrown if a the <paramref name="decode"/> parameter has length above 2 or does not start with an equal sign.</exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.QuotedPrintable.DecodeEqualSign(System.String)">
            <summary>
            This helper method will decode a string of the form "=XX" where X is any character.<br/>
            This method will never fail, unless an argument of length not equal to three is passed.
            </summary>
            <param name="decode">The length 3 character that needs to be decoded</param>
            <returns>A decoded byte array</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">Thrown if a the <paramref name="decode"/> parameter does not have length 3 or does not start with an equal sign.</exception>
        </member>
        <member name="T:MsgReader.Mime.Decode.Rfc2231Decoder">
            <summary>
            This class is responsible for decoding parameters that has been encoded with:<br/>
            <list type="bullet">
            <item>
               <b>Continuation</b><br/>
               This is where a single parameter has such a long value that it could
               be wrapped while in transit. Instead multiple parameters is used on each line.<br/>
               <br/>
               <b>Example</b><br/>
               From: <c>Content-Type: text/html; boundary="someVeryLongStringHereWhichCouldBeWrappedInTransit"</c><br/>
               To: <c>Content-Type: text/html; boundary*0="someVeryLongStringHere" boundary*1="WhichCouldBeWrappedInTransit"</c><br/>
            </item>
            <item>
               <b>Encoding</b><br/>
               Sometimes other characters then ASCII characters are needed in parameters.<br/>
               The parameter is then given a different name to specify that it is encoded.<br/>
               <br/>
               <b>Example</b><br/>
               From: <c>Content-Disposition attachment; filename="specialCharsÆØÅ"</c><br/>
               To: <c>Content-Disposition attachment; filename*="ISO-8859-1'en-us'specialCharsC6D8C0"</c><br/>
               This encoding is almost the same as <see cref="T:MsgReader.Mime.Decode.EncodedWord"/> encoding, and is used to decode the value.<br/>
            </item>
            <item>
               <b>Continuation and Encoding</b><br/>
               Both Continuation and Encoding can be used on the same time.<br/>
               <br/>
               <b>Example</b><br/>
               From: <c>Content-Disposition attachment; filename="specialCharsÆØÅWhichIsSoLong"</c><br/>
               To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1*="WhichIsSoLong"</c><br/>
               This could also be encoded as:<br/>
               To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1="WhichIsSoLong"</c><br/>
               Notice that <c>filename*1</c> does not have an <c>*</c> after it - denoting it IS NOT encoded.<br/>
               There are some rules about this:<br/>
               <list type="number">
                 <item>The encoding must be mentioned in the first part (filename*0*), which has to be encoded.</item>
                 <item>No other part must specify an encoding, but if encoded it uses the encoding mentioned in the first part.</item>
                 <item>Parts may be encoded or not in any order.</item>
               </list>
               <br/>
            </item>
            </list>
            More information and the specification is available in <see href="http://tools.ietf.org/html/rfc2231">RFC 2231</see>.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2231Decoder.Decode(System.String)">
            <summary>
            Decodes a string of the form:<br/>
            <c>value0; key1=value1; key2=value2; key3=value3</c><br/>
            The returned List of key value pairs will have the key as key and the decoded value as value.<br/>
            The first value0 will have a key of <see cref="F:System.String.Empty"/>.<br/>
            <br/>
            If continuation is used, then multiple keys will be merged into one key with the different values
            decoded into on big value for that key.<br/>
            Example:<br/>
            <code>
            title*0=part1
            title*1=part2
            </code>
            will have key and value of:<br></br>
            <c>title=decode(part1)decode(part2)</c>
            </summary>
            <param name="toDecode">The string to decode.</param>
            <returns>A list of decoded key value pairs.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2231Decoder.DecodePairs(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Decodes the list of key value pairs into a decoded list of key value pairs.<br/>
            There may be less keys in the decoded list, but then the values for the lost keys will have been appended
            to the new key.
            </summary>
            <param name="pairs">The pairs to decode</param>
            <returns>A decoded list of pairs</returns>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2231Decoder.DecodeSingleValue(System.String,System.String@)">
            <summary>
            This will decode a single value of the form: <c>ISO-8859-1'en-us'%3D%3DIamHere</c><br/>
            Which is basically a <see cref="T:MsgReader.Mime.Decode.EncodedWord"/> form just using % instead of =<br/>
            Notice that 'en-us' part is not used for anything.<br/>
            <br/>
            If the single value given is not on the correct form, it will be returned without 
            being decoded and <paramref name="encodingUsed"/> will be set to <see langword="null"/>.
            </summary>
            <param name="encodingUsed">
            The encoding used to decode with - it is given back for later use.<br/>
            <see langword="null"/> if input was not in the correct form.
            </param>
            <param name="toDecode">The value to decode</param>
            <returns>
            The decoded value that corresponds to <paramref name="toDecode"/> or if
            <paramref name="toDecode"/> is not on the correct form, it will be non-decoded.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2231Decoder.DecodeSingleValue(System.String,System.String)">
            <summary>
            This will decode a single value of the form: %3D%3DIamHere
            Which is basically a <see cref="T:MsgReader.Mime.Decode.EncodedWord"/> form just using % instead of =
            </summary>
            <param name="valueToDecode">The value to decode</param>
            <param name="encoding">The encoding used to decode with</param>
            <returns>The decoded value that corresponds to <paramref name="valueToDecode"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="valueToDecode"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
        </member>
        <member name="T:MsgReader.Mime.Decode.Rfc2822DateTime">
            <summary>
            Class used to decode RFC 2822 Date header fields.
            </summary>
        </member>
        <member name="F:MsgReader.Mime.Decode.Rfc2822DateTime.RegexOldTimezoneFormats">
            <summary>
            Timezone formats that aren't +-hhmm, e.g. UTC, or K. See MatchEvaluator method for conversions
            </summary>
        </member>
        <member name="F:MsgReader.Mime.Decode.Rfc2822DateTime.RegexNewTimezoneFormats">
            <summary>
            Matches any +=hhmm timezone offset, e.g. +0100
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Decode.Rfc2822DateTime.CustomDateTimeFormats">
            <summary>
            Custom DateTime formats - will be tried if cannot parse the dateInput string using the default method
             Specified using formats at http://msdn.microsoft.com/en-us/library/8kb3ddd4%28v=vs.110%29.aspx
             One format per string in the array
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2822DateTime.StringToDate(System.String)">
            <summary>
            Converts a string in RFC 2822 format into a <see cref="T:System.DateTime"/> object
            </summary>
            <param name="inputDate">The date to convert</param>
            <returns>
            A valid <see cref="T:System.DateTime"/> object, which represents the same time as the string that was converted. 
            If <paramref name="inputDate"/> is not a valid date representation, then <see cref="F:System.DateTime.MinValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="inputDate"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="inputDate"/> could not be parsed into a <see cref="T:System.DateTime"/> object</exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2822DateTime.AdjustTimezone(System.DateTime,System.String)">
            <summary>
            Adjust the <paramref name="dateTime"/> object given according to the timezone specified in the <paramref name="dateInput"/>.
            </summary>
            <param name="dateTime">The date to alter</param>
            <param name="dateInput">The input date, in which the timezone can be found</param>
            <returns>An date altered according to the timezone</returns>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2822DateTime.MatchEvaluator(System.Text.RegularExpressions.Match)">
             <summary>
             Convert timezones in older formats to [+-]dddd format.
             </summary>
             <param name="match">The match that was found</param>
             <returns>The string to replace the matched string with</returns>
             <remarks>
            
             RFC 2822: http://www.rfc-base.org/rfc-2822.html
                 
                 4.3. Obsolete Date and Time  
             
                     The syntax for the obsolete date format allows a 2 digit year in the
                     date field and allows for a list of alphabetic time zone
                     specifications that were used in earlier versions of this standard.
                     It also permits comments and folding white space between many of the
                     tokens.
                 
                 	obs-day-of-week =       [CFWS] day-name [CFWS]
                 	obs-year        =       [CFWS] 2*DIGIT [CFWS]
                 	obs-month       =       CFWS month-name CFWS
                 	obs-day         =       [CFWS] 1*2DIGIT [CFWS]
                 	obs-hour        =       [CFWS] 2DIGIT [CFWS]
                 	obs-minute      =       [CFWS] 2DIGIT [CFWS]
                 	obs-second      =       [CFWS] 2DIGIT [CFWS]
                 	obs-zone        =       "UT" / "GMT" /          ; Universal Time
                 
                 	Resnick                     Standards Track                    [Page 31]
                 	RFC 2822                Internet Message Format               April 2001
                 
                 	                                                ; North American UT
                 	                                                ; offsets
                 	                        "EST" / "EDT" /         ; Eastern:  - 5/ - 4
                 	                        "CST" / "CDT" /         ; Central:  - 6/ - 5
                 	                        "MST" / "MDT" /         ; Mountain: - 7/ - 6
                 	                        "PST" / "PDT" /         ; Pacific:  - 8/ - 7
                 
                 	                        %d65-73 /               ; Military zones - "A"
                 	                        %d75-90 /               ; through "I" and "K"
                 	                        %d97-105 /              ; through "Z", both
                 	                        %d107-122               ; upper and lower case -- imported lower and upper
            
             </remarks>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2822DateTime.ExtractDateTime(System.String)">
            <summary>
            Extracts the date and time parts from the <paramref name="dateInput"/>
            </summary>
            <param name="dateInput">The date input string, from which to extract the date and time parts</param>
            <returns>The extracted date part or <see langword="DateTime.MinValue"/> if <paramref name="dateInput"/> is not recognized as a valid date.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="dateInput"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2822DateTime.StripCommentsAndExcessWhitespace(System.String)">
            <summary>
            Strips and removes all comments and excessive whitespace from the string
            </summary>
            <param name="input">The input to strip from</param>
            <returns>The stripped string</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.Rfc2822DateTime.FixSpecialCases(System.String)">
            <summary>
            Converts date time string in very wrong date time format:
            Tue Feb 18 10:23:30 2014 (MSK)
            to
            Feb 18 2014 10:23:30 MSK
            </summary>
            <param name="inputDate">The date to convert</param>
            <returns>The corrected string</returns>
        </member>
        <member name="T:MsgReader.Mime.Decode.SizeParser">
            <summary>
            Thanks to http://stackoverflow.com/a/7333402/477854 for inspiration
            This class can convert from strings like "104 kB" (104 kilobytes) to bytes.
            It does not know about differences such as kilobits vs kilobytes.
            </summary>
        </member>
        <member name="T:MsgReader.Mime.Decode.Utility">
            <summary>
            Contains common operations needed while decoding.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Decode.Utility.RemoveQuotesIfAny(System.String)">
            <summary>
            Remove quotes, if found, around the string.
            </summary>
            <param name="text">Text with quotes or without quotes</param>
            <returns>Text without quotes</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="text"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Decode.Utility.SplitStringWithCharNotInsideQuotes(System.String,System.Char)">
            <summary>
            Split a string into a list of strings using a specified character.<br/>
            Everything inside quotes are ignored.
            </summary>
            <param name="input">A string to split</param>
            <param name="toSplitAt">The character to use to split with</param>
            <returns>A List of strings that was delimited by the <paramref name="toSplitAt"/> character</returns>
        </member>
        <member name="T:MsgReader.Mime.Header.ContentTransferEncoding">
            <summary>
            <see cref="T:System.Enum"/> that describes the ContentTransferEncoding header field
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for more details</remarks>
        </member>
        <member name="F:MsgReader.Mime.Header.ContentTransferEncoding.SevenBit">
            <summary>
            7 bit Encoding
            </summary>
        </member>
        <member name="F:MsgReader.Mime.Header.ContentTransferEncoding.EightBit">
            <summary>
            8 bit Encoding
            </summary>
        </member>
        <member name="F:MsgReader.Mime.Header.ContentTransferEncoding.QuotedPrintable">
            <summary>
            Quoted Printable Encoding
            </summary>
        </member>
        <member name="F:MsgReader.Mime.Header.ContentTransferEncoding.Base64">
            <summary>
            Base64 Encoding
            </summary>
        </member>
        <member name="F:MsgReader.Mime.Header.ContentTransferEncoding.Binary">
            <summary>
            Binary Encoding
            </summary>
        </member>
        <member name="T:MsgReader.Mime.Header.HeaderExtractor">
            <summary>
             Utility class that divides a message into a body and a header.<br/>
             The header is then parsed to a strongly typed <see cref="T:MsgReader.Mime.Header.MessageHeader"/> object.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderExtractor.GetHeaders(System.String)">
            <summary>
            Extract the headers from the given headers string and gives it back
            as a MessageHeader object
            </summary>
            <param name="headersString">The string with the header information</param>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderExtractor.FindHeaderEndPosition(System.Byte[])">
            <summary>
            Find the end of the header section in a byte array.<br/>
            The headers have ended when a blank line is found
            </summary>
            <param name="messageContent">The full message stored as a byte array</param>
            <returns>The position of the line just after the header end blank line</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageContent"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderExtractor.ExtractHeadersAndBody(System.Byte[],MsgReader.Mime.Header.MessageHeader@,System.Byte[]@)">
            <summary>
            Extract the header part and body part of a message.<br/>
            The headers are then parsed to a strongly typed <see cref="T:MsgReader.Mime.Header.MessageHeader"/> object.
            </summary>
            <param name="fullRawMessage">The full message in bytes where header and body needs to be extracted from</param>
            <param name="headers">The extracted header parts of the message</param>
            <param name="body">The body part of the message</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fullRawMessage"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderExtractor.ExtractHeaders(System.String)">
            <summary>
            Method that takes a full message and extract the headers from it.
            </summary>
            <param name="messageContent">The message to extract headers from. Does not need the body part. Needs the empty headers end line.</param>
            <returns>A collection of Name and Value pairs of headers</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageContent"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderExtractor.IsMoreLinesInHeaderValue(System.IO.TextReader)">
            <summary>
            Check if the next line is part of the current header value we are parsing by
            peeking on the next character of the <see cref="T:System.IO.TextReader"/>.<br/>
            This should only be called while parsing headers.
            </summary>
            <param name="reader">The reader from which the header is read from</param>
            <returns><see langword="true"/> if multi-line header. <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderExtractor.SeparateHeaderNameAndValue(System.String)">
            <summary>
            Separate a full header line into a header name and a header value.
            </summary>
            <param name="rawHeader">The raw header line to be separated</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rawHeader"/> is <see langword="null"/></exception>
        </member>
        <member name="T:MsgReader.Mime.Header.HeaderFieldParser">
            <summary>
            Class that can parse different fields in the header sections of a MIME message.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderFieldParser.ParseContentTransferEncoding(System.String)">
            <summary>
            Parses the Content-Transfer-Encoding header.
            </summary>
            <param name="headerValue">The value for the header to be parsed</param>
            <returns>A <see cref="T:MsgReader.Mime.Header.ContentTransferEncoding"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="headerValue"/> could not be parsed to a <see cref="T:MsgReader.Mime.Header.ContentTransferEncoding"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderFieldParser.ParseImportance(System.String)">
            <summary>
            Parses an ImportanceType from a given Importance header value.
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A <see cref="T:System.Net.Mail.MailPriority"/>. If the <paramref name="headerValue"/> is not recognized, Normal is returned.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderFieldParser.ParseContentType(System.String)">
            <summary>
            Parses a the value for the header Content-Type to 
            a <see cref="T:System.Net.Mime.ContentType"/> object.
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A <see cref="T:System.Net.Mime.ContentType"/> object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderFieldParser.ParseContentDisposition(System.String)">
            <summary>
            Parses a the value for the header Content-Disposition to a <see cref="T:System.Net.Mime.ContentDisposition"/> object.
            </summary>
            <param name="headerValue">The value to be parsed</param>
            <returns>A <see cref="T:System.Net.Mime.ContentDisposition"/> object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderFieldParser.ParseId(System.String)">
            <summary>
            Parses an ID like Message-Id and Content-Id.<br/>
            Example:<br/>
            <c>&lt;test@test.com&gt;</c><br/>
            into<br/>
            <c>test@test.com</c>
            </summary>
            <param name="headerValue">The id to parse</param>
            <returns>A parsed ID</returns>
        </member>
        <member name="M:MsgReader.Mime.Header.HeaderFieldParser.ParseMultipleIDs(System.String)">
            <summary>
            Parses multiple IDs from a single string like In-Reply-To.
            </summary>
            <param name="headerValue">The value to parse</param>
            <returns>A list of IDs</returns>
        </member>
        <member name="T:MsgReader.Mime.Header.MessageHeader">
            <summary>
            Class that holds all headers for a message<br/>
            Headers which are unknown the the parser will be held in the <see cref="P:MsgReader.Mime.Header.MessageHeader.UnknownHeaders"/> collection.<br/>
            <br/>
            This class cannot be instantiated from outside the library.
            </summary>
            <remarks>
            See <a href="http://tools.ietf.org/html/rfc4021">RFC 4021</a> for a large list of headers.<br/>
            </remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.UnknownHeaders">
            <summary>
            All headers which were not recognized and explicitly dealt with.<br/>
            This should mostly be custom headers, which are marked as X-[name].<br/>
            <br/>
            This list will be empty if all headers were recognized and parsed.
            </summary>
            <remarks>
            If you as a user, feels that a header in this collection should
            be parsed, feel free to notify the developers.
            </remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.ContentDescription">
            <summary>
            A human readable description of the body<br/>
            <br/>
            <see langword="null"/> if no Content-Description header was present in the message.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.ContentId">
            <summary>
            ID of the content part (like an attached image). Used with MultiPart messages.<br/>
            <br/>
            <see langword="null"/> if no Content-ID header field was present in the message.
            </summary>
            <see cref="P:MsgReader.Mime.Header.MessageHeader.MessageId">For an ID of the message</see>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Keywords">
            <summary>
            Message keywords<br/>
            <br/>
            The list will be empty if no Keywords header was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.DispositionNotificationTo">
            <summary>
            A List of emails to people who wishes to be notified when some event happens.<br/>
            These events could be email:
            <list type="bullet">
              <item>deletion</item>
              <item>printing</item>
              <item>received</item>
              <item>...</item>
            </list>
            The list will be empty if no Disposition-Notification-To header was present in the message
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc3798">RFC 3798</a> for details</remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Received">
            <summary>
            This is the Received headers. This tells the path that the email went.<br/>
            <br/>
            The list will be empty if no Received header was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Importance">
            <summary>
            Importance of this email.<br/>
            <br/>
            The importance level is set to normal, if no Importance header field was mentioned or it contained
            unknown information. This is the expected behavior according to the RFC.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.ContentTransferEncoding">
            <summary>
            This header describes the Content encoding during transfer.<br/>
            <br/>
            If no Content-Transfer-Encoding header was present in the message, it is set
            to the default of <see cref="F:MsgReader.Mime.Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Cc">
            <summary>
            Carbon Copy. This specifies who got a copy of the message.<br/>
            <br/>
            The list will be empty if no Cc header was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Bcc">
            <summary>
            Blind Carbon Copy. This specifies who got a copy of the message, but others
            cannot see who these persons are.<br/>
            <br/>
            The list will be empty if no Received Bcc was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.To">
            <summary>
            Specifies who this mail was for<br/>
            <br/>
            The list will be empty if no To header was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.From">
            <summary>
            Specifies who sent the email<br/>
            <br/>
            <see langword="null"/> if no From header field was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.ReplyTo">
            <summary>
            Specifies who a reply to the message should be sent to<br/>
            <br/>
            <see langword="null"/> if no Reply-To header field was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.InReplyTo">
            <summary>
            The message identifier(s) of the original message(s) to which the
            current message is a reply.<br/>
            <br/>
            The list will be empty if no In-Reply-To header was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.References">
            <summary>
            The message identifier(s) of other message(s) to which the current
            message is related to.<br/>
            <br/>
            The list will be empty if no References header was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Sender">
            <summary>
            This is the sender of the email address.<br/>
            <br/>
            <see langword="null"/> if no Sender header field was present in the message
            </summary>
            <remarks>
            The RFC states that this field can be used if a secretary
            is sending an email for someone she is working for.
            The email here will then be the secretary's email, and
            the Reply-To field would hold the address of the person she works for.<br/>
            RFC states that if the Sender is the same as the From field,
            sender should not be included in the message.
            </remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.ContentType">
            <summary>
            The Content-Type header field.<br/>
            <br/>
            If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
            defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
            If set, the default is overridden.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.ContentDisposition">
            <summary>
            Used to describe if a <see cref="T:MsgReader.Mime.MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
            Also contains information about filename if such was sent.<br/>
            <br/>
            <see langword="null"/> if no Content-Disposition header field was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Date">
            <summary>
            The Date when the email was sent.<br/>
            This is the raw value. <see cref="P:MsgReader.Mime.Header.MessageHeader.DateSent"/> for a parsed up <see cref="T:System.DateTime"/> value of this field.<br/>
            <br/>
            <see langword="DateTime.MinValue"/> if no Date header field was present in the message or if the date could not be parsed.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.DateSent">
            <summary>
            The Date when the email was sent.<br/>
            This is the parsed equivalent of <see cref="P:MsgReader.Mime.Header.MessageHeader.Date"/>.<br/>
            Notice that the <see cref="T:System.TimeZone"/> of the <see cref="T:System.DateTime"/> object is in UTC and has NOT been converted
            to local <see cref="T:System.TimeZone"/>.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.MessageId">
            <summary>
            An ID of the message that is SUPPOSED to be in every message according to the RFC.<br/>
            The ID is unique.<br/>
            <br/>
            <see langword="null"/> if no Message-ID header field was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.MimeVersion">
            <summary>
            The Mime Version.<br/>
            This field will almost always show 1.0<br/>
            <br/>
            <see langword="null"/> if no Mime-Version header field was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.ReturnPath">
            <summary>
            A single <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/> with no username inside.<br/>
            This is a trace header field, that should be in all messages.<br/>
            Replies should be sent to this address.<br/>
            <br/>
            <see langword="null"/> if no Return-Path header field was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.MessageHeader.Subject">
            <summary>
            The subject line of the message in decoded, one line state.<br/>
            This should be in all messages.<br/>
            <br/>
            <see langword="null"/> if no Subject header field was present in the message
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Header.MessageHeader.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a MessageHeader
            </summary>
            <param name="headers">The collection that should be traversed and parsed</param>
            <returns>A valid MessageHeader object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.MessageHeader.ParseHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parses a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a <see cref="T:MsgReader.Mime.Header.MessageHeader"/>
            </summary>
            <param name="headers">The collection that should be traversed and parsed</param>
            <returns>A valid <see cref="T:MsgReader.Mime.Header.MessageHeader"/> object</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.MessageHeader.ParseHeader(System.String,System.String)">
            <summary>
            Parses a single header and sets member variables according to it.
            </summary>
            <param name="headerName">The name of the header</param>
            <param name="headerValue">The value of the header in unfolded state (only one line)</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="headerName"/> or <paramref name="headerValue"/> is <see langword="null"/></exception>
        </member>
        <member name="T:MsgReader.Mime.Header.Received">
            <summary>
            Class that hold information about one "Received:" header line.<br/>
            <br/>
            Visit these RFCs for more information:<br/>
            <see href="http://tools.ietf.org/html/rfc5321#section-4.4">RFC 5321 section 4.4</see><br/>
            <see href="http://tools.ietf.org/html/rfc4021#section-3.6.7">RFC 4021 section 3.6.7</see><br/>
            <see href="http://tools.ietf.org/html/rfc2822#section-3.6.7">RFC 2822 section 3.6.7</see><br/>
            <see href="http://tools.ietf.org/html/rfc2821#section-4.4">RFC 2821 section 4.4</see><br/>
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.Received.Date">
            <summary>
            The date of this received line.
            Is <see cref="F:System.DateTime.MinValue"/> if not present in the received header line.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.Received.Names">
            <summary>
            A dictionary that contains the names and values of the
            received header line.<br/>
            If the received header is invalid and contained one name
            multiple times, the first one is used and the rest is ignored.
            </summary>
            <example>
            If the header lines looks like:
            <code>
            from sending.com (localMachine [127.0.0.1]) by test.net (Postfix)
            </code>
            then the dictionary will contain two keys: "from" and "by" with the values
            "sending.com (localMachine [127.0.0.1])" and "test.net (Postfix)".
            </example>
        </member>
        <member name="P:MsgReader.Mime.Header.Received.Raw">
            <summary>
            The raw input string that was parsed into this class.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Header.Received.#ctor(System.String)">
            <summary>
            Parses a Received header value.
            </summary>
            <param name="headerValue">The value for the header to be parsed</param>
            <exception cref="T:System.ArgumentNullException"><exception cref="T:System.ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.Received.ParseDictionary(System.String)">
            <summary>
            Parses the Received header name-value-list into a dictionary.
            </summary>
            <param name="headerValue">The full header value for the Received header</param>
            <returns>A dictionary where the name-value-list has been parsed into</returns>
        </member>
        <member name="T:MsgReader.Mime.Header.RfcMailAddress">
            <summary>
            This class is used for RFC compliant email addresses.<br/>
            <br/>
            The class cannot be instantiated from outside the library.
            </summary>
            <remarks>
            The <seealso cref="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress"/> does not cover all the possible formats 
            for <a href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</a> compliant email addresses.
            This class is used as an address wrapper to account for that deficiency.
            </remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.RfcMailAddress.Address">
            <summary>
             The email address of this <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/><br/>
             It is possibly string.Empty since RFC mail addresses does not require an email address specified.
            </summary>
            <example>
             Example header with email address:<br/>
             To: <c>Test test@mail.com</c><br/>
             Address will be <c>test@mail.com</c><br/>
            </example>
            <example>
             Example header without email address:<br/>
             To: <c>Test</c><br/>
             Address will be <see cref="F:System.String.Empty"/>.
            </example>
        </member>
        <member name="P:MsgReader.Mime.Header.RfcMailAddress.DisplayName">
            <summary>
             The display name of this <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/><br/>
             It is possibly <see cref="F:System.String.Empty"/> since RFC mail addresses does not require a display name to be specified.
            </summary>
            <example>
             Example header with display name:<br/>
             To: <c>Test test@mail.com</c><br/>
             DisplayName will be <c>Test</c>
            </example>
            <example>
             Example header without display name:<br/>
             To: <c>test@test.com</c><br/>
             DisplayName will be <see cref="F:System.String.Empty"/>
            </example>
        </member>
        <member name="P:MsgReader.Mime.Header.RfcMailAddress.Raw">
            <summary>
            This is the Raw string used to describe the <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/>.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress">
            <summary>
            The <see cref="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress"/> associated with the <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/>. 
            </summary>
            <remarks>
            The value of this property can be <see lanword="null"/> in instances where the <see cref="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress"/> cannot represent the address properly.<br/>
            Use <see cref="P:MsgReader.Mime.Header.RfcMailAddress.HasValidMailAddress"/> property to see if this property is valid.
            </remarks>
        </member>
        <member name="P:MsgReader.Mime.Header.RfcMailAddress.HasValidMailAddress">
            <summary>
            Specifies if the object contains a valid <see cref="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress"/> reference.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Header.RfcMailAddress.#ctor(System.Net.Mail.MailAddress,System.String)">
            <summary>
            Constructs an <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/> object from a <see cref="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress"/> object.<br/>
            This constructor is used when we were able to construct a <see cref="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress"/> from a string.
            </summary>
            <param name="mailAddress">The address that <paramref name="raw"/> was parsed into</param>
            <param name="raw">The raw unparsed input which was parsed into the <paramref name="mailAddress"/></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="mailAddress"/> or <paramref name="raw"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.RfcMailAddress.#ctor(System.String)">
            <summary>
            When we were unable to parse a string into a <see cref="P:MsgReader.Mime.Header.RfcMailAddress.MailAddress"/>, this constructor can be
            used. The Raw string is then used as the <see cref="P:MsgReader.Mime.Header.RfcMailAddress.DisplayName"/>.
            </summary>
            <param name="raw">The raw unparsed input which could not be parsed</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="raw"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Header.RfcMailAddress.ToString">
            <summary>
            A string representation of the <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/> object
            </summary>
            <returns>Returns the string representation for the object</returns>
        </member>
        <member name="M:MsgReader.Mime.Header.RfcMailAddress.ParseMailAddress(System.String)">
            <summary>
            Parses an email address from a MIME header<br/>
            <br/>
            Examples of input:
            <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;</c><br/>
            <c>"Eksperten mailrobot" &lt;noreply@mail.eksperten.dk&gt;</c><br/>
            <c>&lt;noreply@mail.eksperten.dk&gt;</c><br/>
            <c>noreply@mail.eksperten.dk</c><br/>
            <br/>
            It might also contain encoded text, which will then be decoded.
            </summary>
            <param name="input">The value to parse out and email and/or a username</param>
            <returns>A <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
            <remarks>
            <see href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</see> for more details on email syntax.<br/>
            <see cref="M:MsgReader.Mime.Decode.EncodedWord.Decode(System.String)">For more information about encoded text</see>.
            </remarks>
        </member>
        <member name="M:MsgReader.Mime.Header.RfcMailAddress.ParseMailAddresses(System.String)">
            <summary>
            Parses input of the form<br/>
            <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;, ...</c><br/>
            to a list of RFCMailAddresses
            </summary>
            <param name="input">The input that is a comma-separated list of EmailAddresses to parse</param>
            <returns>A List of <seealso cref="T:MsgReader.Mime.Header.RfcMailAddress"/> objects extracted from the <paramref name="input"/> parameter.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
        </member>
        <member name="T:MsgReader.Mime.Message">
            <summary>
            This is the root of the email tree structure.<br/>
            <see cref="T:MsgReader.Mime.MessagePart"/> for a description about the structure.<br/>
            <br/>
            A Message (this class) contains the headers of an email message such as:
            <code>
             - To
             - From
             - Subject
             - Content-Type
             - Message-ID
            </code>
            which are located in the <see cref="P:MsgReader.Mime.Message.Headers"/> property.<br/>
            <br/>
            Use the <see cref="P:MsgReader.Mime.Message.MessagePart"/> property to find the actual content of the email message.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Message.Id">
            <summary>
            Returns the ID of the message when this is available in the <see cref="P:MsgReader.Mime.Message.Headers"/>
            (as specified in [RFC2822]). Null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Message.Headers">
            <summary>
            Headers of the Message.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Message.MessagePart">
            <summary>
            This is the body of the email Message.<br/>
            <br/>
            If the body was parsed for this Message, this property will never be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Message.HtmlBody">
            <summary>
            This will return the first <see cref="P:MsgReader.Mime.Message.MessagePart"/> where the <see cref="P:System.Net.Mime.ContentType.MediaType"/>
            is set to "html/text". This will return <see langword="null"/> when there is no "html/text" 
            <see cref="P:MsgReader.Mime.Message.MessagePart"/> found.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Message.TextBody">
            <summary>
            This will return the first <see cref="P:MsgReader.Mime.Message.MessagePart"/> where the <see cref="P:System.Net.Mime.ContentType.MediaType"/>
            is set to "text/plain". This will be <see langword="null"/> when there is no "text/plain" 
            <see cref="P:MsgReader.Mime.Message.MessagePart"/> found.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Message.Attachments">
            <summary>
            This will return all the <see cref="P:MsgReader.Mime.Message.MessagePart">message parts</see> that are flagged as 
            <see cref="P:MsgReader.Mime.MessagePart.IsAttachment"/>.
            This will be <see langword="null"/> when there are no <see cref="P:MsgReader.Mime.Message.MessagePart">message parts</see> 
            that are flagged as <see cref="P:MsgReader.Mime.MessagePart.IsAttachment"/>.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.Message.RawMessage">
            <summary>
            The raw content from which this message has been constructed.<br/>
            These bytes can be persisted and later used to recreate the Message.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Message.#ctor(System.Byte[])">
            <summary>
            Convenience constructor for <see cref="M:MsgReader.Mime.Message.#ctor(System.Byte[],System.Boolean)"/>.<br/>
            <br/>
            Creates a message from a byte array. The full message including its body is parsed.
            </summary>
            <param name="rawMessageContent">The byte array which is the message contents to parse</param>
        </member>
        <member name="M:MsgReader.Mime.Message.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Constructs a message from a byte array.<br/>
            <br/>
            The headers are always parsed, but if <paramref name="parseBody"/> is <see langword="false"/>, the body is not parsed.
            </summary>
            <param name="rawMessageContent">The byte array which is the message contents to parse</param>
            <param name="parseBody">
            <see langword="true"/> if the body should be parsed,
            <see langword="false"/> if only headers should be parsed out of the <paramref name="rawMessageContent"/> byte array
            </param>
        </member>
        <member name="M:MsgReader.Mime.Message.GetEmailAddresses(System.Collections.Generic.IEnumerable{MsgReader.Mime.Header.RfcMailAddress},System.Boolean,System.Boolean)">
            <summary>
            Returns the list of <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/> as a normal or html string
            </summary>
            <param name="rfcMailAddresses">A list with one or more <see cref="T:MsgReader.Mime.Header.RfcMailAddress"/> objects</param>
            <param name="convertToHref">When true the E-mail addresses are converted to hyperlinks</param>
            <param name="html">Set this to true when the E-mail body format is html</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Mime.Message.Save(System.IO.FileInfo)">
            <summary>
            Save this <see cref="T:MsgReader.Mime.Message"/> to a file.<br/>
            <br/>
            Can be loaded at a later time using the <see cref="M:MsgReader.Mime.Message.Load(System.IO.FileInfo)"/> method.
            </summary>
            <param name="file">The File location to save the <see cref="T:MsgReader.Mime.Message"/> to. Existent files will be overwritten.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to using a <see cref="T:System.IO.FileStream"/> might be thrown as well</exception>
        </member>
        <member name="M:MsgReader.Mime.Message.Save(System.IO.Stream)">
            <summary>
            Save this <see cref="T:MsgReader.Mime.Message"/> to a stream.<br/>
            </summary>
            <param name="messageStream">The stream to write to</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/> might be thrown as well</exception>
        </member>
        <member name="M:MsgReader.Mime.Message.Load(System.IO.FileInfo)">
            <summary>
            Loads a <see cref="T:MsgReader.Mime.Message"/> from a file containing a raw email.
            </summary>
            <param name="file">The File location to load the <see cref="T:MsgReader.Mime.Message"/> from. The file must exist.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
            <exception cref="T:System.IO.FileNotFoundException">If <paramref name="file"/> does not exist</exception>
            <exception>Other exceptions relevant to a <see cref="T:System.IO.FileStream"/> might be thrown as well</exception>
            <returns>A <see cref="T:MsgReader.Mime.Message"/> with the content loaded from the <paramref name="file"/></returns>
        </member>
        <member name="M:MsgReader.Mime.Message.Load(System.IO.Stream)">
            <summary>
            Loads a <see cref="T:MsgReader.Mime.Message"/> from a <see cref="T:System.IO.Stream"/> containing a raw email.
            </summary>
            <param name="messageStream">The <see cref="T:System.IO.Stream"/> from which to load the raw <see cref="T:MsgReader.Mime.Message"/></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> might be thrown as well</exception>
            <returns>A <see cref="T:MsgReader.Mime.Message"/> with the content loaded from the <paramref name="messageStream"/></returns>
        </member>
        <member name="T:MsgReader.Mime.MessagePart">
            <summary>
            A MessagePart is a part of an email message used to describe the whole email parse tree.<br/>
            <br/>
            <b>Email messages are tree structures</b>:<br/>
            Email messages may contain large tree structures, and the MessagePart are the nodes of the this structure.<br/>
            A MessagePart may either be a leaf in the structure or a internal node with links to other MessageParts.<br/>
            The root of the message tree is the <see cref="T:MsgReader.Mime.Message"/> class.<br/>
            <br/>
            <b>Leafs</b>:<br/>
            If a MessagePart is a leaf, the part is not a <see cref="P:MsgReader.Mime.MessagePart.IsMultiPart">MultiPart</see> message.<br/>
            Leafs are where the contents of an email are placed.<br/>
            This includes, but is not limited to: attachments, text or images referenced from HTML.<br/>
            The content of an attachment can be fetched by using the <see cref="P:MsgReader.Mime.MessagePart.Body"/> property.<br/>
            If you want to have the text version of a MessagePart, use the <see cref="M:MsgReader.Mime.MessagePart.GetBodyAsText"/> method which will<br/>
            convert the <see cref="P:MsgReader.Mime.MessagePart.Body"/> into a string using the encoding the message was sent with.<br/>
            <br/>
            <b>Internal nodes</b>:<br/>
            If a MessagePart is an internal node in the email tree structure, then the part is a <see cref="P:MsgReader.Mime.MessagePart.IsMultiPart">MultiPart</see> message.<br/>
            The <see cref="P:MsgReader.Mime.MessagePart.MessageParts"/> property will then contain links to the parts it contain.<br/>
            The <see cref="P:MsgReader.Mime.MessagePart.Body"/> property of the MessagePart will not be set.<br/>
            <br/>
            See the example for a parsing example.<br/>
            This class cannot be instantiated from outside the library.
            </summary>
            <example>
            This example illustrates how the message parse tree looks like given a specific message<br/>
            <br/>
            The message source in this example is:<br/>
            <code>
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="frontier"
            
            This is a message with multiple parts in MIME format.
            --frontier
            Content-Type: text/plain
            
            This is the body of the message.
            --frontier
            Content-Type: application/octet-stream
            Content-Transfer-Encoding: base64
            
            PGh0bWw+CiAgPGHLYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
            Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
            --frontier--
            </code>
            The tree will look as follows, where the content-type media type of the message is listed<br/>
            <code>
            - Message root
              - multipart/mixed MessagePart
                - text/plain MessagePart
                - application/octet-stream MessagePart
            </code>
            It is possible to have more complex message trees like the following:<br/>
            <code>
            - Message root
              - multipart/mixed MessagePart
                - text/plain MessagePart
                - text/plain MessagePart
                - multipart/parallel
                  - audio/basic
                  - image/tiff
                - text/enriched
                - message/rfc822
            </code>
            But it is also possible to have very simple message trees like:<br/>
            <code>
            - Message root
              - text/plain
            </code>
            </example>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.ContentType">
            <summary>
            The Content-Type header field.<br/>
            <br/>
            If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
            defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
            <br/>
            If set, the default is overridden.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.ContentDescription">
            <summary>
            A human readable description of the body<br/>
            <br/>
            <see langword="null"/> if no Content-Description header was present in the message.<br/>
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.ContentTransferEncoding">
            <summary>
            This header describes the Content encoding during transfer.<br/>
            <br/>
            If no Content-Transfer-Encoding header was present in the message, it is set
            to the default of <see cref="F:MsgReader.Mime.Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
            </summary>
            <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.ContentId">
            <summary>
            ID of the content part (like an attached image). Used with MultiPart messages.<br/>
            <br/>
            <see langword="null"/> if no Content-ID header field was present in the message.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.ContentDisposition">
            <summary>
            Used to describe if a <see cref="T:MsgReader.Mime.MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
            Also contains information about filename if such was sent.<br/>
            <br/>
            <see langword="null"/> if no Content-Disposition header field was present in the message
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.BodyEncoding">
            <summary>
            This is the encoding used to parse the message body if the <see cref="T:MsgReader.Mime.MessagePart"/><br/>
            is not a MultiPart message. It is derived from the <see cref="P:MsgReader.Mime.MessagePart.ContentType"/> character set property.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.Body">
            <summary>
            This is the parsed body of this <see cref="T:MsgReader.Mime.MessagePart"/>.<br/>
            It is parsed in that way, if the body was ContentTransferEncoded, it has been decoded to the
            correct bytes.<br/>
            <br/>
            It will be <see langword="null"/> if this <see cref="T:MsgReader.Mime.MessagePart"/> is a MultiPart message.<br/>
            Use <see cref="P:MsgReader.Mime.MessagePart.IsMultiPart"/> to check if this <see cref="T:MsgReader.Mime.MessagePart"/> is a MultiPart message.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.IsTextBody">
            <summary>
            This will be set to true if this is the first found Text <see cref="T:MsgReader.Mime.MessagePart"/>. This way it
            indicates that this is the text variant of the E-mail body.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.IsHtmlBody">
            <summary>
            This will be set to true if this is the first found Html <see cref="T:MsgReader.Mime.MessagePart"/>. This way it
            indicates that this is the html variant of the E-mail body.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.IsMultiPart">
            <summary>
            Describes if this <see cref="T:MsgReader.Mime.MessagePart"/> is a MultiPart message<br/>
            <br/>
            The <see cref="T:MsgReader.Mime.MessagePart"/> is a MultiPart message if the <see cref="P:MsgReader.Mime.MessagePart.ContentType"/> media type property starts with "multipart/"
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.IsText">
            <summary>
            A <see cref="T:MsgReader.Mime.MessagePart"/> is considered to be holding text in it's body if the MediaType
            starts either "text/" or is equal to "message/rfc822"
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.IsInline">
            <summary>
            A <see cref="T:MsgReader.Mime.MessagePart"/> is considered to be an inline attachment, if<br/>
            it is has the <see cref="P:MsgReader.Mime.MessagePart.ContentDisposition"/> Inline set to <c>True</c>
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.IsAttachment">
            <summary>
            A <see cref="T:MsgReader.Mime.MessagePart"/> is considered to be an attachment, if<br/>
            - it is not holding <see cref="P:MsgReader.Mime.MessagePart.IsText">text</see> and is not a <see cref="P:MsgReader.Mime.MessagePart.IsMultiPart">MultiPart</see> message<br/>
            or<br/>
            - it has a Content-Disposition header that says it is an attachment
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.FileName">
            <summary>
            This is a convenient-property for figuring out a FileName for this <see cref="T:MsgReader.Mime.MessagePart"/>.<br/>
            If the <see cref="T:MsgReader.Mime.MessagePart"/> is a MultiPart message, then it makes no sense to try to find a FileName.<br/>
            <br/>
            The FileName can be specified in the <see cref="P:MsgReader.Mime.MessagePart.ContentDisposition"/>, <see cref="P:MsgReader.Mime.MessagePart.ContentType"/> or 
            <see cref="P:MsgReader.Mime.MessagePart.ContentDescription"/> properties.<br/>
            If none of these places two places tells about the FileName, a default is returned.
            </summary>
        </member>
        <member name="P:MsgReader.Mime.MessagePart.MessageParts">
            <summary>
            If this <see cref="T:MsgReader.Mime.MessagePart"/> is a MultiPart message, then this property
            has a list of each of the Multiple parts that the message consists of.<br/>
            <br/>
            It is <see langword="null"/> if it is not a MultiPart message.<br/>
            Use <see cref="P:MsgReader.Mime.MessagePart.IsMultiPart"/> to check if this <see cref="T:MsgReader.Mime.MessagePart"/> is a MultiPart message.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.#ctor(System.Byte[],MsgReader.Mime.Header.MessageHeader)">
            <summary>
            Used to construct the topmost message part
            </summary>
            <param name="rawBody">The body that needs to be parsed</param>
            <param name="headers">The headers that should be used from the message</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rawBody"/> or <paramref name="headers"/> 
            is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.ParseBodyEncoding(System.String)">
            <summary>
            Parses a character set into an encoding
            </summary>
            <param name="characterSet">The character set that needs to be parsed. <see langword="null"/> is allowed.</param>
            <returns>The encoding specified by the <paramref name="characterSet"/> parameter, or ASCII if the character set 
            was <see langword="null"/> or empty</returns>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.FindFileName(System.Byte[],MsgReader.Mime.Header.MessageHeader,System.String)">
            <summary>
            Figures out the filename of this message part.
            <see cref="P:MsgReader.Mime.MessagePart.FileName"/> property.
            </summary>
            <param name="rawBody">The body that needs to be parsed</param>
            <param name="headers">The headers that should be used from the message</param>
            <param name="defaultName">The default filename to use, if no other could be found</param>
            <returns>The filename found, or the default one if not such filename could be found in the headers</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="headers"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.ParseBody(System.Byte[])">
            <summary>
            Parses a byte array as a body of an email message.
            </summary>
            <param name="rawBody">The byte array to parse as body of an email message. This array may not contain headers.</param>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.ParseMultiPartBody(System.Byte[])">
            <summary>
            Parses the <paramref name="rawBody"/> byte array as a MultiPart message.<br/>
            It is not valid to call this method if <see cref="P:MsgReader.Mime.MessagePart.IsMultiPart"/> returned <see langword="false"/>.<br/>
            Fills the <see cref="P:MsgReader.Mime.MessagePart.MessageParts"/> property of this <see cref="T:MsgReader.Mime.MessagePart"/>.
            </summary>
            <param name="rawBody">The byte array which is to be parsed as a MultiPart message</param>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.GetMessagePart(System.Byte[])">
            <summary>
            Given a byte array describing a full message.<br/>
            Parses the byte array into a <see cref="T:MsgReader.Mime.MessagePart"/>.
            </summary>
            <param name="rawMessageContent">The byte array containing both headers and body of a message</param>
            <returns>A <see cref="T:MsgReader.Mime.MessagePart"/> which was described by the <paramref name="rawMessageContent"/> byte array</returns>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.GetMultiPartParts(System.Byte[],System.String)">
            <summary>
            Gets a list of byte arrays where each entry in the list is a full message of a message part
            </summary>
            <param name="rawBody">The raw byte array describing the body of a message which is a MultiPart message</param>
            <param name="multiPartBoundary">The delimiter that splits the different MultiPart bodies from each other</param>
            <returns>A list of byte arrays, each a full message of a <see cref="T:MsgReader.Mime.MessagePart"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rawBody"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.FindPositionOfNextMultiPartBoundary(System.IO.Stream,System.String,System.Boolean@)">
            <summary>
            Method that is able to find a specific MultiPart boundary in a Stream.<br/>
            The Stream passed should not be used for anything else then for looking for MultiPart boundaries
            <param name="stream">The stream to find the next MultiPart boundary in. Do not use it for anything else then with this method.</param>
            <param name="multiPartBoundary">The MultiPart boundary to look for. This should be found in the <see cref="P:MsgReader.Mime.MessagePart.ContentType"/> header</param>
            <param name="lastMultipartBoundaryFound">Is set to <see langword="true"/> if the next MultiPart boundary was indicated to be the last one, by having -- appended to it. Otherwise set to <see langword="false"/></param>
            </summary>
            <returns>The position of the first character of the line that contained MultiPartBoundary or -1 if no (more) MultiPart boundaries was found</returns>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.DecodeBody(System.Byte[],MsgReader.Mime.Header.ContentTransferEncoding)">
            <summary>
            Decodes a byte array into another byte array based upon the Content Transfer encoding
            </summary>
            <param name="messageBody">The byte array to decode into another byte array</param>
            <param name="contentTransferEncoding">The <see cref="P:MsgReader.Mime.MessagePart.ContentTransferEncoding"/> of the byte array</param>
            <returns>A byte array which comes from the <paramref name="contentTransferEncoding"/> being used on the <paramref name="messageBody"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageBody"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="contentTransferEncoding"/> is unsupported</exception>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.GetBodyAsText">
            <summary>
            Gets this MessagePart's <see cref="P:MsgReader.Mime.MessagePart.Body"/> as text.<br/>
            This is simply the <see cref="P:MsgReader.Mime.MessagePart.BodyEncoding"/> being used on the raw bytes of the <see cref="P:MsgReader.Mime.MessagePart.Body"/> property.<br/>
            This method is only valid to call if it is not a MultiPart message and therefore contains a body.<br/>
            </summary>
            <returns>The <see cref="P:MsgReader.Mime.MessagePart.Body"/> property as a string</returns>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.Save(System.IO.FileInfo)">
            <summary>
            Save this <see cref="T:MsgReader.Mime.MessagePart"/>'s contents to a file.<br/>
            There are no methods to reload the file.
            </summary>
            <param name="file">The File location to save the <see cref="T:MsgReader.Mime.MessagePart"/> to. Existent files will be overwritten.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to using a <see cref="T:System.IO.FileStream"/> might be thrown as well</exception>
        </member>
        <member name="M:MsgReader.Mime.MessagePart.Save(System.IO.Stream)">
            <summary>
            Save this <see cref="T:MsgReader.Mime.MessagePart"/>'s contents to a stream.<br/>
            </summary>
            <param name="messageStream">The stream to write to</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
            <exception>Other exceptions relevant to <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/> might be thrown as well</exception>
        </member>
        <member name="T:MsgReader.Mime.Traverse.AnswerMessageTraverser`1">
            <summary>
            This is an abstract class which handles traversing of a <see cref="T:MsgReader.Mime.Message"/> tree structure.<br/>
            It runs through the message structure using a depth-first traversal.
            </summary>
            <typeparam name="TAnswer">The answer you want from traversing the message tree structure</typeparam>
        </member>
        <member name="M:MsgReader.Mime.Traverse.AnswerMessageTraverser`1.VisitMessage(MsgReader.Mime.Message)">
            <summary>
            Call this when you want an answer for a full message.
            </summary>
            <param name="message">The message you want to traverse</param>
            <returns>An answer</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="message"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Traverse.AnswerMessageTraverser`1.VisitMessagePart(MsgReader.Mime.MessagePart)">
            <summary>
            Call this method when you want to find an answer for a <see cref="T:MsgReader.Mime.MessagePart"/>
            </summary>
            <param name="messagePart">The <see cref="T:MsgReader.Mime.MessagePart"/> part you want an answer from.</param>
            <returns>An answer</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="messagePart"/> is <see langword="null"/></exception>
        </member>
        <member name="M:MsgReader.Mime.Traverse.AnswerMessageTraverser`1.CaseLeaf(MsgReader.Mime.MessagePart)">
            <summary>
            For a concrete implementation an answer must be returned for a leaf <see cref="T:MsgReader.Mime.MessagePart"/>, which are
            MessageParts that are not <see cref="P:MsgReader.Mime.MessagePart.IsMultiPart">MultiParts.</see>
            </summary>
            <param name="messagePart">The message part which is a leaf and thereby not a MultiPart</param>
            <returns>An answer</returns>
        </member>
        <member name="M:MsgReader.Mime.Traverse.AnswerMessageTraverser`1.MergeLeafAnswers(System.Collections.Generic.List{`0})">
            <summary>
            For a concrete implementation, when a MultiPart <see cref="T:MsgReader.Mime.MessagePart"/> has fetched it's answers from it's children, these
            answers needs to be merged. This is the responsibility of this method.
            </summary>
            <param name="leafAnswers">The answer that the leafs gave</param>
            <returns>A merged answer</returns>
        </member>
        <member name="T:MsgReader.Mime.Traverse.AttachmentFinder">
            <summary>
            Finds all <see cref="T:MsgReader.Mime.MessagePart"/>s which are considered to be attachments
            </summary>
        </member>
        <member name="T:MsgReader.Mime.Traverse.FindBodyMessagePartWithMediaType">
            <summary>
             Finds the first <see cref="T:MsgReader.Mime.MessagePart"/> which have a given MediaType in a depth first traversal.
             This <see cref="T:MsgReader.Mime.MessagePart"/> will be flagged as the <see cref="P:MsgReader.Mime.MessagePart.IsHtmlBody"/> or
             <see cref="P:MsgReader.Mime.MessagePart.IsTextBody"/> according to the searched MediaType ("text/html" or "text/plain")
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Traverse.FindBodyMessagePartWithMediaType.VisitMessage(MsgReader.Mime.Message,System.String)">
            <summary>
            Finds the first <see cref="T:MsgReader.Mime.MessagePart"/> with the given MediaType
            </summary>
            <param name="message">The <see cref="T:MsgReader.Mime.Message"/> to start looking in</param>
            <param name="question">The MediaType to look for. Case is ignored.</param>
            <returns>A <see cref="T:MsgReader.Mime.MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="T:MsgReader.Mime.MessagePart"/> was found</returns>
        </member>
        <member name="M:MsgReader.Mime.Traverse.FindBodyMessagePartWithMediaType.VisitMessagePart(MsgReader.Mime.MessagePart,System.String)">
            <summary>
            Finds the first <see cref="T:MsgReader.Mime.MessagePart"/> with the given MediaType
            </summary>
            <param name="messagePart">The <see cref="T:MsgReader.Mime.MessagePart"/> to start looking in</param>
            <param name="question">The MediaType to look for. Case is ignored.</param>
            <returns>A <see cref="T:MsgReader.Mime.MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="T:MsgReader.Mime.MessagePart"/> was found</returns>
        </member>
        <member name="T:MsgReader.Mime.Traverse.IAnswerMessageTraverser`1">
            <summary>
            This interface describes a MessageTraverser which is able to traverse a Message hierarchy structure
            and deliver some answer.
            </summary>
            <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
        </member>
        <member name="M:MsgReader.Mime.Traverse.IAnswerMessageTraverser`1.VisitMessage(MsgReader.Mime.Message)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:MsgReader.Mime.Message"/>.
            </summary>
            <param name="message">The <see cref="T:MsgReader.Mime.Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <returns>An answer</returns>
        </member>
        <member name="M:MsgReader.Mime.Traverse.IAnswerMessageTraverser`1.VisitMessagePart(MsgReader.Mime.MessagePart)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:MsgReader.Mime.MessagePart"/>.
            </summary>
            <param name="messagePart">The <see cref="T:MsgReader.Mime.MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <returns>An answer</returns>
        </member>
        <member name="T:MsgReader.Mime.Traverse.IQuestionAnswerMessageTraverser`2">
            <summary>
            This interface describes a MessageTraverser which is able to traverse a Message structure
            and deliver some answer given some question.
            </summary>
            <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
            <typeparam name="TQuestion">This is the type of the question you want to have answered.</typeparam>
        </member>
        <member name="M:MsgReader.Mime.Traverse.IQuestionAnswerMessageTraverser`2.VisitMessage(MsgReader.Mime.Message,`0)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:MsgReader.Mime.Message"/>.
            </summary>
            <param name="message">The <see cref="T:MsgReader.Mime.Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <param name="question">The question</param>
            <returns>An answer</returns>
        </member>
        <member name="M:MsgReader.Mime.Traverse.IQuestionAnswerMessageTraverser`2.VisitMessagePart(MsgReader.Mime.MessagePart,`0)">
            <summary>
            Call this when you want to apply this traverser on a <see cref="T:MsgReader.Mime.MessagePart"/>.
            </summary>
            <param name="messagePart">The <see cref="T:MsgReader.Mime.MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
            <param name="question">The question</param>
            <returns>An answer</returns>
        </member>
        <member name="T:MsgReader.Mime.Traverse.MultipleMessagePartFinder">
            <summary>
             An abstract class that implements the MergeLeafAnswers method.<br/>
             The method simply returns the union of all answers from the leaves.
            </summary>
        </member>
        <member name="M:MsgReader.Mime.Traverse.MultipleMessagePartFinder.MergeLeafAnswers(System.Collections.Generic.List{System.Collections.Generic.List{MsgReader.Mime.MessagePart}})">
            <summary>
            Adds all the <paramref name="leafAnswers"/> in one big answer
            </summary>
            <param name="leafAnswers">The answers to merge</param>
            <returns>A list with has all the elements in the <paramref name="leafAnswers"/> lists</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="leafAnswers"/> is <see langword="null"/></exception>
        </member>
        <member name="T:MsgReader.Outlook.AddressBookEntryId">
            <summary>
                An Address Book EntryID structure specifies several types of Address Book objects, including
                individual users, distribution lists, containers, and templates.
            </summary>
            <remarks>
                See https://msdn.microsoft.com/en-us/library/ee160588(v=exchg.80).aspx
            </remarks>
        </member>
        <member name="P:MsgReader.Outlook.AddressBookEntryId.Flags">
            <summary>
                Flags (4 bytes): This value MUST be set to 0x00000000. Bits in this field indicate under
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.AddressBookEntryId.ProviderUid">
            <summary>
                ProviderUID (16 bytes): The identifier for the provider that created the EntryID. This value is used to route
                EntryIDs to the correct provider and MUST be set to %xDC.A7.40.C8.C0.42.10.1A.B4.B9.08.00.2B.2F.E1.82.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.AddressBookEntryId.Version">
            <summary>
                Version (4 bytes): This value MUST be set to %x01.00.00.00.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.AddressBookEntryId.Type">
            <summary>
                Type (4 bytes): An integer representing the type of the object. It MUST be one of the values from the following
                table.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.AddressBookEntryId.X500Dn">
            <summary>
                The X500 DN of the Address Book object.
            </summary>
            <remarks>
                A distinguished name (DN), in Teletex form, of an object that is in an address book. An X500 DN can be more limited
                in the size and number of relative distinguished names (RDNs) than a full DN.
            </remarks>
        </member>
        <member name="T:MsgReader.Outlook.AppointmentRecurrenceType">
            <summary>
                The recurrence type of an appointment
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentRecurrenceType.None">
            <summary>
                There is no recurrence
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentRecurrenceType.Daily">
            <summary>
                The appointment is daily
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentRecurrenceType.Weekly">
            <summary>
                The appointment is weekly
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentRecurrenceType.Monthly">
            <summary>
                The appointment is monthly
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentRecurrenceType.Yearly">
            <summary>
                The appointment is yearly
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.AppointmentClientIntent">
            <summary>
                The intent of an appointment
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.Manager">
            <summary>
                The user is the owner of the Meeting object's
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.Delegate">
            <summary>
                The user is a delegate acting on a Meeting object in a delegation's Calendar folder. If this bit is set, the
                ciManager bit SHOULD NOT be set
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.DeletedWithNoResponse">
            <summary>
                The user deleted the Meeting object with no response sent to the organizer
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.DeletedExceptionWithNoResponse">
            <summary>
                The user deleted an exception to a recurring series with no response sent to the organizer
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.RespondedTentative">
            <summary>
                Appointment accepted as tentative
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.RespondedAccept">
            <summary>
                Appointment accepted
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.RespondedDecline">
            <summary>
                Appointment declined
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.ModifiedStartTime">
            <summary>
                The user modified the start time
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.ModifiedEndTime">
            <summary>
                The user modified the end time
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.ModifiedLocation">
            <summary>
                The user changed the location of the meeting
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.RespondedExceptionDecline">
            <summary>
                The user declined an exception to a recurring series
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.Canceled">
            <summary>
                The user declined an exception to a recurring series
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AppointmentClientIntent.ExceptionCanceled">
            <summary>
                The user canceled an exception to a recurring series
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.Storage">
            <summary>
            The base class for reading an Outlook MSG file
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Appointment">
            <summary>
                Class used to contain all the appointment information of a <see cref="T:MsgReader.Outlook.Storage.Message" />.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.Location">
            <summary>
                Returns the location for the appointment, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.Start">
            <summary>
                Returns the start time for the appointment, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.End">
            <summary>
                Returns the end time for the appointment, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.AllAttendees">
            <summary>
                Returns a string with all the attendees (To and CC), if you also want their E-mail addresses then
                get the <see cref="P:MsgReader.Outlook.Storage.Message.Recipients" /> from the message, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.ToAttendees">
            <summary>
                Returns a string with all the TO (mandatory) attendees. If you also want their E-mail addresses then
                get the <see cref="P:MsgReader.Outlook.Storage.Message.Recipients" /> from the <see cref="T:MsgReader.Outlook.Storage.Message" /> and filter this
                one on <see cref="F:MsgReader.Outlook.RecipientType.To" />. Null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.CcAttendees">
            <summary>
                Returns a string with all the CC (optional) attendees. If you also want their E-mail addresses then
                get the <see cref="P:MsgReader.Outlook.Storage.Message.Recipients" /> from the <see cref="T:MsgReader.Outlook.Storage.Message" /> and filter this
                one on <see cref="F:MsgReader.Outlook.RecipientType.Cc" />. Null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.NotAllowPropose">
            <summary>
                Returns A value of <c>true</c> for the PidLidAppointmentNotAllowPropose property ([MS-OXPROPS] section 2.17)
                indicates that attendees are not allowed to propose a new date and/or time for the meeting. A value of
                <c>false</c> or the absence of this property indicates that the attendees are allowed to propose a new date
                and/or time. This property is meaningful only on Meeting objects, Meeting Request objects, and Meeting
                Update objects. Null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.UnsendableRecipients">
            <summary>
                Returns a <see cref="P:MsgReader.Outlook.Storage.Appointment.UnsendableRecipients" /> object with all the unsendable attendees. Null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.RecurrenceType">
            <summary>
                Returns the recurrence type (daily, weekly, monthly or yearly) for the <see cref="T:MsgReader.Outlook.Storage.Appointment" />
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.RecurrenceTypeText">
            <summary>
                Returns the recurrence type (daily, weekly, monthly or yearly) for the <see cref="T:MsgReader.Outlook.Storage.Appointment" /> as a
                string,
                null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.RecurrencePattern">
            <summary>
                Returns the recurrence pattern for the <see cref="T:MsgReader.Outlook.Storage.Appointment" />, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.ClientIntent">
            <summary>
                The clients intention for the the <see cref="T:MsgReader.Outlook.Storage.Appointment" /> as a list,
                null when not available
                of <see cref="T:MsgReader.Outlook.AppointmentClientIntent" />
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Appointment.ClientIntentText">
            <summary>
                The <see cref="P:MsgReader.Outlook.Storage.Appointment.ClientIntent" /> for the the <see cref="T:MsgReader.Outlook.Storage.Appointment" /> as text
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Appointment.#ctor(MsgReader.Outlook.Storage)">
            <summary>
                Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Task" /> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Attachment">
            <summary>
            Class represents an attachment
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Attachment._data">
            <summary>
            contains the data of the attachment as an byte array
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.StorageName">
            <summary>
            The name of the <see cref="T:OpenMcdf.CFStorage"/> that contains this attachment
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.FileName">
            <summary>
            Returns the filename of the attachment
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.Data">
            <summary>
            Returns the data
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.ContentId">
            <summary>
            Returns the content id or null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.RenderingPosition">
            <summary>
            Returns the rendering position or -1 when unknown
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.IsInline">
            <summary>
            True when the attachment is inline
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.IsContactPhoto">
            <summary>
            True when the attachment is a contact photo. This can only be true
            when the <see cref="T:MsgReader.Outlook.Storage.Message"/> object is an 
            <see cref="T:MsgReader.Outlook.Storage.Contact"/> object.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.CreationTime">
            <summary>
            Returns the date and time when the attachment was created or null
            when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.LastModificationTime">
            <summary>
            Returns the date and time when the attachment was last modified or null
            when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.Hidden">
            <summary>
            Returns the MAPI Property Hidden, the value may only exist when it has been set True
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Attachment.OleAttachment">
            <summary>
            Returns <c>true</c> when the attachment is an OLE attachment
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Attachment.#ctor(MsgReader.Mime.MessagePart)">
            <summary>
            Creates an attachment object from a <see cref="T:MsgReader.Mime.MessagePart"/>
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Attachment.#ctor(MsgReader.Outlook.Storage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Attachment" /> class.
            </summary>
            <param name="message"> The message. </param>
            <param name="storageName">The name of the <see cref="T:OpenMcdf.CFStorage"/> that contains this attachment</param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Attachment.ResolveAttachment">
            <summary>
            Tries to resolve an attachment when the <see cref="F:MsgReader.Outlook.MapiTags.PR_ATTACH_METHOD"/> is of the type
            <see cref="F:MsgReader.Outlook.MapiTags.ATTACH_BY_REFERENCE"/>, <see cref="F:MsgReader.Outlook.MapiTags.ATTACH_BY_REF_RESOLVE"/> or
            <see cref="F:MsgReader.Outlook.MapiTags.ATTACH_BY_REF_ONLY"/>
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Attachment.SaveImageAsPng(System.Int32)">
            <summary>
            Tries to save an attachment as a png file with the user specified buffer
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Contact">
            <summary>
            Class used to contain all the contact information
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.DisplayName">
            <summary>
            Returns the full name (e.g. De heer Kees van Spelde), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Prefix">
            <summary>
            Returns the prefix of the name (e.g. De heer), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Initials">
            <summary>
            Returns the initials, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.SurName">
            <summary>
            Returns the sur name (e.g. Spelde), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.GivenName">
            <summary>
            Returns the given name (e.g. Kees), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Generation">
            <summary>
            Returns the generation (e.g. Jr.), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Function">
            <summary>
            Returns the function, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Department">
            <summary>
            Returns the department, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Company">
            <summary>
            Returns the name of the company, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.WorkAddress">
            <summary>
            Returns the named propery work (business) address (Outlook 2007 or higher), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessAddressStreet">
            <summary>
            Returns the street of the business address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessAddressCity">
            <summary>
            Returns the city of the business address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessAddressState">
            <summary>
            Returns the state of the business address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessAddressPostalCode">
            <summary>
            Returns the postal code of the business address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessAddressCountry">
            <summary>
            Returns the country of the business address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessTelephoneNumber">
            <summary>
            Returns the business telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessTelephoneNumber2">
            <summary>
            Returns the business second telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessFaxNumber">
            <summary>
            Returns the business fax number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BusinessHomePage">
            <summary>
            Returns the business home page, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeAddress">
            <summary>
            Returns the named propery home address (Outlook 2007 or higher)
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeAddressStreet">
            <summary>
            Returns the street of the home address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeAddressCity">
            <summary>
            Returns the city of the home address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeAddressState">
            <summary>
            Returns the state of the home address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeAddressPostalCode">
            <summary>
            Returns the postal code of the home address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeAddressCountry">
            <summary>
            Returns the country of the home address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeTelephoneNumber">
            <summary>
            Returns the home telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeTelephoneNumber2">
            <summary>
            Returns the home second telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.HomeFaxNumber">
            <summary>
            Returns the home fax number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.OtherAddress">
            <summary>
            Returns the named propery other address (Outlook 2007 or higher)
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.OtherAddressStreet">
            <summary>
            Returns the street of the other address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.OtherAddressCity">
            <summary>
            Returns the city of the other address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.OtherAddressState">
            <summary>
            Returns the state of the other address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.OtherAddressPostalCode">
            <summary>
            Returns the postal code of the other address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.OtherAddressCountry">
            <summary>
            Returns the country of the other address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.OtherTelephoneNumber">
            <summary>
            Returns the other telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.PrimaryTelephoneNumber">
            <summary>
            Returns the primary telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.PrimaryFaxNumber">
            <summary>
            Returns the primary fax number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.AssistantName">
            <summary>
            Returns the name of the assistant, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.AssistantTelephoneNumber">
            <summary>
            Returns the telephone number of the assistant, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.InstantMessagingAddress">
            <summary>
            Return the instant messaging address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.CompanyMainTelephoneNumber">
            <summary>
            Returns the company main telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.CellularTelephoneNumber">
            <summary>
            Returns the cellular telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.CarTelephoneNumber">
            <summary>
            Returns the car telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.RadioTelephoneNumber">
            <summary>
            Returns the radio telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.BeeperTelephoneNumber">
            <summary>
            Returns the beeper telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.CallbackTelephoneNumber">
            <summary>
            Returns the callback telephone number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.TelexNumber">
            <summary>
            Returns the telex number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.TextTelephone">
            <summary>
            Returns the text telephone (TTYTDD), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.ISDNNumber">
            <summary>
            Returns the ISDN number, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Email1EmailAddress">
            <summary>
            Returns the name property e-mail address 1 (Outlook 2007 or higher), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Email1DisplayName">
            <summary>
            Returns the name property e-mail displayname 1 (Outlook 2007 or higher), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Email2EmailAddress">
            <summary>
            Returns the name property e-mail address 2 (Outlook 2007 or higher), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Email2DisplayName">
            <summary>
            Returns the name property e-mail displayname 2 (Outlook 2007 or higher), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Email3EmailAddress">
            <summary>
            Returns the name property e-mail address 3 (Outlook 2007 or higher), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Email3DisplayName">
            <summary>
            Returns the name property e-mail displayname 3 (Outlook 2007 or higher), null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Birthday">
            <summary>
            Returns the birthday, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.WeddingAnniversary">
            <summary>
            Returns the wedding/anniversary, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.SpouseName">
            <summary>
            Returns the name of the spouse, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Profession">
            <summary>
            Returns the profession, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Contact.Html">
            <summary>
            Returns the homepage (html), null when not available
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Contact.#ctor(MsgReader.Outlook.Storage)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Contact" /> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Flag">
            <summary>
            Class used to contain all the flag (follow up) information of a <see cref="T:MsgReader.Outlook.Storage.Message"/>.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Flag.Request">
            <summary>
            Returns the flag request text
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Flag.Status">
            <summary>
            Returns the <see cref="T:MsgReader.Outlook.FlagStatus">Status</see> of the flag
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Flag.#ctor(MsgReader.Outlook.Storage)">
            <summary>
              Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Flag" /> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="T:MsgReader.Outlook.Storage.MapiTagMapping">
            <summary>
            Class that is used as a placeholder for the found mapped named mapi tags
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.MapiTagMapping.PropertyIdentifier">
            <summary>
            Contains the named property identifier
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.MapiTagMapping.EntryOrStringIdentifier">
            <summary>
            Contains the identifier that is found in the entry or string stream
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.Storage.MapiTagMapper">
            <summary>
            Class used to map known MAPI tags to the internal used values
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.MapiTagMapper.#ctor(MsgReader.Outlook.Storage)">
            <summary>
              Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.MapiTagMapper" /> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.MapiTagMapper.GetMapping(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a dictionary with all the property mappings
            </summary>
            <param name="propertyIdents">List with all the named property idents, e.g 8005, 8006, 801C, etc...</param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Message">
            <summary>
            Class represent a MSG object
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.StorageName">
            <summary>
            The name of the <see cref="T:OpenMcdf.CFStorage"/> stream that contains this message
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._type">
            <summary>
            Contains the <see cref="T:MsgReader.Outlook.MessageType"/> of this Message
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._fileName">
            <summary>
            contains the name of the <see cref="T:MsgReader.Outlook.Storage.Message"/> file
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._creationTime">
            <summary>
            Contains the date and time when the message was created or null
            when not available
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._lastModifierName">
            <summary>
            Contains the name of the last user (or creator) that has changed the Message object or
            null when not available
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._lastModificationTime">
            <summary>
            Contains the date and time when the message was created or null
            when not available
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._recipients">
            <summary>
            contains all the <see cref="T:MsgReader.Outlook.Storage.Recipient"/> objects
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._mailingListHelp">
            <summary>
            Contains an URL to the help page of a mailing list
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._mailingListSubscribe">
            <summary>
            Contains an URL to the subscribe page of a mailing list
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._mailingListUnsubscribe">
            <summary>
            Contains an URL to the unsubscribe page of a mailing list
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._sentOn">
            <summary>
            Contains the date/time in UTC format when the <see cref="T:MsgReader.Outlook.Storage.Message"/> object has been sent,
            null when not available
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._receivedOn">
            <summary>
            Contains the date/time in UTC format when the <see cref="T:MsgReader.Outlook.Storage.Message"/> object has been received,
            null when not available
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._importance">
            <summary>
            Contains the <see cref="T:MsgReader.Outlook.MessageImportance"/> of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object,
            null when not available
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._attachments">
            <summary>
            Contains all the <see cref="T:MsgReader.Outlook.Storage.Attachment"/> and <see cref="T:MsgReader.Outlook.Storage.Message"/> objects.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._subjectPrefix">
            <summary>
            Contains the subject prefix of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._subject">
            <summary>
            Contains the subject of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._subjectNormalized">
            <summary>
            Contains the normalized subject of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._bodyText">
            <summary>
            Contains the text body of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._bodyHtml">
            <summary>
            Contains the html body of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._bodyRtf">
            <summary>
            Contains the rtf body of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._internetCodepage">
            <summary>
            Contains the <see cref="T:System.Text.Encoding"/> that is used for the <see cref="P:MsgReader.Outlook.Storage.Message.BodyText"/> or <see cref="P:MsgReader.Outlook.Storage.Message.BodyHtml"/>. 
            It will contain null when the codepage could not be read from the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._messageCodepage">
            <summary>
            Contains the <see cref="T:System.Text.Encoding"/> that is used for the <see cref="P:MsgReader.Outlook.Storage.Message.BodyRtf"/>.
            It will contain null when the codepage could not be read from the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._messageLocalId">
            <summary>
            Contains the the Windows LCID of the end user who created this <see cref = "T:MsgReader.Outlook.Storage.Message" />
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._flag">
            <summary>
            Contains the <see cref="T:MsgReader.Outlook.Storage.Flag"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._task">
            <summary>
            Contains the <see cref="T:MsgReader.Outlook.Storage.Task"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._appointment">
            <summary>
            Contains the <see cref="T:MsgReader.Outlook.Storage.Appointment"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._contact">
            <summary>
            Contains the <see cref="T:MsgReader.Outlook.Storage.Contact"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._receivedBy">
            <summary>
            Contains the <see cref="T:MsgReader.Outlook.Storage.ReceivedBy"/> object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._conversationIndex">
            <summary>
            The conversation index
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._conversationTopic">
            <summary>
            The conversation topic
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._messageSize">
            <summary>
            The message size
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage.Message._transportMessageHeaders">
            <summary>
            The transport message headers
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Id">
            <summary>
            Returns the ID of the message when the MSG file has been sent across the internet 
            (as specified in [RFC2822]). Null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Type">
            <summary>
            Gives the <see cref="T:MsgReader.Outlook.MessageType">type</see> of this message object
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.FileName">
            <summary>
            Returns the filename of the message object. For message objects Outlook uses the subject. It strips
            invalid filename characters. When there is no filename the name from <see cref="P:MsgReader.Localization.LanguageConsts.NameLessFileName"/>
            will be used
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.CreationTime">
            <summary>
            Returns the date and time when the message was created or null
            when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.LastModifierName">
            <summary>
            Returns the name of the last user (or creator) that has changed the Message object or
            null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.LastModificationTime">
            <summary>
            Returns the date and time when the message was last modified or null
            when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.TransportMessageHeaders">
            <summary>
            Returns the raw Transport Message Headers
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Sender">
            <summary>
            Returns the sender of the Message
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SenderRepresenting">
            <summary>
            Returns the representing sender of the Message, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Recipients">
            <summary>
            Returns the list of recipients in the message object
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.MailingListHelp">
            <summary>
            Returns an URL to the help page of an mailing list when this message is part of a mailing
            or null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.MailingListSubscribe">
            <summary>
            Returns an URL to the subscribe page of an mailing list when this message is part of a mailing
            or null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.MailingListUnsubscribe">
            <summary>
            Returns an URL to the unsubscribe page of an mailing list when this message is part of a mailing
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SentOn">
            <summary>
            Returns the date/time in UTC format when the message object has been sent, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.ReceivedOn">
            <summary>
            PR_MESSAGE_DELIVERY_TIME  is the time that the message was delivered to the store and 
            PR_CLIENT_SUBMIT_TIME  is the time when the message was sent by the client (Outlook) to the server.
            Now in this case when the Outlook is offline, it refers to the local store. Therefore when an email is sent, 
            it gets submitted to the local store and PR_MESSAGE_DELIVERY_TIME  gets set the that time. Once the Outlook is 
            online at that point the message gets submitted by the client to the server and the PR_CLIENT_SUBMIT_TIME  gets stamped. 
            Null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Importance">
            <summary>
            Returns the <see cref="T:MsgReader.Outlook.MessageImportance"/> of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.ImportanceText">
            <summary>
            Returns the <see cref="T:MsgReader.Outlook.MessageImportance"/> of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object object as text
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Attachments">
            <summary>
            Returns a list with <see cref="T:MsgReader.Outlook.Storage.Attachment"/> and/or <see cref="T:MsgReader.Outlook.Storage.Message"/> 
            objects that are attachted to the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.RenderingPosition">
            <summary>
            Returns the rendering position of this <see cref="T:MsgReader.Outlook.Storage.Message"/> object when it was added to another
            <see cref="T:MsgReader.Outlook.Storage.Message"/> object and the body type was set to RTF
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SubjectPrefix">
            <summary>
                Returns or sets the subject prefix of the E-mail
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Subject">
            <summary>
            Returns the subject of the <see cref="T:MsgReader.Outlook.Storage.Message"/> object
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SubjectNormalized">
            <summary>
                Returns the normalized subject of the E-mail
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Headers">
            <summary>
            Returns the available E-mail headers. These are only filled when the message
            has been sent accross the internet. Returns null when there aren't any message headers
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Flag">
            <summary>
            Returns a <see cref="P:MsgReader.Outlook.Storage.Message.Flag"/> object when a flag has been set on the <see cref="T:MsgReader.Outlook.Storage.Message"/>.
            Returns null when not available.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Appointment">
            <summary>
            Returns an <see cref="P:MsgReader.Outlook.Storage.Message.Appointment"/> object when the <see cref="T:MsgReader.Outlook.MessageType"/> is a <see cref="F:MsgReader.Outlook.MessageType.Appointment"/>.
            Returns null when not available.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Task">
            <summary>
            Returns a <see cref="P:MsgReader.Outlook.Storage.Message.Task"/> object. This property is only available when: <br/>
            - The <see cref="P:MsgReader.Outlook.Storage.Message.Type"/> is an <see cref="F:MsgReader.Outlook.MessageType.Email"/> and the <see cref="P:MsgReader.Outlook.Storage.Message.Flag"/> object is not null<br/>
            - The <see cref="P:MsgReader.Outlook.Storage.Message.Type"/> is an <see cref="F:MsgReader.Outlook.MessageType.Task"/> or <see cref="F:MsgReader.Outlook.MessageType.TaskRequestAccept"/> <br/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Contact">
            <summary>
            Returns a <see cref="T:MsgReader.Outlook.Storage.Contact"/> object when the <see cref="T:MsgReader.Outlook.MessageType"/> is a <see cref="F:MsgReader.Outlook.MessageType.Contact"/>.
            Returns null when not available.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Categories">
            <summary>
            Returns the categories that are placed in the Outlook message.
            Only supported for outlook messages from Outlook 2007 or higher
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.BodyText">
            <summary>
            Returns the body of the Outlook message in plain text format.
            </summary>
            <value> The body of the Outlook message in plain text format. </value>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.BodyRtf">
            <summary>
            Returns the body of the Outlook message in RTF format.
            </summary>
            <value> The body of the Outlook message in RTF format. </value>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.BodyHtml">
            <summary>
            Returns the body of the Outlook message in HTML format.
            </summary>
            <value> The body of the Outlook message in HTML format. </value>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.InternetCodePage">
            <summary>
            Returns the <see cref="T:System.Text.Encoding"/> that is used for the <see cref="P:MsgReader.Outlook.Storage.Message.BodyText"/>
            or <see cref="P:MsgReader.Outlook.Storage.Message.BodyHtml"/>. It will return <see cref="P:MsgReader.Outlook.Storage.Message.MessageLocalId"/> when the 
            codepage could not be read from the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            <remarks>
            See the <see cref="P:MsgReader.Outlook.Storage.Message.MessageCodePage"/> property when dealing with the <see cref="P:MsgReader.Outlook.Storage.Message.BodyRtf"/>
            </remarks>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.MessageCodePage">
            <summary>
            Returns the <see cref="T:System.Text.Encoding"/> that is used for the <see cref="P:MsgReader.Outlook.Storage.Message.BodyRtf"/>.
            It will return the systems default encoding when the codepage could not be read from 
            the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            <remarks>
            See the <see cref="P:MsgReader.Outlook.Storage.Message.InternetCodePage"/> property when dealing with the <see cref="P:MsgReader.Outlook.Storage.Message.BodyRtf"/>
            </remarks>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.MessageLocalId">
            <summary>
            Returns the the <see cref="T:System.Globalization.RegionInfo"/> for the Windows LCID of the end user who created this
            <see cref="T:MsgReader.Outlook.Storage.Message"/> It will return <c>null</c> when the the Windows LCID could not be 
            read from the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SignatureIsValid">
            <summary>
            Returns true when the signature is valid when the <see cref="T:MsgReader.Outlook.MessageType"/> is a <see cref="F:MsgReader.Outlook.MessageType.EmailEncryptedAndMaybeSigned"/>.
            It will return null when the signature is invalid or the <see cref="T:MsgReader.Outlook.Storage.Message"/> has another <see cref="T:MsgReader.Outlook.MessageType"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SignedBy">
            <summary>
            Returns the name of the person who signed the <see cref="T:MsgReader.Outlook.Storage.Message"/> when the <see cref="T:MsgReader.Outlook.MessageType"/> is a 
            <see cref="F:MsgReader.Outlook.MessageType.EmailEncryptedAndMaybeSigned"/>. It will return null when the signature is invalid or the <see cref="T:MsgReader.Outlook.Storage.Message"/> 
            has another <see cref="T:MsgReader.Outlook.MessageType"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SignedOn">
            <summary>
            Returns the date and time when the <see cref="T:MsgReader.Outlook.Storage.Message"/> has been signed when the <see cref="T:MsgReader.Outlook.MessageType"/> is a 
            <see cref="F:MsgReader.Outlook.MessageType.EmailEncryptedAndMaybeSigned"/>. It will return null when the signature is invalid or the <see cref="T:MsgReader.Outlook.Storage.Message"/> 
            has another <see cref="T:MsgReader.Outlook.MessageType"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.SignedCertificate">
            <summary>
            Returns the certificate that has been used to sign the <see cref="T:MsgReader.Outlook.Storage.Message"/> when the <see cref="T:MsgReader.Outlook.MessageType"/> is a 
            <see cref="F:MsgReader.Outlook.MessageType.EmailEncryptedAndMaybeSigned"/>. It will return null when the signature is invalid or the <see cref="T:MsgReader.Outlook.Storage.Message"/> 
            has another <see cref="T:MsgReader.Outlook.MessageType"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.ReceivedBy">
            <summary>
            Returns information about who has received this message. This information is only
            set when a message has been received and when the message provider stamped this 
            information into this message. Null when not available.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.ConversationIndex">
            <summary>
            Returns the index of the conversation. When not available <c>null</c> is returned
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.ConversationTopic">
            <summary>
            Returns the topic of the conversation. When not available <c>null</c> is returned
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Message.Size">
            <summary>
            Returns the size of the message. When not available <c>null</c> is returned
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.#ctor(System.String,System.IO.FileAccess)">
            <summary>
              Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Message" /> class from a msg file.
            </summary>
            <param name="msgfile">The msg file to load</param>
            <param name="fileAccess">FileAcces mode, default is Read</param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Message" /> class from a <see cref="T:System.IO.Stream" /> containing an IStorage.
            </summary>
            <param name="storageStream"> The <see cref="T:System.IO.Stream" /> containing an IStorage. </param>
            <param name="fileAccess">FileAcces mode, default is Read</param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.#ctor(OpenMcdf.CFStorage,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Message" /> class on the specified <see cref="T:OpenMcdf.CFStorage"/>.
            </summary>
            <param name="storage"> The storage to create the <see cref="T:MsgReader.Outlook.Storage.Message" /> on. </param>
            <param name="renderingPosition"></param>
            <param name="storageName">The name of the <see cref="T:OpenMcdf.CFStorage"/> that contains this message</param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.GetHeaders">
            <summary>
            Try's to read the E-mail transport headers. They are only there when a msg file has been
            sent over the internet. When a message stays inside an Exchange server there are not any headers
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.LoadStorage(OpenMcdf.CFStorage)">
            <summary>
            Processes sub storages on the specified storage to capture attachment and recipient data.
            </summary>
            <param name="storage"> The storage to check for attachment and recipient data. </param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.ProcessSignedContent(System.Byte[])">
            <summary>
            Processes the signed content
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.LoadEncryptedAndPossibleSignedMessage(OpenMcdf.CFStorage)">
            <summary>
            Load's and parses a signed message. The signed message should be in an attachment called smime.p7m
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.LoadClearSignedMessage(OpenMcdf.CFStorage)">
            <summary>
            Load's and parses a signed message
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.LoadAttachmentStorage(OpenMcdf.CFStorage,System.String)">
            <summary>
            Loads the attachment data out of the specified storage.
            </summary>
            <param name="storage"> The attachment storage. </param>
            <param name="storageName">The name of the <see cref="T:OpenMcdf.CFStorage"/></param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.DeleteAttachment(System.Object)">
            <summary>
            Removes the given <paramref name="attachment"/> from the <see cref="T:MsgReader.Outlook.Storage.Message"/> object.
            </summary>
            <example>
                message.DeleteAttachment(message.Attachments[0]);
            </example>
            <param name="attachment"></param>
            <exception cref="T:MsgReader.Exceptions.MRCannotRemoveAttachment">Raised when it is not possible to remove the <see cref="T:MsgReader.Outlook.Storage.Attachment"/> or <see cref="T:MsgReader.Outlook.Storage.Message"/> from
            the <see cref="T:MsgReader.Outlook.Storage.Message"/></exception>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.Copy(OpenMcdf.CFStorage,OpenMcdf.CFStorage)">
            <summary>
            Copies the given <paramref name="source"/> to the given <paramref name="destination"/>
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.Save(System.String)">
            <summary>
            Saves this <see cref="T:MsgReader.Outlook.Storage.Message" /> to the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName"> Name of the file. </param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.Save(System.IO.Stream)">
            <summary>
            Saves this <see cref="T:MsgReader.Outlook.Storage.Message"/> to the specified <paramref name="stream"/>
            </summary>
            <param name="stream"> The stream to save to. </param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.SetEmailSenderAndRepresentingSender">
            <summary>
            Gets the <see cref="P:MsgReader.Outlook.Storage.Message.Sender"/> and <see cref="P:MsgReader.Outlook.Storage.Message.SenderRepresenting"/> from the <see cref="T:MsgReader.Outlook.Storage.Message"/>
            object and sets the <see cref="P:MsgReader.Outlook.Storage.Message.Sender"/> and <see cref="P:MsgReader.Outlook.Storage.Message.SenderRepresenting"/>
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.GetEmailSenderRfc822Format">
            <summary>
            Returns the E-mail sender address in RFC822 format, e.g. 
            "Pan, P (Peter)" &lt;Peter.Pan@neverland.com&gt;
            </summary>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.GetEmailSender(System.Boolean,System.Boolean)">
            <summary>
            Returns the E-mail sender address in a human readable format
            </summary>
            <param name="html">Set to true to return the E-mail address as an html string</param>
            <param name="convertToHref">Set to true to convert the E-mail addresses to a hyperlink. 
            Will be ignored when <paramref name="html"/> is set to false</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.GetEmailRecipients(MsgReader.Outlook.RecipientType)">
            <summary>
            Returns all the recipient for the given <paramref name="type"/>
            </summary>
            <param name="type">The <see cref="T:MsgReader.Outlook.RecipientType"/> to return</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.GetEmailRecipientsRfc822Format(MsgReader.Outlook.RecipientType)">
            <summary>
            Returns the E-mail recipients in RFC822 format, e.g. 
            "Pan, P (Peter)" &lt;Peter.Pan@neverland.com&gt;
            </summary>
            <param name="type">Selects the Recipient type to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.GetEmailRecipients(MsgReader.Outlook.RecipientType,System.Boolean,System.Boolean)">
            <summary>
            Returns the E-mail recipients in a human readable format
            </summary>
            <param name="type">Selects the Recipient type to retrieve</param>
            <param name="html">Set to true to return the E-mail address as an html string</param>
            <param name="convertToHref">Set to true to convert the E-mail addresses to hyperlinks. 
            Will be ignored when <param ref="html"/> is set to false</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Message.GetAttachmentNames">
            <summary>
            Returns the attachments names as a comma seperated string
            </summary>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Outlook.Storage.ReceivedBy">
            <summary>
            This class contains information about the person that has received this message
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.ReceivedBy.AddressType">
            <summary>
            Returns the address type (e.g. SMTP)
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.ReceivedBy.Email">
            <summary>
            Returns the E-mail address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.ReceivedBy.DisplayName">
            <summary>
            Returns the display name, null when not available
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.ReceivedBy.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.ReceivedBy" /> class.
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Recipient">
            <summary>
            Class used to contain To, CC and BCC recipients of a <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Recipient.Email">
            <summary>
            Returns the E-mail address, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Recipient.DisplayName">
            <summary>
            Returns the display name, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Recipient.Type">
            <summary>
            Returns the <see cref="T:MsgReader.Outlook.RecipientType"/>, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Recipient.AddressType">
            <summary>
            Returns the addresstype, null when not available
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Recipient.#ctor(MsgReader.Outlook.Storage)">
            <summary>
              Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Recipient" /> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Sender">
            <summary>
            Class used to contain the Sender of a <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Sender.Email">
            <summary>
            Returns the E-mail address
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Sender.DisplayName">
            <summary>
            Returns the display name
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Sender.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Sender" /> class.
            </summary>
            <param name="email">The E-mail address of the sender</param>
            <param name="displayName">The display name of the sender</param>
        </member>
        <member name="T:MsgReader.Outlook.Storage.SenderRepresenting">
            <summary>
            Class used to contain the representing sender of a <see cref="T:MsgReader.Outlook.Storage.Message"/>
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.SenderRepresenting.Email">
            <summary>
            Returns the E-mail address
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.SenderRepresenting.DisplayName">
            <summary>
            Returns the display name
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.SenderRepresenting.AddressType">
            <summary>
            Returns the address type, null when not available
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.SenderRepresenting.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.SenderRepresenting" /> class.
            </summary>
            <param name="email">The E-mail address of the representing sender</param>
            <param name="displayName">The display name of the representing sender</param>
            <param name="addressType">The address type</param>
        </member>
        <member name="F:MsgReader.Outlook.Storage._streamStatistics">
            <summary>
            The statistics for all streams in the Storage associated with this instance
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage._subStorageStatistics">
            <summary>
            The statistics for all storage in the Storage associated with this instance
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage._propHeaderSize">
            <summary>
            Header size of the property stream in the IStorage associated with this instance
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage._parentMessage">
            <summary>
            A reference to the parent message that this message may belong to
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage._compoundFile">
            <summary>
            The opened compound file
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage._rootStorage">
            <summary>
            The root storage associated with this instance.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage._namedProperties">
            <summary>
            Will contain all the named MAPI properties when the class that inherits the <see cref="T:MsgReader.Outlook.Storage"/> class 
            is a <see cref="T:MsgReader.Outlook.Storage.Message"/> class. Otherwise the List will be null
            mapped to
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.Storage._attachmentDeleted">
            <summary>
            Returns <c>true</c> when one or more attachment are deleted
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.TopParent">
            <summary>
            Gets the top level Outlook message from a sub message at any level.
            </summary>
            <value> The top level outlook message. </value>
        </member>
        <member name="P:MsgReader.Outlook.Storage.IsTopParent">
            <summary>
            Gets a value indicating whether this instance is the top level Outlook message.
            </summary>
            <value> <c>true</c> if this instance is the top level outlook message; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:MsgReader.Outlook.Storage.FileAccess">
            <summary>
            The way the storage is opened
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.#ctor(System.String,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage" /> class from a file.
            </summary>
            <param name="storageFilePath"> The file to load. </param>
            <param name="fileAccess">FileAccess mode, default is Read</param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage" /> class from a <see cref="T:System.IO.Stream" /> containing an IStorage.
            </summary>
            <param name="storageStream"> The <see cref="T:System.IO.Stream" /> containing an IStorage. </param>
            <param name="fileAccess">FileAccess mode, default is Read</param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.#ctor(OpenMcdf.CFStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage" /> class on the specified <see cref="T:OpenMcdf.CFStorage" />.
            </summary>
            <param name="storage"> The storage to create the <see cref="T:MsgReader.Outlook.Storage" /> on. </param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MsgReader.Outlook.Storage" /> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.LoadStorage(OpenMcdf.CFStorage)">
            <summary>
            Processes sub streams and storage on the specified storage.
            </summary>
            <param name="storage"> The storage to get sub streams and storage for. </param>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetStreamBytes(System.String)">
            <summary>
            Gets the data in the specified stream as a byte array. 
            Returns null when the <param ref="streamName"/> does not exists.
            </summary>
            <param name="streamName"> Name of the stream to get data for. </param>
            <returns> A byte array containing the stream data. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetStreamAsString(System.String,System.Text.Encoding)">
            <summary>
            Gets the data in the specified stream as a string using the specified encoding to decode the stream data.
            Returns null when the <param ref="streamName"/> does not exists.
            </summary>
            <param name="streamName"> Name of the stream to get string data for. </param>
            <param name="streamEncoding"> The encoding to decode the stream data with. </param>
            <returns> The data in the specified stream as a string. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiProperty(System.String)">
            <summary>
            Gets the raw value of the MAPI property.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier. </param>
            <returns> The raw value of the MAPI property. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyFromStreamOrStorage(System.String)">
            <summary>
            Gets the MAPI property value from a stream or storage in this storage.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier. </param>
            <returns> The value of the MAPI property or null if not found. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyFromPropertyStream(System.String)">
            <summary>
            Gets the MAPI property value from the property stream in this storage.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier. </param>
            <returns> The value of the MAPI property or null if not found. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetUnsendableRecipients(System.String)">
            <summary>
            Gets the value of the MAPI property as an <see cref="T:MsgReader.Outlook.UnsendableRecipients"/>
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier.</param>
            <returns> The value of the MAPI property as a string. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyString(System.String)">
            <summary>
            Gets the value of the MAPI property as a string.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier.</param>
            <returns> The value of the MAPI property as a string. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyStringList(System.String)">
            <summary>
            Gets the value of the MAPI property as a list of string.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier.</param>
            <returns> The value of the MAPI property as a list of string. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyInt32(System.String)">
            <summary>
            Gets the value of the MAPI property as a integer.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier. </param>
            <returns> The value of the MAPI property as a integer. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyDouble(System.String)">
            <summary>
            Gets the value of the MAPI property as a double.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier.</param>
            <returns> The value of the MAPI property as a double. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyDateTime(System.String)">
            <summary>
            Gets the value of the MAPI property as a datetime.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier.</param>
            <returns> The value of the MAPI property as a datetime or null when not set </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyBool(System.String)">
            <summary>
            Gets the value of the MAPI property as a bool.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier.</param>
            <returns> The value of the MAPI property as a boolean or null when not set. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.GetMapiPropertyBytes(System.String)">
            <summary>
            Gets the value of the MAPI property as a byte array.
            </summary>
            <param name="propIdentifier"> The 4 char hexadecimal prop identifier.</param>
            <returns> The value of the MAPI property as a byte array. </returns>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.Storage.Task">
            <summary>
            Class used to contain all the task information. A task can also be added to an E-mail (<see cref="T:MsgReader.Outlook.Storage.Message"/>) when
            the FollowUp flag is set.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.StartDate">
            <summary>
            Returns the start datetime of the <see cref="T:MsgReader.Outlook.Storage.Task"/>, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.DueDate">
            <summary>
            Returns the due datetime of the <see cref="T:MsgReader.Outlook.Storage.Task"/>, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.Status">
            <summary>
            Returns the <see cref="T:MsgReader.Outlook.TaskStatus">Status</see> of the <see cref="T:MsgReader.Outlook.Storage.Task"/>, 
            null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.StatusText">
            <summary>
            Returns the <see cref="T:MsgReader.Outlook.TaskStatus">Status</see> of the <see cref="T:MsgReader.Outlook.Storage.Task"/> as a string, 
            null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.PercentageComplete">
            <summary>
            Returns the estimated effort (in minutes) that is needed for <see cref="T:MsgReader.Outlook.Storage.Task"/> task, 
            null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.Complete">
            <summary>
            Returns true when the <see cref="T:MsgReader.Outlook.Storage.Task"/> has been completed, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.EstimatedEffort">
            <summary>
            Returns the estimated effort that is needed for the <see cref="T:MsgReader.Outlook.Storage.Task"/> as a <see cref="T:System.TimeSpan"/>, 
            null when no available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.EstimatedEffortText">
            <summary>
            Returns the estimated effort that is needed for the <see cref="T:MsgReader.Outlook.Storage.Task"/> as a string (e.g. 11 weeks), 
            null when no available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.ActualEffort">
            <summary>
            Returns the actual effort that is spent on the <see cref="T:MsgReader.Outlook.Storage.Task"/> as a <see cref="T:System.TimeSpan"/>,
            null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.ActualEffortText">
            <summary>
            Returns the actual effort that is spent on the <see cref="T:MsgReader.Outlook.Storage.Task"/> as a string (e.g. 11 weeks), 
            null when no available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.Owner">
            <summary>
            Returns the owner of the <see cref="T:MsgReader.Outlook.Storage.Task"/>, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.Contacts">
            <summary>
            Returns the contacts of the <see cref="T:MsgReader.Outlook.Storage.Task"/>, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.Companies">
            <summary>
            Returns the name of the company for who the task is done, 
            null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.BillingInformation">
            <summary>
            Returns the billing information for the <see cref="T:MsgReader.Outlook.Storage.Task"/>, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.Mileage">
            <summary>
            Returns the mileage that is driven to do the <see cref="T:MsgReader.Outlook.Storage.Task"/>, null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Storage.Task.CompleteTime">
            <summary>
            Returns the datetime when the <see cref="T:MsgReader.Outlook.Storage.Task"/> was completed, 
            only set when <see cref="P:MsgReader.Outlook.Storage.Task.Complete"/> is true.
            Otherwise null
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.Storage.Task.#ctor(MsgReader.Outlook.Storage)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgReader.Outlook.Storage.Task" /> class.
            </summary>
            <param name="message"> The message. </param>
        </member>
        <member name="T:MsgReader.Outlook.FlagStatus">
            <summary>
            The flag state of an message
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.FlagStatus.Complete">
            <summary>
            The msg object has been flagged as completed
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.FlagStatus.Marked">
            <summary>
            The msg object has been flagged and marked as a task
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.InlineAttachment">
            <summary>
            Used as a temporary placeholder for information about the inline attachents
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.InlineAttachment.RenderingPosition">
            <summary>
            Returns the rendering position for the attachmnt
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.InlineAttachment.IconFileName">
            <summary>
            Returns the name of the icon when this attachment is part of an RTF body and is
            shown as an icon
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.InlineAttachment.AttachmentFileName">
            <summary>
            Returns the name for the attachment
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.InlineAttachment.FullName">
            <summary>
            Returns the full name for the attachment
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.PropertyType">
            <summary>
                The type of a <see cref="T:MsgReader.Outlook.MapiTags"/>
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_UNSPECIFIED">
            <summary>
                Any: this property type value matches any type; a server MUST return the actual type in its response. Servers
                MUST NOT return this type in response to a client request other than NspiGetIDsFromNames or the
                RopGetPropertyIdsFromNamesROP request ([MS-OXCROPS] section 2.2.8.1). (PT_UNSPECIFIED)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_NULL">
            <summary>
                None: This property is a placeholder. (PT_NULL)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_SHORT">
            <summary>
                2 bytes; a 16-bit integer (PT_I2, i2, ui2)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_LONG">
            <summary>
                4 bytes; a 32-bit integer (PT_LONG, PT_I4, int, ui4)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_FLOAT">
            <summary>
                4 bytes; a 32-bit floating point number (PT_FLOAT, PT_R4, float, r4)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_DOUBLE">
            <summary>
                8 bytes; a 64-bit floating point number (PT_DOUBLE, PT_R8, r8)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_APPTIME">
            <summary>
                8 bytes; a 64-bit floating point number in which the whole number part represents the number of days since
                December 30, 1899, and the fractional part represents the fraction of a day since midnight (PT_APPTIME)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_ERROR">
            <summary>
                4 bytes; a 32-bit integer encoding error information as specified in section 2.4.1. (PT_ERROR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_BOOLEAN">
            <summary>
                1 byte; restricted to 1 or 0 (PT_BOOLEAN. bool)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_OBJECT">
            <summary>
                The property value is a Component Object Model (COM) object, as specified in section 2.11.1.5. (PT_OBJECT)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_I8">
            <summary>
                8 bytes; a 64-bit integer (PT_LONGLONG, PT_I8, i8, ui8)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_LONGLONG">
            <summary>
                8 bytes; a 64-bit integer (PT_LONGLONG, PT_I8, i8, ui8)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_UNICODE">
            <summary>
                Variable size; a string of Unicode characters in UTF-16LE format encoding with terminating null character
                (0x0000). (PT_UNICODE, string)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_STRING8">
            <summary>
                Variable size; a string of multi byte characters in externally specified encoding with terminating null
                character (single 0 byte). (PT_STRING8) ... ANSI format
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_SYSTIME">
            <summary>
                8 bytes; a 64-bit integer representing the number of 100-nanosecond intervals since January 1, 1601
                (PT_SYSTIME, time, datetime, datetime.tz, datetime.rfc1123, Date, time, time.tz)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_CLSID">
            <summary>
               16 bytes; a GUID with Data1, Data2, and Data3 fields in little-endian format
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_BINARY">
            <summary>
                Variable size; a COUNT field followed by that many bytes. (PT_BINARY)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_SHORT">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_SHORT values. (PT_MV_SHORT, PT_MV_I2, mv.i2)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_LONG">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_LONG values. (PT_MV_LONG, PT_MV_I4, mv.i4)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_FLOAT">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_FLOAT values. (PT_MV_FLOAT, PT_MV_R4, mv.float)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_DOUBLE">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_DOUBLE values. (PT_MV_DOUBLE, PT_MV_R8)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_CURRENCY">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_CURRENCY values. (PT_MV_CURRENCY, mv.fixed.14.4)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_APPTIME">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_APPTIME values. (PT_MV_APPTIME)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_LONGLONG">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_LONGLONGvalues. (PT_MV_I8, PT_MV_I8)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_TSTRING">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_UNICODE values. (PT_MV_UNICODE)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_UNICODE">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_UNICODE values. (PT_MV_UNICODE)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_STRING8">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_STRING8 values. (PT_MV_STRING8, mv.string)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_SYSTIME">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_SYSTIME values. (PT_MV_SYSTIME)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_CLSID">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_CLSID values. (PT_MV_CLSID, mv.uuid)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.PropertyType.PT_MV_BINARY">
            <summary>
                Variable size; a COUNT field followed by that many PT_MV_BINARY values. (PT_MV_BINARY, mv.bin.hex)
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.MapiTags">
            <summary>
                Contains all MAPI related constants
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_SMTP_ADDRESS">
            <summary>
            Contains the SMTP address for the address book object.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_ORGEMAILADDR">
            <summary>
            Second place to search for an E-mail address
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecipStoragePrefix">
            <summary>
                Storage prefix tag
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AttachStoragePrefix">
            <summary>
                Prefix that is placed before an attachment tag
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.SubStgVersion1">
            <summary>
                Sub storage version 1.0 streams
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.HeaderStreamName">
            <summary>
                Stream that contains the internet E-mail headers
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PropertiesStream">
            <summary>
                The stream that contains all the MAPI properties
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.NameIdStorage">
            <summary>
                Contains the streams needed to perform named property mapping
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.GuidStream">
            <summary>
                The GUID stream
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.EntryStream">
            <summary>
                The property stream
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.StringStream">
            <summary>
                The string stream
                http://msdn.microsoft.com/en-us/library/ee202480%28v=exchg.80%29.aspx
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PropertiesStreamHeaderTop">
            <summary>
                Stream properties begin for header or top
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PropertiesStreamHeaderAttachOrRecip">
            <summary>
                Stream properties begin for attachments or recipients
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.NO_ATTACHMENT">
            <summary>
                There is no attachment
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.ATTACH_BY_VALUE">
            <summary>
                The PR_ATTACH_DATA_BIN property contains the attachment data
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.ATTACH_BY_REFERENCE">
            <summary>
                The PR_ATTACH_PATHNAME or PR_ATTACH_LONG_PATHNAME property contains a fully qualified path 
                identifying the attachment to recipients with access to a common file server
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.ATTACH_BY_REF_RESOLVE">
            <summary>
                The PR_ATTACH_PATHNAME or PR_ATTACH_LONG_PATHNAME property contains a fully qualified path identifying the attachment
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.ATTACH_BY_REF_ONLY">
            <summary>
                The PR_ATTACH_PATHNAME or PR_ATTACH_LONG_PATHNAME property contains a fully qualified path identifying the attachment
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.ATTACH_EMBEDDED_MSG">
            <summary>
                The attachment is a msg file
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.ATTACH_OLE">
            <summary>
                The attachment in an OLE object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecipientTo">
            <summary>
                The recipient is an TO E-mail address
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecipientCC">
            <summary>
                The recipient is a CC E-mail address
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecipientBCC">
            <summary>
                The recipient is a BCC E-mail address
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecipientResource">
            <summary>
                The recipient is a resource (e.g. a room)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecipientRoom">
            <summary>
                The recipient is a room (uses PR_RECIPIENT_TYPE_EXE) needs Exchange 2007 or higher
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.FlagRequest">
            <summary>
                E-mail follow up flag (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_FLAG_STATUS">
            <summary>
                Specifies the flag state of the message object; Not present, 1 = Completed, 2 = Flagged.
                Only available from Outlook 2007 and up.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_FLAG_COMPLETE_TIME">
            <summary>
                Contains the date when the task was completed. Only filled when <see cref="F:MsgReader.Outlook.MapiTags.TaskComplete" /> is true.
                Only available from Outlook 2007 and up.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.TaskStatus">
            <summary>
                <see cref="F:MsgReader.Outlook.MapiTags.TaskStatus" /> of the task (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.TaskStartDate">
            <summary>
                Start date of the task (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.TaskDueDate">
            <summary>
                Due date of the task (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.TaskComplete">
            <summary>
                True when the task is complete (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.TaskActualEffort">
            <summary>
                The actual task effort in minutes (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.TaskEstimatedEffort">
            <summary>
                The estimated task effort in minutes (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PercentComplete">
            <summary>
                The complete percentage of the task (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Contacts">
            <summary>
                The contacts of the task (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Companies">
            <summary>
                The companies for the task (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Billing">
            <summary>
                The task billing information (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Mileage">
            <summary>
                The task mileage information (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Owner">
            <summary>
                The task owner (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Location">
            <summary>
                Appointment location (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecurrenceType">
            <summary>
                Appointment recurrence type (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.RecurrencePattern">
            <summary>
                Appointment recurrence pattern (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AppointmentStartWhole">
            <summary>
                Appointment start time (greenwich time) (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AppointmentEndWhole">
            <summary>
                Appointment end time (greenwich time) (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AppointmentAllAttendees">
            <summary>
                Appointment all attendees string (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AppointmentToAttendees">
            <summary>
                Appointment to attendees string (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AppointmentCCAttendees">
            <summary>
                Contains a list of all the send able attendees who are also required attendees.
            </summary>
            <remarks>
                The value for each attendee is the PR_DISPLAY_NAME (PidTagDisplayName) property of the attendee’s 
                address book. Separate entries must be delimited by a semicolon followed by a space. This 
                property is not required.
            </remarks>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AppointmentNotAllowPropose">
            <summary>
                Indicates whether attendees are not allowed to propose a new date/time for the meeting.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.AppointmentUnsendableRecipients">
            <summary>
                Contains a list of unsendable attendees.
            </summary>
            <remarks>
                This property is not required but should be set. Its format is detailed in [MS-OXOCAL].
            </remarks>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PidLidClientIntent">
            <summary>
                The PidLidClientIntent property ([MS-OXPROPS] section 2.58) indicates what actions a user 
                has taken on a Meeting object
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.InstantMessagingAddress">
            <summary>
            Instant messaging address (named property)    
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.HomeAddress">
            <summary>
            Home address (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.WorkAddress">
            <summary>
            Work address (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.OtherAddress">
            <summary>
            Other address (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Email1EmailAddress">
            <summary>
            E-mail 1 address (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Email1DisplayName">
            <summary>
            E-mail 1 display name (named property
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Email2EmailAddress">
            <summary>
            E-mail 2 address (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Email2DisplayName">
            <summary>
            E-mail 2 display name (named property
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Email3EmailAddress">
            <summary>
            E-mail 3 address (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Email3DisplayName">
            <summary>
            E-mail 3 display name (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Html">
            <summary>
            Html (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.Keywords">
            <summary>
            Categories (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_SENDER_SMTP_ADDRESS">
            <summary>
            Contains the format of the Simple Mail Transport Protocol (SMTP) email address of the sending mailbox owner
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_SENT_REPRESENTING_SMTP_ADDRESS">
            <summary>
            Contains the Simple Mail Transport Protocol (SMTP) email address for the messaging 
            user who is represented by the sender
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_LAST_MODIFIER_NAME_W">
            <summary>
            Contains the name of the last user (or creator) to change the Message object 
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.InternetAccountName">
            <summary>
            Can contain the E-mail address of the sender (named property)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.SenderSmtpAddressAlternate">
            <summary>
            Unnamed property that may contain the SMTP email address of the sender
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_CODE_PAGE_ID">
            <summary>
            Contains the code page that is used in HTML when this is added in binary format
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_MESSAGE_LOCALE_ID">
            <summary>
            Contains the language client used to create the message.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_MESSAGE_CODEPAGE">
            <summary>
            Contains the code page that is used in the body
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_INTERNET_CPID">
            <summary>
            Indicates the code page used for PR_BODY (PidTagBody) or PR_BODY_HTML (PidTagBodyHtml) properties.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_INTERNET_MESSAGE_ID">
            <summary>
            Corresponds to the message ID field as specified in [RFC2822].
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_CONVERSATION_ID">
            <summary>
            Contains a computed value derived from other conversation-related properties
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.PR_CONVERSATION_INDEX_TRACKING">
            <summary>
            Indicates whether the GUID portion of the PidTagConversationIndex property (section 2.646) is to
            be used to compute the PidTagConversationId property (section 2.645).
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MapiTags.SubStorageStreamPrefix">
            <summary>
            The prefix for a property tag
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.MessageType">
            <summary>
            The message types
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.Unknown">
            <summary>
            The message type is unknown
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.Email">
            <summary>
            The message is a normal E-mail
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailNonDeliveryReport">
            <summary>
            Non-delivery report for a standard E-mail (REPORT.IPM.NOTE.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailDeliveryReport">
            <summary>
            Delivery receipt for a standard E-mail (REPORT.IPM.NOTE.DR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailDelayedDeliveryReport">
            <summary>
            Delivery receipt for a delayed E-mail (REPORT.IPM.NOTE.DELAYED)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailReadReceipt">
            <summary>
            Read receipt for a standard E-mail (REPORT.IPM.NOTE.IPNRN)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailNonReadReceipt">
            <summary>
            Non-read receipt for a standard E-mail (REPORT.IPM.NOTE.IPNNRN)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailEncryptedAndMaybeSigned">
            <summary>
            The message in an E-mail that is encrypted and can also be signed (IPM.Note.SMIME)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailEncryptedAndMaybeSignedNonDelivery">
            <summary>
            Non-delivery report for a Secure MIME (S/MIME) encrypted and opaque-signed E-mail (REPORT.IPM.NOTE.SMIME.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailEncryptedAndMaybeSignedDelivery">
            <summary>
            Delivery report for a Secure MIME (S/MIME) encrypted and opaque-signed E-mail (REPORT.IPM.NOTE.SMIME.DR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailClearSigned">
            <summary>
            The message is an E-mail that is clear signed (IPM.Note.SMIME.MultipartSigned)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailClearSignedReadReceipt">
            <summary>
            The message is a secure read receipt for an E-mail (IPM.Note.Receipt.SMIME)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailClearSignedNonDelivery">
            <summary>
            Non-delivery report for an S/MIME clear-signed E-mail (REPORT.IPM.NOTE.SMIME.MULTIPARTSIGNED.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailClearSignedDelivery">
            <summary>
            Delivery receipt for an S/MIME clear-signed E-mail (REPORT.IPM.NOTE.SMIME.MULTIPARTSIGNED.DR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailBmaStub">
            <summary>
            The message is an E-mail that is generared signed (IPM.Note.BMA.Stub)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.EmailSms">
            <summary>
            The message is a short message service (IPM.Note.Mobile.SMS)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.Appointment">
            <summary>
            The message is an appointment (IPM.Appointment)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentNotification">
            <summary>
            The message is a notification for an appointment (IPM.Notification.Meeting)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentSchedule">
            <summary>
            The message is a schedule for an appointment (IPM.Schedule.Meeting)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentRequest">
            <summary>
            The message is a request for an appointment (IPM.Schedule.Meeting.Request)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentRequestNonDelivery">
            <summary>
            The message is a request for an appointment (REPORT.IPM.SCHEDULE.MEETING.REQUEST.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponse">
            <summary>
            The message is a response to an appointment (IPM.Schedule.Response)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponsePositive">
            <summary>
            The message is a positive response to an appointment (IPM.Schedule.Resp.Pos)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponsePositiveNonDelivery">
            <summary>
            Non-delivery report for a positive meeting response (accept) (REPORT.IPM.SCHEDULE.MEETING.RESP.POS.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponseNegative">
            <summary>
            The message is a negative response to an appointment (IPM.Schedule.Resp.Neg)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponseNegativeNonDelivery">
            <summary>
            Non-delivery report for a negative meeting response (declinet) (REPORT.IPM.SCHEDULE.MEETING.RESP.NEG.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponseTentative">
            <summary>
            The message is a response to tentatively accept the meeting request (IPM.Schedule.Meeting.Resp.Tent)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponseTentativeNonDelivery">
            <summary>
            Non-delivery report for a Tentative meeting response (REPORT.IPM.SCHEDULE.MEETING.RESP.TENT.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponseCanceled">
            <summary>
            The message is a cancelation an appointment (IPM.Schedule.Meeting.Canceled)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.AppointmentResponseCanceledNonDelivery">
            <summary>
            Non-delivery report for a cancelled meeting notification (REPORT.IPM.SCHEDULE.MEETING.CANCELED.NDR)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.Contact">
            <summary>
            The message is a contact card (IPM.Contact)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.Task">
            <summary>
            The message is a task (IPM.Task)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.TaskRequestAccept">
            <summary>
            The message is a task request accept (IPM.TaskRequest.Accept)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.TaskRequestDecline">
            <summary>
            The message is a task request decline (IPM.TaskRequest.Decline)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.TaskRequestUpdate">
            <summary>
            The message is a task request update (IPM.TaskRequest.Update)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.StickyNote">
            <summary>
            The message is a sticky note (IPM.StickyNote)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.CiscoUnityVoiceMessage">
            <summary>
            The message is Cisco Unity Voice message (IPM.Note.Custom.Cisco.Unity.Voice)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.RightFaxAdv">
            <summary>
            IPM.NOTE.RIGHTFAX.ADV
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.SkypeForBusinessMissedMessage">
            <summary>
            The message is Skype for Business missed message (IPM.Note.Microsoft.Missed)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageType.SkypeForBusinessConversation">
            <summary>
            The message is a Skype for Business conversation (IPM.Note.Microsoft.Conversation)
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.MessageImportance">
            <summary>
            The importancy of the message
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageImportance.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageImportance.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.MessageImportance.High">
            <summary>
            High
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.Property">
            <summary>
                Pointer to a variable of type SPropValue that specifies the property value array describing the properties 
                for the recipient. The rgPropVals member can be NULL.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Property.Id">
            <summary>
                The id of the property
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Property.ShortName">
            <summary>
                Returns the Property as a readable string without the streamprefix and type
            </summary>
            <returns></returns>
        </member>
        <member name="P:MsgReader.Outlook.Property.Name">
            <summary>
                Returns the Property as a readable string
            </summary>
            <returns></returns>
        </member>
        <member name="P:MsgReader.Outlook.Property.Type">
            <summary>
                The <see cref="T:MsgReader.Outlook.PropertyType" />
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Property.MultiValue">
            <summary>
                Returns <c>true</c> when this property is part of a multivalue property
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Property.Data">
            <summary>
                The property data
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToInt">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as an integer when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to
                <see cref="F:MsgReader.Outlook.PropertyType.PT_SHORT" />,
                <see cref="F:MsgReader.Outlook.PropertyType.PT_LONG" /> or <see cref="F:MsgReader.Outlook.PropertyType.PT_ERROR" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not <see cref="F:MsgReader.Outlook.PropertyType.PT_SHORT"/> or
            <see cref="F:MsgReader.Outlook.PropertyType.PT_LONG"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToSingle">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a single when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to 
                <see cref="F:MsgReader.Outlook.PropertyType.PT_FLOAT" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not <see cref="F:MsgReader.Outlook.PropertyType.PT_FLOAT"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToDouble">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a single when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to 
                <see cref="F:MsgReader.Outlook.PropertyType.PT_DOUBLE" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not <see cref="F:MsgReader.Outlook.PropertyType.PT_DOUBLE"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToDecimal">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a decimal when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to
                <see cref="F:MsgReader.Outlook.PropertyType.PT_FLOAT" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not <see cref="F:MsgReader.Outlook.PropertyType.PT_FLOAT"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToDateTime">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a datetime when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to
                <see cref="F:MsgReader.Outlook.PropertyType.PT_APPTIME" />
                or <see cref="F:MsgReader.Outlook.PropertyType.PT_SYSTIME" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not set to <see cref="F:MsgReader.Outlook.PropertyType.PT_APPTIME"/> or
            <see cref="F:MsgReader.Outlook.PropertyType.PT_SYSTIME"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToBool">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a boolean when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to <see cref="F:MsgReader.Outlook.PropertyType.PT_BOOLEAN" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not set to <see cref="F:MsgReader.Outlook.PropertyType.PT_BOOLEAN"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToLong">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a boolean when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to
                <see cref="F:MsgReader.Outlook.PropertyType.PT_LONGLONG" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not set to <see cref="F:MsgReader.Outlook.PropertyType.PT_LONGLONG"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToString">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a string when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to <see cref="F:MsgReader.Outlook.PropertyType.PT_UNICODE" />
                or <see cref="F:MsgReader.Outlook.PropertyType.PT_STRING8" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not set to <see cref="F:MsgReader.Outlook.PropertyType.PT_UNICODE"/> 
            or <see cref="F:MsgReader.Outlook.PropertyType.PT_STRING8" /></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToBinary">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a byte[] when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to <see cref="F:MsgReader.Outlook.PropertyType.PT_BINARY" />
                <see cref="F:MsgReader.Outlook.PropertyType.PT_OBJECT" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not set to <see cref="F:MsgReader.Outlook.PropertyType.PT_BINARY"/></exception>
        </member>
        <member name="P:MsgReader.Outlook.Property.ToGuid">
            <summary>
                Returns <see cref="P:MsgReader.Outlook.Property.Data" /> as a Guid when <see cref="P:MsgReader.Outlook.Property.Type" /> is set to <see cref="F:MsgReader.Outlook.PropertyType.PT_CLSID" />
                <see cref="F:MsgReader.Outlook.PropertyType.PT_OBJECT" />
            </summary>
            <exception cref="T:MsgReader.Exceptions.MRInvalidProperty">Raised when the <see cref="P:MsgReader.Outlook.Property.Type"/> is not set to <see cref="F:MsgReader.Outlook.PropertyType.PT_BINARY"/></exception>
        </member>
        <member name="M:MsgReader.Outlook.Property.ByteArrayToDecimal(System.Byte[],System.Int32)">
            <summary>
                Converts a byte array to a decimal
            </summary>
            <param name="source">The byte array</param>
            <param name="offset">The offset to start reading</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Outlook.Property.#ctor(System.UInt16,MsgReader.Outlook.PropertyType,System.Byte[],System.Boolean)">
            <summary>
                Creates this object and sets all its propertues
            </summary>
            <param name="id">The id of the property</param>
            <param name="type">The <see cref="T:MsgReader.Outlook.PropertyType" /></param>
            <param name="data">The property data</param>
            <param name="multiValue">Set to <c>true</c> to indicate that this property is part of a
            multivalue property</param>
        </member>
        <member name="T:MsgReader.Outlook.RecipientType">
            <summary>
            Recipient types
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RecipientType.Unknown">
            <summary>
            Recipient is unknown
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RecipientType.To">
            <summary>
            The recipient is an TO E-mail address
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RecipientType.Cc">
            <summary>
            The recipient is a CC E-mail address
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RecipientType.Bcc">
            <summary>
            The recipient is a BCC E-mail address
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RecipientType.Resource">
            <summary>
            The recipient is a resource (e.g. a room)
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RecipientType.Room">
            <summary>
                The recipient is a room (uses PR_RECIPIENT_TYPE_EXE) needs Exchange 2007 or higher
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.RecipientPlaceHolder">
            <summary>
                Used as a placeholder for the recipients from the MSG file itself or from the "internet"
                headers when this message is send outside an Exchange system
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientPlaceHolder.Email">
            <summary>
                The E-mail address
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientPlaceHolder.DisplayName">
            <summary>
                The display name
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientPlaceHolder.AddressType">
            <summary>
            Returns the addresstype, null when not available
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.RecipientPlaceHolder.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates this object and sets all it's properties
            </summary>
            <param name="email">The E-mail address</param>
            <param name="displayName">The display name</param>
            <param name="addressType">The address type</param>
        </member>
        <member name="T:MsgReader.Outlook.RtfDecompressor">
            <summary>
            Class used to decompress compressed RTF
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RtfDecompressor._compressedRtfPrebuf">
            <summary>
            Contains the pre buf string
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.RtfDecompressor.Crc32Table">
            <summary>
            The lookup table used in the CRC32 calculation
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.RtfDecompressor.CalculateCrc32(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>
            Calculates the CRC32 of the given bytes.
            The CRC32 calculation is similar to the standard one as demonstrated in RFC 1952, 
            but with the inversion (before and after the calculation) omitted.
            </summary>
            <param name="buf">The byte array to calculate CRC32 on </param>
            <param name="off">The offset within buf at which the CRC32 calculation will start </param>
            <param name="len">The number of bytes on which to calculate the CRC32</param>
            <returns>The CRC32 value</returns>
        </member>
        <member name="M:MsgReader.Outlook.RtfDecompressor.GetU32(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Returns an unsigned 32-bit value from little-endian ordered bytes.
            </summary>
            <param name="buf">Byte array from which byte values are taken</param>
            <param name="offset">Offset the offset within buf from which byte values are taken</param>
            <returns>An unsigned 32-bit value as a lon</returns>
        </member>
        <member name="M:MsgReader.Outlook.RtfDecompressor.GetU8(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Returns an unsigned 8-bit value from a byte array.
            </summary>
            <param name="buf">A byte array from which byte value is taken</param>
            <param name="offset">The offset within buf from which byte value is taken</param>
            <returns>An unsigned 8-bit value as an int</returns>
        </member>
        <member name="M:MsgReader.Outlook.RtfDecompressor.DecompressRtf(System.Byte[])">
            <summary>
            Decompresses the RTF or throws an IllegalArgumentException if src does 
            not contain valid compressed-RTF bytes.
            </summary>
            <param name="src">Src the compressed-RTF data bytes</param>
            <returns>An array containing the decompressed byte</returns>
        </member>
        <member name="T:MsgReader.Outlook.RtfToHtmlConverter">
            <summary>
            This class is used to convert RTF to HTML
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.RtfToHtmlConverter.ConvertRtfToHtml(System.String)">
            <summary>
            Convert RTF to HTML
            </summary>
            <param name="rtf">The rtf string</param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Outlook.TaskStatus">
            <summary>
            The status of a task
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.TaskStatus.NotStarted">
            <summary>
            The task has not yet started
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.TaskStatus.InProgess">
            <summary>
            The task is in progress
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.TaskStatus.Complete">
            <summary>
            The task is complete
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.TaskStatus.Waiting">
            <summary>
            The task is waiting on someone else
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.AddressType">
            <summary>
                The <see cref="P:MsgReader.Outlook.RecipientRow.DisplayType" />
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.NoType">
            <summary>
                No type is set
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.X500Dn">
            <summary>
                X500DN
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.MsMail">
            <summary>
                Ms mail
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.Smtp">
            <summary>
                SMTP
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.Fax">
            <summary>
                Fax
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.ProfessionalOfficeSystem">
            <summary>
                Professional office system
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.PersonalDistributionList1">
            <summary>
                Personal distribution list 1
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressType.PersonalDistributionList2">
            <summary>
                Personal distribution list 2
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.DisplayType">
            <summary>
                An enumeration. This field MUST be present when the Type field
                of the RecipientFlags field is set to X500DN(0x1) and MUST NOT be present otherwise.This
                value specifies the display type of this address.Valid values for this field are specified in the
                following table.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.DisplayType.MessagingUser">
            <summary>
                A messaging user
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.DisplayType.DistributionList">
            <summary>
                A distribution list
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.DisplayType.Forum">
            <summary>
                A forum, such as a bulletin board service or a public or shared folder
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.DisplayType.AutomatedAgent">
            <summary>
                An automated agent
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.DisplayType.AddressBook">
            <summary>
                An Address Book object defined for a large group, such as helpdesk, accounting, coordinator, or
                department
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.DisplayType.PrivateDistributionList">
            <summary>
                A private, personally administered distribution list
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.DisplayType.RemoteAddressBook">
            <summary>
                An Address Book object known to be from a foreign or remote messaging system
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.AddressBookEntryIdType">
            <summary>
                An integer representing the type of the object. It MUST be one of the values from the following table.
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.LocalMailUser">
            <summary>
            A local mail user
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.DistributionList">
            <summary>
            A distribution list
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.BulletinBoardOrPublicFolder">
            <summary>
            A bulletinboard or public folder
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.AutomatedMailBox">
            <summary>
            An automated mailbox
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.OrganizationalMailBox">
            <summary>
            An organiztional mailbox
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.PrivateDistributionList">
            <summary>
            A private distribtion list
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.RemoteMailUser">
            <summary>
            A remote mail user
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.Container">
            <summary>
            A container
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.Template">
            <summary>
            A template
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.OneOffUser">
            <summary>
            One off user
            </summary>
        </member>
        <member name="F:MsgReader.Outlook.AddressBookEntryIdType.Search">
            <summary>
            Search
            </summary>
        </member>
        <member name="T:MsgReader.Outlook.UnsendableRecipients">
            <summary>
                The PidLidAppointmentUnsendableRecipients  property ([MS-OXPROPS] section 2.35) contains a list of
                unsendable attendees. This property is not required but SHOULD be set
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.RowCount">
            <summary>
                An integer that specifies the number of structures in the RecipientRow field
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.DifferentTransportDelivery">
            <summary>
                If this flag is b'1', a different transport is responsible for delivery to this recipient(1).
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.DisplayNameIncluded">
            <summary>
                If this flag is b'1', the DisplayName (section 2.8.3.2) field is included
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.EmailAddressIncluded">
            <summary>
                If this flag is b'1', the EmailAddress (section 2.8.3.2) field is included.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.AddressTypeIncluded">
            <summary>
                If this flag is b'1', this recipient (1) has a non-standard address type and the AddressType field is included.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.SimpleDisplayNameIncluded">
            <summary>
                If this flag is b'1', the SimpleDisplayName field is included.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.TransmittableDisplayNameSameAsDisplayName">
            <summary>
                If this flag is b'1', the value of the TransmittableDisplayName field is the same as the value of the DisplayName
                field.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.TransmittableDisplayNameIncluded">
            <summary>
                If this flag is b'1', the TransmittableDisplayName (section 2.8.3.2) field is included.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.UnsendableRecipients.StringsInUnicode">
            <summary>
                If this flag is b'1', the associated string properties are in Unicode with a 2-
                byte terminating null character; if this flag is b'0', string properties are MBCS with a single
                terminating null character, in the code page sent to the server in the EcDoConnectEx method,
                as specified in [MS-OXCRPC] section 3.1.4.1, or the Connect request type 6, as specified in
                [MS-OXCMAPIHTTP] section 2.2.4.1.
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.UnsendableRecipients.GetEmailRecipients(MsgReader.Outlook.RecipientType)">
            <summary>
            Returns all the recipient for the given <paramref name="type"/>
            </summary>
            <param name="type">The <see cref="T:MsgReader.Outlook.RecipientType"/> to return</param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Outlook.RecipientRow">
            <summary>
                An array of RecipientRow structures, as specified in [MS-OXCDATA] section 2.8.3.
                Each structure specifies an unsendable attendee. The RowCount field specifies the
                number of structures contained in this field. For details about properties that can
                be set on RecipientRow structures for Calendar objects and meeting-related objects,
                see section 2.2.4.10.
            </summary>
            <remarks>
                See https://msdn.microsoft.com/en-us/library/ee179606(v=exchg.80).aspx
            </remarks>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.RecipientType">
            <summary>
            The <see cref="P:MsgReader.Outlook.RecipientRow.RecipientType"/> or null when not available
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.AddressType">
            <summary>
                The <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" />
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.AddressPrefixUsed">
            <summary>
                The address prefix used
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.DisplayType">
            <summary>
                The <see cref="P:MsgReader.Outlook.RecipientRow.DisplayType" />
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.X500Dn">
            <summary>
                This field MUST be present when the <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" /> field of the RecipientFlags
                field is set to X500DN (0x1) and MUST NOT be present otherwise. This value specifies the X500 DN of
                this recipient (1).
            </summary>
            <remarks>
                A distinguished name (DN), in Teletex form, of an object that is in an address book. An X500 DN can be more limited
                in the size and number of relative distinguished names (RDNs) than a full DN.
            </remarks>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.EntryIdSize">
            <summary>
                This field MUST be present when the <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" /> field of the RecipientFlags field is set to
                PersonalDistributionList1 (0x6) or PersonalDistributionList2 (0x7). This field MUST
                NOT be present otherwise. This value specifies the size of the EntryID field.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.EntryId">
            <summary>
                This field MUST be present when the <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" /> field of the RecipientFlags field is set to
                PersonalDistributionList1 (0x6) or PersonalDistributionList2 (0x7). This field MUST NOT be present otherwise. The
                number of bytes in this field MUST be the same as specified in the EntryIdSize field. This array specifies the
                address book EntryID structure, as specified in section 2.2.5.2, of the distribution list.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.SearchKeySize">
            <summary>
                This field MUST be present when the <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" /> field of the RecipientFlags field is set to
                PersonalDistributionList1 (0x6) or PersonalDistributionList2 (0x7). This field MUST
                NOT be present otherwise. This value specifies the size of the SearchKey field.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.SearchKey">
            <summary>
                This field is used when the <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" /> field of the RecipientFlags field is set to
                PersonalDistributionList1 (0x6) or PersonalDistributionList2 (0x7). This field MUST
                NOT be present otherwise. The number of bytes in this field MUST be the same as what
                is specified in the SearchKeySize field and can be 0. This array specifies the search
                key of the distribution list.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.AddresType">
            <summary>
                This field MUST be present when the <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" /> field of the
                RecipientsFlags field is set to NoType (0x0) and the O flag of the RecipientsFlags field
                is set. This field MUST NOT be present otherwise. This string specifies the address type
                of the recipient (1).
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.EmailAddress">
            <summary>
                A null-terminated string. This field MUST be present when the E flag of the RecipientsFlags
                field is set and MUST NOT be present otherwise. This field MUST be specified in Unicode
                characters if the U flag of the RecipientsFlags field is set and in the 8-bit character set
                otherwise. This string specifies the email address of the recipient (1).
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.DisplayName">
            <summary>
                This field MUST be present when the D flag of the RecipientsFlags
                field is set and MUST NOT be present otherwise. This field MUST be specified in Unicode characters if the U flag of
                the RecipientsFlags field is set and in the 8-bit character set otherwise. This string specifies the email address
                of the recipient (1).
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.SimpleDisplayName">
            <summary>
                A null-terminated string. This field MUST be present when the I flag of the RecipientsFlags field is set and MUST
                NOT be present otherwise. This field MUST be specified in Unicode characters if the U flag of the RecipientsFlags
                field is set and in the 8-bit character set otherwise. This string specifies the email address of the recipient
                (1).
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.TransmittableDisplayName">
            <summary>
                This field MUST be present when the T flag of the RecipientsFlags field is set and MUST NOT be present otherwise.
                This field MUST be specified in Unicode characters if the U flag of the RecipientsFlags field is set and in the
                8-bit character set otherwise. This string specifies the email address of the recipient (1).
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.RecipientProperties">
            <summary>
                PropertyRow structures, as specified in section 2.8.1. The columns used for this row are those specified in
                RecipientProperties.
            </summary>
        </member>
        <member name="P:MsgReader.Outlook.RecipientRow.SupportsRtf">
            <summary>
                Specifies that the recipient does support receiving rich text messages.
            </summary>
        </member>
        <member name="M:MsgReader.Outlook.RecipientRow.#ctor(System.IO.BinaryReader,MsgReader.Outlook.AddressType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates this object and sets all it's properties
            </summary>
            <param name="binaryReader">The <see cref="T:System.IO.BinaryReader" /></param>
            <param name="addressType">The <see cref="P:MsgReader.Outlook.RecipientRow.AddressType" /></param>
            <param name="supportsRtf">
                Set to <c>true</c> when the recipient in the <see cref="T:MsgReader.Outlook.RecipientRow" />
                supports RTF
            </param>
            <param name="displayNameIncluded">If this flag is b'1', the DisplayName (section 2.8.3.2) field is included</param>
            <param name="emailAddressIncluded">If this flag is b'1', the EmailAddress (section 2.8.3.2) field is included.</param>
            <param name="addressTypeIncluded">
                If this flag is b'1', this recipient (1) has a non-standard address type and the
                AddressType field is included.
            </param>
            <param name="simpleDisplayNameIncluded">If this flag is b'1', the SimpleDisplayName field is included.</param>
            <param name="transmittableDisplayNameSameAsDisplayName">
                If this flag is b'1', the value of the TransmittableDisplayName
                field is the same as the value of the DisplayName field.
            </param>
            <param name="transmittableDisplayNameIncluded">
                If this flag is b'1', the TransmittableDisplayName (section 2.8.3.2)
                field is included.
            </param>
            <param name="stringsInUnicode">
                If this flag is b'1', the associated string properties are in Unicode with a 2-
                byte terminating null character; if this flag is b'0', string properties are MBCS with a single
                terminating null character, in the code page sent to the server in the EcDoConnectEx method,
                as specified in [MS-OXCRPC] section 3.1.4.1, or the Connect request type 6, as specified in
                [MS-OXCMAPIHTTP] section 2.2.4.1.
            </param>
        </member>
        <member name="T:MsgReader.IReader">
            <summary>
            Interface to make Reader class COM visible
            </summary>
        </member>
        <member name="M:MsgReader.IReader.ExtractToFolderFromCom(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Extract the input msg file to the given output folder
            </summary>
            <param name="inputFile">The msg file</param>
            <param name="outputFolder">The folder where to extract the msg file</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <param name="culture">Sets the culture that needs to be used to localize the output of this class</param>
            <returns>String array containing the message body and its (inline) attachments</returns>
        </member>
        <member name="M:MsgReader.IReader.GetErrorMessage">
            <summary>
            Get the last know error message. When the string is empty there are no errors
            </summary>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Reader">
            <summary>
            This class can be used to read an Outlook msg file and save the message body (in HTML or TEXT format)
            and all it's attachments to an output folder.
            </summary>
        </member>
        <member name="F:MsgReader.Reader._errorMessage">
            <summary>
            Contains an error message when something goes wrong in the <see cref="M:MsgReader.Reader.ExtractToFolderFromCom(System.String,System.String,System.Boolean,System.String)"/> method.
            This message can be retrieved with the GetErrorMessage. This way we keep .NET exceptions inside
            when this code is called from a COM language
            </summary>
        </member>
        <member name="F:MsgReader.Reader._emptyLineWritten">
            <summary>
            Used to keep track if we already did write an empty line
            </summary>
        </member>
        <member name="P:MsgReader.Reader.InstanceId">
            <summary>
                An unique id that can be used to identify the logging of the reader when
                calling the code from multiple threads and writing all the logging to the same file
            </summary>
        </member>
        <member name="M:MsgReader.Reader.#ctor(System.IO.Stream)">
            <summary>
                Creates this object and sets it's needed properties
            </summary>
            <param name="logStream">When set then logging is written to this stream for all extractions. If
            you want a separate log for each extraction then set the log stream on one of the ExtractTo methods</param>
        </member>
        <member name="M:MsgReader.Reader.SetCulture(System.String)">
            <summary>
            Sets the culture that needs to be used to localize the output of this class. 
            Default the current system culture is set. When there is no localization available the
            default will be used. This will be en-US.
            </summary>
            <param name="name">The name of the culture eg. nl-NL</param>
        </member>
        <member name="M:MsgReader.Reader.CheckFileNameAndOutputFolder(System.String,System.String)">
            <summary>
            Checks if the <paramref name="inputFile"/> and <paramref name="outputFolder"/> is valid
            </summary>
            <param name="inputFile"></param>
            <param name="outputFolder"></param>
            <exception cref="T:System.ArgumentNullException">Raised when the <paramref name="inputFile"/> or <paramref name="outputFolder"/> is null or empty</exception>
            <exception cref="T:System.IO.FileNotFoundException">Raised when the <paramref name="inputFile"/> does not exists</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Raised when the <paramref name="outputFolder"/> does not exist</exception>
            <exception cref="T:MsgReader.Exceptions.MRFileTypeNotSupported">Raised when the extension is not .msg or .eml</exception>
        </member>
        <member name="M:MsgReader.Reader.ExtractToStream(System.IO.MemoryStream,System.Boolean)">
            <summary>
            This method reads the <paramref name="inputStream"/> and when the stream is supported it will do the following: <br/>
            - Extract the HTML, RTF (will be converted to html) or TEXT body (in these order) <br/>
            - Puts a header (with the sender, to, cc, etc... (depends on the message type) on top of the body so it looks
              like if the object is printed from Outlook <br/>
            - Reads all the attachments <br/>
            And in the end returns everything to the output stream
            </summary>
            <param name="inputStream">The msg stream</param>
            <param name="hyperlinks">When true hyperlinks are generated for the To, CC, BCC and attachments</param>
        </member>
        <member name="M:MsgReader.Reader.ExtractToFolderFromCom(System.String,System.String,System.Boolean,System.String)">
            <summary>
            This method reads the <paramref name="inputFile"/> and when the file is supported it will do the following: <br/>
            - Extract the HTML, RTF (will be converted to html) or TEXT body (in these order) <br/>
            - Puts a header (with the sender, to, cc, etc... (depends on the message type) on top of the body so it looks 
              like if the object is printed from Outlook <br/>
            - Reads all the attachments <br/>
            And in the end writes everything to the given <paramref name="outputFolder"/>
            </summary>
            <param name="inputFile">The msg file</param>
            <param name="outputFolder">The folder where to save the extracted msg file</param>
            <param name="hyperlinks">When true hyperlinks are generated for the To, CC, BCC and attachments</param>
            <param name="culture"></param>
        </member>
        <member name="M:MsgReader.Reader.ExtractToFolder(System.String,System.String,System.Boolean,System.Nullable{MsgReader.Outlook.MessageType},System.IO.Stream)">
            <summary>
            This method reads the <paramref name="inputFile"/> and when the file is supported it will do the following: <br/>
            - Extract the HTML, RTF (will be converted to html) or TEXT body (in these order) <br/>
            - Puts a header (with the sender, to, cc, etc... (depends on the message type) on top of the body so it looks 
              like if the object is printed from Outlook <br/>
            - Reads all the attachments <br/>
            And in the end writes everything to the given <paramref name="outputFolder"/>
            </summary>
            <param name="inputFile">The msg file</param>
            <param name="outputFolder">The folder where to save the extracted msg file</param>
            <param name="hyperlinks">When true hyperlinks are generated for the To, CC, BCC and attachments</param>
            <param name="messageType">Use this if you get the exception <see cref="T:MsgReader.Exceptions.MRFileTypeNotSupported"/> and
            want to force this method to use a specific <see cref="T:MsgReader.Outlook.MessageType"/> to parse this MSG file. This
            is only used when the file is an MSG file</param>
            <param name="logStream">When set then this will give a logging for each extraction. Use the log stream
            option in the constructor if you want one log for all extractions</param>/// 
            <returns>String array containing the full path to the message body and its attachments</returns>
            <exception cref="T:MsgReader.Exceptions.MRFileTypeNotSupported">Raised when the Microsoft Outlook message type is not supported</exception>
            <exception cref="T:MsgReader.Exceptions.MRInvalidSignedFile">Raised when the Microsoft Outlook signed message is invalid</exception>
            <exception cref="T:System.ArgumentNullException">Raised when the <param ref="inputFile"/> or <param ref="outputFolder"/> is null or empty</exception>
            <exception cref="T:System.IO.FileNotFoundException">Raised when the <param ref="inputFile"/> does not exists</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Raised when the <param ref="outputFolder"/> does not exists</exception>
        </member>
        <member name="M:MsgReader.Reader.ExtractMsgEmailBody(System.IO.Stream,System.Boolean,System.String,System.Boolean)">
            <summary>
            Extract a mail body in memory without saving data on the hard drive.
            </summary>
            <param name="stream">The message as a stream</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <param name="contentType">Content type, e.g. text/html; charset=utf-8</param>
            <param name="withHeaderTable">
            When true, a text/html table with information of To, CC, BCC and attachments will
            be generated and inserted at the top of the text/html document
            </param>
            <returns>Body as string (can be html code, ...)</returns>
        </member>
        <member name="M:MsgReader.Reader.ExtractMsgEmailBody(MsgReader.Outlook.Storage.Message,System.Boolean,System.String,System.Boolean)">
            <summary>
            Extract a mail body in memory without saving data on the hard drive.
            </summary>
            <param name="message">The message as a stream</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <param name="contentType">Content type, e.g. text/html; charset=utf-8</param>
            <param name="withHeaderTable">
            When true, a text/html table with information of To, CC, BCC and attachments will
            be generated and inserted at the top of the text/html document
            </param>
            <returns>Body as string (can be html code, ...)</returns>
        </member>
        <member name="M:MsgReader.Reader.ReplaceFirstOccurence(System.String,System.String,System.String)">
            <summary>
            Method to replace the first occurence of the <paramref name="search"/> string with a
            <paramref name="replace"/> string
            </summary>
            <param name="text"></param>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.ExtractMsgEmailHeader(MsgReader.Outlook.Storage.Message,System.Boolean)">
            <summary>
            Returns the header information from the given e-mail <paramref name="message"/> 
            (not Appointments, Tasks, Contacts and Sticky notes!!)
            </summary>
            <param name="message">The message</param>
            <param name="hyperlinks">When set to true then hyperlinks are generated for To, CC and BCC</param>
        </member>
        <member name="M:MsgReader.Reader.ExtractMsgEmailHeader(MsgReader.Outlook.Storage.Message,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Returns the header information from the given e-mail <paramref name="message"/> 
            (not Appointments, Tasks, Contacts and Sticky notes!!)
            </summary>
            <param name="message">The message</param>
            <param name="htmlBody">Indicates that the message has an HTML body</param>
            <param name="hyperlinks">When set to true then hyperlinks are generated for To, CC and BCC</param>
            <param name="attachmentList">A list with attachments</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.SurroundWithHtml(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Surrounds the String with HTML tags
            </summary>
            <param name="footer"></param>
            <param name="htmlBody"></param>
        </member>
        <member name="M:MsgReader.Reader.WriteHeaderStart(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Writes the start of the header
            </summary>
            <param name="header">The <see cref="T:System.Text.StringBuilder"/> object that is used to write a header</param>
            <param name="htmlBody">When true then html will be written into the <param ref="header"/> otherwise text will be written</param>
        </member>
        <member name="M:MsgReader.Reader.WriteHeaderLine(System.Text.StringBuilder,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Writes a line into the header
            </summary>
            <param name="header">The <see cref="T:System.Text.StringBuilder"/> object that is used to write a header</param>
            <param name="htmlBody">When true then html will be written into the <paramref name="header"/> otherwise text will be written</param>
            <param name="labelPadRightWidth">Used to pad the label size, ignored when <paramref name="htmlBody"/> is true</param>
            <param name="label">The label text that needs to be written</param>
            <param name="text">The text that needs to be written after the <paramref name="label"/></param>
        </member>
        <member name="M:MsgReader.Reader.WriteHeaderLineNoEncoding(System.Text.StringBuilder,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Writes a line into the header without Html encoding the <paramref name="text"/>
            </summary>
            <param name="header">The <see cref="T:System.Text.StringBuilder"/> object that is used to write a header</param>
            <param name="htmlBody">When true then html will be written into the <paramref name="header"/> otherwise text will be written</param>
            <param name="labelPadRightWidth">Used to pad the label size, ignored when <paramref name="htmlBody"/> is true</param>
            <param name="label">The label text that needs to be written</param>
            <param name="text">The text that needs to be written after the <paramref name="label"/></param>
        </member>
        <member name="M:MsgReader.Reader.WriteHeaderEmptyLine(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Writes an empty header line
            </summary>
            <param name="header"></param>
            <param name="htmlBody"></param>
        </member>
        <member name="M:MsgReader.Reader.WriteHeaderEnd(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Writes the end of the header
            </summary>
            <param name="header">The <see cref="T:System.Text.StringBuilder"/> object that is used to write a header</param>
            <param name="htmlBody">When true then html will be written into the <param ref="header"/> otherwise text will be written</param>
        </member>
        <member name="M:MsgReader.Reader.WriteMsgEmail(MsgReader.Outlook.Storage.Message,System.String,System.Boolean)">
            <summary>
            Writes the body of the MSG E-mail to html or text and extracts all the attachments. The
            result is returned as a List of strings
            </summary>
            <param name="message"><see cref="T:MsgReader.Outlook.Storage.Message"/></param>
            <param name="outputFolder">The folder where we need to write the output</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.WriteEmlStreamEmail(MsgReader.Mime.Message,System.Boolean)">
            <summary>
            Writes the body of the MSG E-mail to html or text and extracts all the attachments. The
            result is returned as a List of MemoryStream
            </summary>
            <param name="message">The <see cref="T:MsgReader.Mime.Message"/> object</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.WriteEmlEmail(MsgReader.Mime.Message,System.String,System.Boolean)">
            <summary>
            Writes the body of the EML E-mail to html or text and extracts all the attachments. The
            result is returned as a List of strings
            </summary>
            <param name="message">The <see cref="T:MsgReader.Mime.Message"/> object</param>
            <param name="outputFolder">The folder where we need to write the output</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.WriteMsgAppointment(MsgReader.Outlook.Storage.Message,System.String,System.Boolean)">
            <summary>
            Writes the body of the MSG Appointment to html or text and extracts all the attachments. The
            result is returned as a List of strings
            </summary>
            <param name="message"><see cref="T:MsgReader.Outlook.Storage.Message"/></param>
            <param name="outputFolder">The folder where we need to write the output</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.WriteMsgTask(MsgReader.Outlook.Storage.Message,System.String,System.Boolean)">
            <summary>
            Writes the task body of the MSG Task to html or text and extracts all the attachments. The
            result is return as a List of strings
            </summary>
            <param name="message"><see cref="T:MsgReader.Outlook.Storage.Message"/></param>
            <param name="outputFolder">The folder where we need to write the output</param>
            <param name="hyperlinks">When true then hyperlinks are generated attachments</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.WriteMsgContact(MsgReader.Outlook.Storage.Message,System.String,System.Boolean)">
            <summary>
            Writes the body of the MSG Contact to html or text and extracts all the attachments. The
            result is return as a List of strings
            </summary>
            <param name="message"><see cref="T:MsgReader.Outlook.Storage.Message"/></param>
            <param name="outputFolder">The folder where we need to write the output</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and attachments</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.WriteMsgStickyNote(MsgReader.Outlook.Storage.Message,System.String)">
            <summary>
            Writes the body of the MSG StickyNote to html or text and extracts all the attachments. The
            result is return as a List of strings
            </summary>
            <param name="message"><see cref="T:MsgReader.Outlook.Storage.Message"/></param>
            <param name="outputFolder">The folder where we need to write the output</param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.PreProcessMsgFile(MsgReader.Outlook.Storage.Message,System.Boolean@)">
            <summary>
            This method reads the body of a message object and returns it as an html body
            </summary>
            <param name="message">The <see cref="T:MsgReader.Outlook.Storage.Message"/> object</param>
            <param name="htmlBody">Returns <c>true</c> when an html body is returned, <c>false</c>
            when the body is text based</param>
            <returns>True when the e-Mail has an HTML body</returns>
        </member>
        <member name="M:MsgReader.Reader.PreProcessMsgFile(MsgReader.Outlook.Storage.Message,System.Boolean,System.String,System.String@,System.Boolean@,System.String@,System.String@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            This function pre processes the Outlook MSG <see cref="T:MsgReader.Outlook.Storage.Message"/> object, it tries to find the html (or text) body
            and reads all the available <see cref="T:MsgReader.Outlook.Storage.Attachment"/> objects. When an attachment is inline it tries to
            map this attachment to the html body part when this is available
            </summary>
            <param name="message">The <see cref="T:MsgReader.Outlook.Storage.Message"/> object</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and 
            attachments (when there is an html body)</param>
            <param name="outputFolder">The output folder where all extracted files need to be written</param>
            <param name="fileName">Returns the filename for the html or text body</param>
            <param name="htmlBody">Returns true when the <see cref="T:MsgReader.Outlook.Storage.Message"/> object did contain 
            an HTML body</param>
            <param name="body">Returns the html or text body</param>
            <param name="contactPhotoFileName">Returns the filename of the contact photo. This field will only
            return a value when the <see cref="T:MsgReader.Outlook.Storage.Message"/> object is a <see cref="F:MsgReader.Outlook.MessageType.Contact"/> 
            type and the <see cref="P:MsgReader.Outlook.Storage.Message.Attachments"/> contains an object that has the 
            <param ref="Storage.Message.Attachment.IsContactPhoto"/> set to true, otherwise this field will always be null</param>
            <param name="attachments">Returns a list of names with the found attachment</param>
            <param name="files">Returns all the files that are generated after pre processing the <see cref="T:MsgReader.Outlook.Storage.Message"/> object</param>
        </member>
        <member name="M:MsgReader.Reader.PreProcessEmlStream(MsgReader.Mime.Message,System.Boolean,System.Boolean@,System.String@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.IO.MemoryStream}@)">
            <summary>
            This function pre processes the EML <see cref="T:MsgReader.Mime.Message"/> object, it tries to find the html (or text) body
            and reads all the available <see cref="T:MsgReader.Mime.MessagePart">attachment</see> objects. When an attachment is inline it tries to
            map this attachment to the html body part when this is available
            </summary>
            <param name="message">The <see cref="T:MsgReader.Mime.Message"/> object</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and
            attachments (when there is an html body)</param>
            <param name="htmlBody">Returns true when the <see cref="T:MsgReader.Mime.Message"/> object did contain
            an HTML body</param>
            <param name="body">Returns the html or text body</param>
            <param name="attachments">Returns a list of names with the found attachment</param>
            <param name="attachStreams">Returns all the attachments as a list of streams</param>
        </member>
        <member name="M:MsgReader.Reader.CheckValidAttachment(System.String)">
            <summary>
            Check for Valid Attachment
            </summary>
            <param name="attachmentFileName"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.PreProcessEmlFile(MsgReader.Mime.Message,System.Boolean,System.String,System.String@,System.Boolean@,System.String@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            This function pre processes the EML <see cref="T:MsgReader.Mime.Message"/> object, it tries to find the html (or text) body
            and reads all the available <see cref="T:MsgReader.Mime.MessagePart">attachment</see> objects. When an attachment is inline it tries to
            map this attachment to the html body part when this is available
            </summary>
            <param name="message">The <see cref="T:MsgReader.Mime.Message"/> object</param>
            <param name="hyperlinks">When true then hyperlinks are generated for the To, CC, BCC and 
            attachments (when there is an html body)</param>
            <param name="outputFolder">The output folder where all extracted files need to be written</param>
            <param name="fileName">Returns the filename for the html or text body</param>
            <param name="htmlBody">Returns true when the <see cref="T:MsgReader.Mime.Message"/> object did contain 
            an HTML body</param>
            <param name="body">Returns the html or text body</param>
            <param name="attachments">Returns a list of names with the found attachment</param>
            <param name="files">Returns all the files that are generated after pre processing the <see cref="T:MsgReader.Mime.Message"/> object</param>
        </member>
        <member name="M:MsgReader.Reader.GetErrorMessage">
            <summary>
            Get the last know error message. When the string is empty there are no errors
            </summary>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Reader.InjectHeader(System.String,System.String,System.String)">
            <summary>
            Inject an Outlook style header into the top of the html
            </summary>
            <param name="body"></param>
            <param name="header"></param>
            <param name="contentType">Content type</param>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Rtf.Attribute">
            <summary>
            Rtf attribute
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Attribute.Name">
            <summary>
            attribute's name
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Attribute.Value">
            <summary>
            value
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Attribute.#ctor">
            <summary>
            Initialize instance
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.AttributeList">
            <summary>
            RTF attribute list
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.AttributeList.Clone">
            <summary>
            Clone this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Rtf.BorderStyle">
            <summary>
            Rtf boder style
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.ByteBuffer">
            <summary>
            Binary data buffer
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.ByteBuffer.IntCount">
            <summary>
            Current contains validate bytes
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.ByteBuffer.BsBuffer">
            <summary>
            byte array 
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.Clear">
            <summary>
            Clear object's data
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.Reset">
            <summary>
            Reset current position without clear buffer
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ByteBuffer.Item(System.Int32)">
            <summary>
            Set of get byte at special index which starts with 0
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ByteBuffer.Count">
            <summary>
            Validate bytes count
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.Add(System.Byte)">
            <summary>
            Add a byte
            </summary>
            <param name="b">byte data</param>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.Add(System.Byte[])">
            <summary>
            Add bytes
            </summary>
            <param name="bs">bytes</param>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.Add(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add bytes
            </summary>
            <param name="bs">Bytes</param>
            <param name="startIndex">Start index</param>
            <param name="length">Length</param>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.ToArray">
            <summary>
            Get validate bytes array
            </summary>
            <returns>bytes array</returns>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.GetString(System.Text.Encoding)">
            <summary>
            Convert bytes data to a string
            </summary>
            <param name="encoding">string encoding</param>
            <returns>string data</returns>
        </member>
        <member name="M:MsgReader.Rtf.ByteBuffer.FixBuffer(System.Int32)">
            <summary>
            Fix inner buffer so it can fit to new size of buffer
            </summary>
            <param name="newSize">new size</param>
        </member>
        <member name="T:MsgReader.Rtf.ColorTable">
            <summary>
            Rtf color table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ColorTable.Item(System.Int32)">
            <summary>
            Get color at special index
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ColorTable.CheckValueExistWhenAdd">
            <summary>
            Check color value exist when add color to list
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ColorTable.Count">
            <summary>
            Count the items in the color table
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.ColorTable.GetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Get color at special index , if index out of range , return default color
            </summary>
            <param name="index">index</param>
            <param name="defaultValue">default value</param>
            <returns>color value</returns>
        </member>
        <member name="M:MsgReader.Rtf.ColorTable.Add(System.Drawing.Color)">
            <summary>
            Add color to list
            </summary>
            <param name="c">New color value</param>
        </member>
        <member name="M:MsgReader.Rtf.ColorTable.Remove(System.Drawing.Color)">
            <summary>
            Remove special color
            </summary>
            <param name="c">color value</param>
        </member>
        <member name="M:MsgReader.Rtf.ColorTable.IndexOf(System.Drawing.Color)">
            <summary>
            Get color index
            </summary>
            <param name="c">color</param>
            <returns>index , if not found return -1</returns>
        </member>
        <member name="M:MsgReader.Rtf.ColorTable.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.ColorTable.Write(MsgReader.Rtf.Writer)">
            <summary>
            Write
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:MsgReader.Rtf.ColorTable.Clone">
            <summary>
            Clone the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:MsgReader.Rtf.Consts">
            <summary>
            The RTF keywords as constants
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DocumentFormatInfo">
            <summary>
            RTF Document format information
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Parent">
            <summary>
            If this instance is created by Clone , return the parent instance
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.LeftBorder">
            <summary>
            Display left border line
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.TopBorder">
            <summary>
            Display top border line
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.RightBorder">
            <summary>
            Display right border line
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.BottomBorder">
            <summary>
            Display bottom border line
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.BorderColor">
            <summary>
            Border line color
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.BorderWidth">
            <summary>
            Border line width
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.BorderStyle">
            <summary>
            Border style
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.BorderThickness">
            <summary>
            Border thicknes
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.BorderSpacing">
            <summary>
            Border spacing
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Multiline">
            <summary>
            Word wrap
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.StandTabWidth">
            <summary>
            Standard tab width
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.ParagraphFirstLineIndent">
            <summary>
            indent of first line in a paragraph
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.LeftIndent">
            <summary>
            Indent of wholly paragraph
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Spacing">
            <summary>
            character spacing
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.LineSpacing">
            <summary>
            line spacing
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.MultipleLineSpacing">
            <summary>
            Current line spacing is multiple extractly line spacing.
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.SpacingBefore">
            <summary>
            Spacing before paragrah
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.SpacingAfter">
            <summary>
            Spacing after paragraph
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Align">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.PageBreak">
            <summary>
            Page break
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.NativeLevel">
            <summary>
            Nest level in native rtf document
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.FontName">
            <summary>
            Font name
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.FontSize">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Bold">
            <summary>
            Bold style
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Italic">
            <summary>
            Italic style
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Underline">
            <summary>
            Underline style
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Strikeout">
            <summary>
            Strickout style
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Hidden">
            <summary>
            Hidden text
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.TextColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.BackColor">
            <summary>
            Back color
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Superscript">
            <summary>
            Superscript
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.Subscript">
            <summary>
            Subscript
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.ListId">
            <summary>
            List override id 
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentFormatInfo.NoWwrap">
            <summary>
            No wrap in word
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentFormatInfo.Clone">
            <summary>
            Clone instance
            </summary>
            <returns>new instance</returns>
        </member>
        <member name="T:MsgReader.Rtf.DocumentInfo">
            <summary>
            Document information
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Title">
            <summary>
            Document title
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Subject">
            <summary>
            Document subject
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Author">
            <summary>
            Document author
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Manager">
            <summary>
            Document manager
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Company">
            <summary>
            Document company
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Operator">
            <summary>
            Document operator
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Category">
            <summary>
            Document category
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Keywords">
            <summary>
            Document keywords
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Comment">
            <summary>
            Document comment
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Doccomm">
            <summary>
            Document doccomm
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.HLinkbase">
            <summary>
            Document base
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.EditMinutes">
            <summary>
            Total edit minutes
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Version">
            <summary>
            Document version
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.NumberOfPages">
            <summary>
            Document number of pages
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.NumberOfWords">
            <summary>
            Document number of words
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.NumberOfCharaktersWithWhiteSpace">
            <summary>
            Document number of characters , include whitespace
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.NumberOfCharaktersWithoutWhiteSpace">
            <summary>
            Document number of characters , exclude white space
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.Id">
            <summary>
            Document inner id
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.CreationTime">
            <summary>
            Document Creation time
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.RevisionTime">
            <summary>
            Document modified time
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.PrintTime">
            <summary>
            Document last print time
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentInfo.BackupTime">
            <summary>
            Document last backup time
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentInfo.GetInfo(System.String)">
            <summary>
            get information specify name
            </summary>
            <param name="strName">name</param>
            <returns>value</returns>
        </member>
        <member name="M:MsgReader.Rtf.DocumentInfo.SetInfo(System.String,System.String)">
            <summary>
            set information specify name
            </summary>
            <param name="strName">name</param>
            <param name="strValue">value</param>
        </member>
        <member name="T:MsgReader.Rtf.DocumentWriter">
            <summary>
            RTF document writer
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentWriter.Writer">
            <summary>
            Base writer
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentWriter.Info">
            <summary>
            Information about this Rtf document
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentWriter.FontTable">
            <summary>
            Rtf font table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentWriter.ColorTable">
            <summary>
            Rtf color table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentWriter.CollectionInfo">
            <summary>
            System collectiong document's information , maby generating
            font table and color table , not writting content.
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentWriter.GroupLevel">
            <summary>
            How many nested groups do we have
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DocumentWriter.DebugMode">
            <summary>
            When debug mode is turned on, raw information about the Rtf file is written
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.#ctor">
            <summary>
            Initialize instance
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initialize instance with a text writer
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.#ctor(System.String)">
            <summary>
            Initialize instance from a file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.#ctor(System.IO.Stream)">
            <summary>
            Initialize instance from a stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.Open(System.IO.TextWriter)">
            <summary>
            Open Rtf file from a textwriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.Open(System.String)">
            <summary>
            Open Rtf file from a file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteKeyword(System.String)">
            <summary>
            Write rtf keyword
            </summary>
            <param name="keyword">keyword</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteKeyword(System.String,System.Boolean)">
            <summary>
            Write rtf keyword
            </summary>
            <param name="keyWord"></param>
            <param name="ext">Keyword is external</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteRaw(System.String)">
            <summary>
            Write raw text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteBorderLineDashStyle(System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Write the style that is used by the borderline
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteStartDocument">
            <summary>
            Write the start of the document
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteEndDocument">
            <summary>
            Write the end of the document
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteStartHeader">
            <summary>
            Write start from header
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteEndHeader">
            <summary>
            Write end from header
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteStartFooter">
            <summary>
            Write start from footer
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteEndFooter">
            <summary>
            Write end from footer
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteStartParagraph">
            <summary>
            Write start from paragraph
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteStartParagraph(MsgReader.Rtf.DocumentFormatInfo)">
            <summary>
            Write end of paragraph
            </summary>
            <param name="info">format</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteEndParagraph">
            <summary>
            end write paragraph
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteText(System.String)">
            <summary>
            Write plain text
            </summary>
            <param name="text">text</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteFont(System.Drawing.Font)">
            <summary>
            Write font format
            </summary>
            <param name="font">font</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteStartString(MsgReader.Rtf.DocumentFormatInfo)">
            <summary>
            Start write of formatted text
            </summary>
            <param name="info">format</param>
            <remarks>
            This function must assort with WriteEndString
            </remarks>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteEndString(MsgReader.Rtf.DocumentFormatInfo)">
            <summary>
            End writing of a formatted string. WriteStartString and WriteString have to be called before this method
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteString(System.String,MsgReader.Rtf.DocumentFormatInfo)">
            <summary>
            Write formatted string. Call WriteStartString before this method
            </summary>
            <param name="text">text</param>
            <param name="info">format</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteEndString">
            <summary>
            End write string
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteStartBookmark(System.String)">
            <summary>
            Start write of bookmark
            </summary>
            <param name="strName">bookmark name</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteEndBookmark(System.String)">
            <summary>
            End write of bookmark
            </summary>
            <param name="strName">bookmark name</param>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteLineBreak">
            <summary>
            Write a line break
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DocumentWriter.WriteImage(System.Drawing.Image,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Write image
            </summary>
            <param name="image">Image</param>
            <param name="width">Pixel width</param>
            <param name="height">Pixel height</param>
            <param name="imageData">Image binary data</param>
        </member>
        <member name="T:MsgReader.Rtf.DomBookmark">
            <summary>
            Rtf bookmark
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomBookmark.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomDocument">
            <summary>
            RTF Document
            </summary>
            <remarks>
            This type is the root of RTF Dom tree structure
            </remarks>
        </member>
        <member name="E:MsgReader.Rtf.DomDocument.Progress">
            <summary>
            Progress event
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.DomDocument.DefaultFontName">
            <summary>
            default font name
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.DomDocument._associateFontChartset">
            <summary>
            text encoding of associate font 
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.DomDocument._defaultEncoding">
            <summary>
            The default rtf encoding
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.DomDocument._fontChartset">
            <summary>
            Text encoding of current font
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.#ctor">
            <summary>
            initialize instance
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.FollowingChars">
            <summary>
            Following characters
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.LeadingChars">
            <summary>
            Leading characters
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.RuntimeEncoding">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.FontTable">
            <summary>
            Font table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.ColorTable">
            <summary>
            Color table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.Info">
            <summary>
            Document information
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.Generator">
            <summary>
            Document generator
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.PaperWidth">
            <summary>
            Paper width,unit twips
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.PaperHeight">
            <summary>
            Paper height,unit twips
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.LeftMargin">
            <summary>
            Left margin,unit twips
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.TopMargin">
            <summary>
            Top margin,unit twips
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.RightMargin">
            <summary>
            Right margin,unit twips
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.BottomMargin">
            <summary>
            Bottom margin,unit twips
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.Landscape">
            <summary>
            Landscape
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.HeaderDistance">
            <summary>
            Header's distance from the top of the page( Twips)
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.FooterDistance">
            <summary>
            Footer's distance from the bottom of the page( twips)
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.ClientWidth">
            <summary>
            Client area width,unit twips
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.ChangeTimesNewRoman">
            <summary>
            Convert "Times new roman" to default font when parse rtf content
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.DefaultRowHeight">
            <summary>
            Default row's height, in twips.
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomDocument.HtmlContent">
            <summary>
            HTML content in RTF
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.OnProgress(System.Int32,System.Int32,System.String)">
            <summary>
            Raise progress event
            </summary>
            <param name="max">Progress max value</param>
            <param name="value">Progress value</param>
            <param name="message">Progress message</param>
            <returns>User cancel</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.Load(System.String)">
            <summary>
            Load a rtf file and parse
            </summary>
            <param name="fileName">file name</param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.Load(System.IO.Stream)">
            <summary>
            Load a rtf document from a stream and parse content
            </summary>
            <param name="stream">stream</param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.Load(System.IO.TextReader)">
            <summary>
            Load a rtf document from a text reader and parse content
            </summary>
            <param name="reader">text reader</param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.LoadRtfText(System.String)">
            <summary>
            Load a rtf document from a string in rtf format and parse content
            </summary>
            <param name="rtfText">text</param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.Load(MsgReader.Rtf.Reader,MsgReader.Rtf.DocumentFormatInfo)">
            <summary>
            Parse an RTF element
            </summary>
            <param name="reader"></param>
            <param name="parentFormat"></param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.FixForParagraphs(MsgReader.Rtf.DomElement)">
            <summary>
            Fixes invalid paragraphs
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.FixElements(MsgReader.Rtf.DomElement)">
            <summary>
            Fixes invalid dom elements
            </summary>
            <param name="parentElement"></param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.GetLastElements(System.Boolean)">
            <summary>
            Get the last element
            </summary>
            <param name="checkLockState"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.CompleteParagraph">
            <summary>
            Complete the paragraph
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.AddContentElement(MsgReader.Rtf.DomElement)">
            <summary>
            Add content element
            </summary>
            <param name="newElement"></param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.HexToBytes(System.String)">
            <summary>
            Convert a hex string to a byte array
            </summary>
            <param name="hex">hex string</param>
            <returns>byte array</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.CombineTable(MsgReader.Rtf.DomElement)">
            <summary>
            Combine tables
            </summary>
            <param name="parentElement">The parent element</param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.CreateTable(System.Collections.ArrayList)">
            <summary>
            Create table
            </summary>
            <param name="rows">table rows</param>
            <returns>new table</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadToEndOfGroup(MsgReader.Rtf.Reader)">
            <summary>
            Read and ignore data , until just the end of the current group, preserve the end.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadFontTable(MsgReader.Rtf.Reader)">
            <summary>
            Read font table
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadColorTable(MsgReader.Rtf.Reader)">
            <summary>
            Read color table
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadDocumentInfo(MsgReader.Rtf.Reader)">
            <summary>
            Read document information
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadDateTime(MsgReader.Rtf.Reader)">
            <summary>
            Read datetime
            </summary>
            <param name="reader">reader</param>
            <returns>datetime value</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadDomObject(MsgReader.Rtf.Reader,MsgReader.Rtf.DocumentFormatInfo)">
            <summary>
            Read a rtf emb object
            </summary>
            <param name="reader">reader</param>
            <param name="format">format</param>
            <returns>rtf emb object instance</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadDomField(MsgReader.Rtf.Reader,MsgReader.Rtf.DocumentFormatInfo)">
            <summary>
            Read field
            </summary>
            <param name="reader"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadInnerText(MsgReader.Rtf.Reader,System.Boolean)">
            <summary>
            Read the following plain text in the current level
            </summary>
            <param name="reader">RTF reader</param>
            <param name="deeply">whether read the text in the sub level</param>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadInnerText(MsgReader.Rtf.Reader,MsgReader.Rtf.Token,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Read the following plain text in the current level
            </summary>
            <param name="reader">RTF reader</param>
            <param name="firstToken"></param>
            <param name="deeply">whether read the text in the sub level</param>
            <param name="breakMeetControlWord"></param>
            <param name="htmlMode"></param>
            <returns>text</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomDocument.ReadHtmlContent(MsgReader.Rtf.Reader)">
            <summary>
            Read embedded Html content from rtf
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:MsgReader.Rtf.DomElement">
            <summary>
            RTF dom element (this is the most base element type)
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.DomElement.NativeLevel">
            <summary>
            Native level in RTF document
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomElement.Attributes">
            <summary>
            RTF native attribute
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomElement.Elements">
            <summary>
            child elements list
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomElement.OwnerDocument">
            <summary>
            The document which owned this element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomElement.Parent">
            <summary>
            Parent element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomElement.Locked">
            <summary>
            Whether element is locked , if element is lock , it can not append chidl element
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomElement.AppendChild(MsgReader.Rtf.DomElement)">
            <summary>
            Append child element
            </summary>
            <param name="element">child element</param>
            <returns>index of element</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomElement.SetAttribute(System.String,System.Int32)">
            <summary>
            Set attribute
            </summary>
            <param name="name">name</param>
            <param name="value">value</param>
        </member>
        <member name="T:MsgReader.Rtf.DomElementList">
            <summary>
            RTF element's list
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomElementList.LastElement">
            <summary>
            Get the last element in the list
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomElementList.Item(System.Int32)">
            <summary>
            Get the element at special index
            </summary>
            <param name="index">index</param>
            <returns>element</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomElementList.Add(MsgReader.Rtf.DomElement)">
            <summary>
            Add element
            </summary>
            <param name="element">element</param>
            <returns>index</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomElementList.Insert(System.Int32,MsgReader.Rtf.DomElement)">
            <summary>
            Insert element
            </summary>
            <param name="index">special index</param>
            <param name="element">element</param>
        </member>
        <member name="M:MsgReader.Rtf.DomElementList.IndexOf(MsgReader.Rtf.DomElement)">
            <summary>
            Get the index of special element that starts with 0.
            </summary>
            <param name="element">element</param>
            <returns>index , if not find element , then return -1</returns>
        </member>
        <member name="M:MsgReader.Rtf.DomElementList.Remove(MsgReader.Rtf.DomElement)">
            <summary>
            Remove element
            </summary>
            <param name="node">element</param>
        </member>
        <member name="M:MsgReader.Rtf.DomElementList.ToArray">
            <summary>
            Return element array
            </summary>
            <returns>array</returns>
        </member>
        <member name="T:MsgReader.Rtf.DomField">
            <summary>
            Document field element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomField.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomField.Instructions">
            <summary>
            Instructions
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomField.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomHeader">
            <summary>
            Rtf dom header
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomHeader.Style">
            <summary>
            Header style
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomHeader.HasContentElement">
            <summary>
            If the header has a content element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomFooter.Style">
            <summary>
            Footer style
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomFooter.HasContentElement">
            <summary>
            If the footer has a content element
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomImage">
            <summary>
            Image element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.Base64Data">
            <summary>
            Data as base64 format
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.ScaleX">
            <summary>
            Scale rate at the X coordinate, in percent unit.
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.ScaleY">
            <summary>
            Scale rate at the Y coordinate , in percent unit.
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.DesiredWidth">
            <summary>
            Desired width
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.DesiredHeight">
            <summary>
            Desired height
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.PicType">
            <summary>
            Picture type
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomImage.Format">
            <summary>
            format
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomLineBreak">
            <summary>
            Rtf line element
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomLineBreak.#ctor">
            <summary>
            initialize instance
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomObject">
            <summary>
            RTF Dom object
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.CustomAttributes">
            <summary>
            Custom attributes
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.Content">
            <summary>
            Content as byte array
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.ContentText">
            <summary>
            Content type
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.ScaleX">
            <summary>
            Scaling X factor
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.ScaleY">
            <summary>
            Scaling Y factor
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomObject.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomPageBreak">
            <summary>
            Rtf dom page break
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomPageBreak.#ctor">
            <summary>
            Initialize this instance
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomParagraph">
            <summary>
            Rtf paragraph element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomParagraph.IsTemplateGenerated">
            <summary>
            If it is generated from a template
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomParagraph.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomShape">
            <summary>
            Rtf shape element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShape.Left">
            <summary>
            Left position
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShape.Top">
            <summary>
            Top position
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShape.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShape.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShape.ZIndex">
            <summary>
            Z index
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShape.Id">
            <summary>
            Shape id
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShape.ExtAttrbutes">
            <summary>
            Ext attribute
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomShapeGroup">
            <summary>
            Rtf shape group
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomShapeGroup.ExtAttrbutes">
            <summary>
            External attributes
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomTable">
            <summary>
            Rtf table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTable.Columns">
            <summary>
            column list
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomTableCell">
            <summary>
            Dom table cell 
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.RowSpan">
            <summary>
            Row span
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.ColSpan">
            <summary>
            Col span
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.PaddingLeft">
            <summary>
            Left padding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.RuntimePaddingLeft">
            <summary>
            Left padding in fact
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.PaddingTop">
            <summary>
            Top padding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.RuntimePaddingTop">
            <summary>
            Top padding in fact
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.PaddingRight">
            <summary>
            Right padding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.RuntimePaddingRight">
            <summary>
            Right padding in fact
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.PaddingBottom">
            <summary>
            Bottom padding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.RuntimePaddingBottom">
            <summary>
            Bottom padding in fact
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.VerticalAlignment">
            <summary>
            Vertial alignment
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.Multiline">
            <summary>
            Allow multiline
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.Left">
            <summary>
            Left position
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableCell.OverrideCell">
            <summary>
            Cell merged by another cell which this property specified
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomTableCell.#ctor">
            <summary>
            Initialize instance
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomTableColumn">
            <summary>
            Rtf table column
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableColumn.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomTableRow">
            <summary>
            Table row
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.CellSettings">
            <summary>
            Cell settings
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.Level">
            <summary>
            Document level
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.RowIndex">
            <summary>
            row index
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.IsLastRow">
            <summary>
            Is the last row
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.Header">
            <summary>
            Is header row
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.PaddingLeft">
            <summary>
            Padding left
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.PaddingTop">
            <summary>
            Top padding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.PaddingRight">
            <summary>
            Right padding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.PaddingBottom">
            <summary>
            Bottom padding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomTableRow.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.DomText">
            <summary>
            Rtf text element
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomText.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomText.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.DomText.InnerText">
            <summary>
            Inner text
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.DomText.#ctor">
            <summary>
            Initialize instance
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.ElementContainer">
            <summary>
            RTF element container
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ElementContainer.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.RtfAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfAlignment.Left">
            <summary>
            left
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfAlignment.Center">
            <summary>
            center
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfAlignment.Right">
            <summary>
            right
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfAlignment.Justify">
            <summary>
            justify
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Emfblip">
            <summary>
            Source of the picture is an EMF (enhanced metafile).
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Pngblip">
            <summary>
            Source of the picture is a PNG.
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Jpegblip">
            <summary>
            Source of the picture is a JPEG.
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Macpict">
            <summary>
            ource of the picture is QuickDraw.
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Pmmetafile">
            <summary>
            Source of the picture is an OS/2 metafile. The N argument identifies the metafile type. The N values are described in the \pmmetafile table further on in this section.
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Wmetafile">
            <summary>
            Source of the picture is a Windows metafile. The N argument identifies the metafile type (the default type is 1).
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Dibitmap">
            <summary>
            Source of the picture is a Windows device-independent bitmap. The N argument identifies the bitmap type, which must equal 0.
            The information to be included in RTF from a Windows device-independent bitmap is the concatenation of the BITMAPINFO structure followed by the actual pixel data.
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfPictureType.Wbitmap">
            <summary>
            Source of the picture is a Windows device-dependent bitmap. The N argument identifies the bitmap type (must equal 0).
            The information to be included in RTF from a Windows device-dependent bitmap is the result of the GetBitmapBits function.
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.RtfTokenType">
            <summary>
            Rtf token type
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.RtfDomFieldMethod">
            <summary>
            Rtf dom field method
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfNodeType.Root">
            <summary>
            root
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfNodeType.Keyword">
            <summary>
            keyword, etc /marginl
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfNodeType.ExtKeyword">
            <summary>
            external keyword node , etc. /*/keyword
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfNodeType.Control">
            <summary>
            control
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfNodeType.Text">
            <summary>
            plain text
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfNodeType.Group">
            <summary>
            group , etc . { }
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfNodeType.None">
            <summary>
            nothing
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.RtfVerticalAlignment">
            <summary>
            Rtf vertical alignment
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfVerticalAlignment.Top">
            <summary>
            top alignment
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfVerticalAlignment.Middle">
            <summary>
            middle alignment
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfVerticalAlignment.Bottom">
            <summary>
            bottom alignment
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.Arabic">
            <summary>Arabic (1, 2, 3)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.UppercaseRomanNumeral">
            <summary>Uppercase Roman numeral (I, II, III)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.LowercaseRomanNumeral">
            <summary>Lowercase Roman numeral (i, ii, iii)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.UppercaseLetter">
            <summary>Uppercase letter (A, B, C)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.LowercaseLetter">
            <summary>Lowercase letter (a, b, c)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.OrdinalNumber">
            <summary>Ordinal number (1st, 2nd, 3rd)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.CardinalTextNumber">
            <summary>Cardinal text number (One, Two Three)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.OrdinalTextNumber">
            <summary>Ordinal text number (First, Second, Third)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KanjiNumberingWithoutTheDigitCharacter">
            <summary>Kanji numbering without the digit character (*dbnum1)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KanjiNumberingWithTheDigitCharacte">
            <summary>Kanji numbering with the digit character (*dbnum2)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType._46_phonetic_double_byte_katakana_characters_aiueo_dbchar">
            <summary>46 phonetic double_byte katakana characters (*aiueo*dbchar)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType._46_phonetic_double_byte_katakana_characters_iroha_dbchar">
            <summary>46 phonetic double_byte katakana characters (*iroha*dbchar)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType._46_phonetic_katakana_characters_in_aiueo_order">
            <summary>46 phonetic katakana characters in "aiueo" order (*aiueo)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType._46_phonetic_katakana_characters_in_iroha_order">
            <summary>46 phonetic katakana characters in "iroha" order (*iroha)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.DoubleByteCharacter">
            <summary>Double_byte character</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.SingleByteCharacter">
            <summary>Single_byte character</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KanjiNumbering3">
            <summary>Kanji numbering 3 (*dbnum3)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KanjiNumbering4">
            <summary>Kanji numbering 4 (*dbnum4)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.CircleNumbering">
            <summary>Circle numbering (*circlenum)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.DoubleByteArabicNumbering">
            <summary>Double_byte Arabic numbering</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ArabicWithLeadingZero">
            <summary>Arabic with leading zero (01, 02, 03, ..., 10, 11)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.Bullet">
            <summary>Bullet (no number at all)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KoreanNumbering2">
            <summary>Korean numbering 2 (*ganada)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KoreanNumbering1">
            <summary>Korean numbering 1 (*chosung)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseNumbering1">
            <summary>Chinese numbering 1 (*gb1)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseNumbering2">
            <summary>Chinese numbering 2 (*gb2)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseNumbering3">
            <summary>Chinese numbering 3 (*gb3)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseNumbering4">
            <summary>Chinese numbering 4 (*gb4)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseZodiacNumbering1">
            <summary>Chinese Zodiac numbering 1 (* zodiac1)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseZodiacNumbering2">
            <summary>Chinese Zodiac numbering 2 (* zodiac2) </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseZodiacNumbering3">
            <summary>Chinese Zodiac numbering 3 (* zodiac3)</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.TaiwaneseDoubleByteNumbering1">
            <summary>Taiwanese double_byte numbering 1</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.TaiwaneseDoubleByteNumbering2">
            <summary>Taiwanese double_byte numbering 2</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.TaiwaneseDoubleByteNumbering3">
            <summary>Taiwanese double_byte numbering 3</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.TaiwaneseDoubleByteNumbering4">
            <summary>Taiwanese double_byte numbering 4</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseDoubleByteNumbering1">
            <summary>Chinese double_byte numbering 1</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseDoubleByteNumbering2">
            <summary>Chinese double_byte numbering 2</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseDoubleByteNumbering3">
            <summary>Chinese double_byte numbering 3</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ChineseDoubleByteNumbering4">
            <summary>Chinese double_byte numbering 4</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KoreanDoubleByteNumbering1">
            <summary>Korean double_byte numbering 1</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KoreanDoubleByteNumbering2">
            <summary>Korean double_byte numbering 2</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KoreanDoubleByteNumbering3">
            <summary>Korean double_byte numbering 3</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.KoreanDoubleByteNumbering4">
            <summary>Korean double_byte numbering 4</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.HebrewNonStandardDecimal">
            <summary>Hebrew non_standard decimal </summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ArabicAlifBaTah">
            <summary>Arabic Alif Ba Tah</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.HebrewBiblicalStandard">
            <summary>Hebrew Biblical standard</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.ArabicAbjadStyle">
            <summary>Arabic Abjad style</summary>
        </member>
        <member name="F:MsgReader.Rtf.RtfLevelNumberType.NoNumber">
            <summary>No number</summary>
        </member>
        <member name="T:MsgReader.Rtf.Table">
            <summary>
            Font table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Table.Item(System.Int32)">
            <summary>
            Get font information special index
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Table.Item(System.String)">
            <summary>
            Get font object special name
            </summary>
            <param name="fontName">font name</param>
            <returns>font object</returns>
        </member>
        <member name="M:MsgReader.Rtf.Table.GetFontName(System.Int32)">
            <summary>
            Get font object special font index
            </summary>
            <param name="fontIndex">Font index</param>
            <returns>font object</returns>
        </member>
        <member name="M:MsgReader.Rtf.Table.Add(System.String)">
            <summary>
                Add font
            </summary>
            <param name="name">Font name</param>
        </member>
        <member name="M:MsgReader.Rtf.Table.Add(System.String,System.Text.Encoding)">
            <summary>
                Add font
            </summary>
            <param name="name">font name</param>
            <param name="encoding"></param>
        </member>
        <member name="M:MsgReader.Rtf.Table.Add(System.Int32,System.String,System.Text.Encoding)">
            <summary>
                Add font
            </summary>
            <param name="index">special font index</param>
            <param name="name">font name</param>
            <param name="encoding"></param>
        </member>
        <member name="M:MsgReader.Rtf.Table.Add(MsgReader.Rtf.Font)">
            <summary>
                Add font
            </summary>
            <param name="font">Font object</param>
        </member>
        <member name="M:MsgReader.Rtf.Table.Remove(System.String)">
            <summary>
            Remove font
            </summary>
            <param name="name">font name</param>
        </member>
        <member name="M:MsgReader.Rtf.Table.IndexOf(System.String)">
            <summary>
            Get font index special font name
            </summary>
            <param name="name">font name</param>
            <returns>font index</returns>
        </member>
        <member name="M:MsgReader.Rtf.Table.Write(MsgReader.Rtf.Writer)">
            <summary>
            Write font table rtf
            </summary>
            <param name="writer">rtf text writer</param>
        </member>
        <member name="M:MsgReader.Rtf.Table.Clone">
            <summary>
            Clone object
            </summary>
            <returns>new object</returns>
        </member>
        <member name="T:MsgReader.Rtf.Font">
            <summary>
            Rtf font information
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Font.Index">
            <summary>
            Font index
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Font.Name">
            <summary>
                font name
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Font.Charset">
            <summary>
            Charset
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Font.Encoding">
            <summary>
            Encoding
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Font.#ctor(System.Int32,System.String)">
            <summary>
            Initialize instance
            </summary>
            <param name="index">font index</param>
            <param name="name">font name</param>
        </member>
        <member name="T:MsgReader.Rtf.AnsiEncoding">
            <summary>
                Internal encoding for ansi
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.LayerInfo">
            <summary>
            Rtf raw lay
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.LayerInfo.CheckUcValueCount">
            <summary>
            Checks if Uc value count is greater then zero
            </summary>
            <returns>True when greater</returns>
        </member>
        <member name="T:MsgReader.Rtf.Lex">
            <summary>
                Rtf lex
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Lex.#ctor(System.IO.TextReader)">
            <summary>
                Initialize instance
            </summary>
            <param name="reader">reader</param>
        </member>
        <member name="M:MsgReader.Rtf.Lex.PeekTokenType">
            <summary>
                Peek to see what kind of token we have
            </summary>
            <returns>TokenType</returns>
        </member>
        <member name="M:MsgReader.Rtf.Lex.NextToken">
            <summary>
                Read next token
            </summary>
            <returns>token</returns>
        </member>
        <member name="M:MsgReader.Rtf.Lex.ParseKeyword(MsgReader.Rtf.Token)">
            <summary>
                Parse keyword from token
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:MsgReader.Rtf.Lex.ParseText(System.Int32,MsgReader.Rtf.Token)">
            <summary>
                Parse text after char
            </summary>
            <param name="c"></param>
            <param name="token"></param>
        </member>
        <member name="M:MsgReader.Rtf.Lex.ClearWhiteSpace">
            <summary>
                Read chars until another non white space char is found
            </summary>
            <returns></returns>
        </member>
        <member name="P:MsgReader.Rtf.ListOverride.ListOverrideCount">
            <summary>
            List override count
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ListOverride.Id">
            <summary>
            Internal Id
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.ListTable">
            <summary>
            Rtf list table
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.RtfList">
            <summary>
            Rtf list table item
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.Node">
            <summary>
            RTF parser node
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.Parent">
            <summary>
            parent node
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.OwnerDocument">
            <summary>
            raw document which owner this node
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.Keyword">
            <summary>
            Keyword
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.HasParameter">
            <summary>
            Whether this node has parameters
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.Parameter">
            <summary>
            Paramter value
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.Nodes">
            <summary>
            Child nodes
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.Type">
            <summary>
            node type
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.PreviousNode">
            <summary>
            Previous node in parent nodes list
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Node.NextNode">
            <summary>
            Next node in parent nodes list
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Node.#ctor">
            <summary>
            initialize instance
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Node.Write(MsgReader.Rtf.Writer)">
            <summary>
            Write to rtf document
            </summary>
            <param name="writer">RTF text writer</param>
        </member>
        <member name="T:MsgReader.Rtf.NodeGroup">
            <summary>
            RTF node group
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.NodeGroup.InternalNodes">
            <summary>
            child node list
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.NodeGroup.#ctor">
            <summary>
            initialize instance
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.NodeGroup.Nodes">
            <summary>
            child node list
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.NodeGroup.FirstNode">
            <summary>
            first child node
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.NodeGroup.GetAllNodes(System.Boolean)">
            <summary>
            Get all child node deeply
            </summary>
            <param name="includeGroupNode">contains group type node</param>
            <returns>child nodes list</returns>
        </member>
        <member name="M:MsgReader.Rtf.NodeGroup.Write(MsgReader.Rtf.Writer)">
            <summary>
            Write content to rtf document
            </summary>
            <param name="writer">RTF text writer</param>
        </member>
        <member name="M:MsgReader.Rtf.NodeGroup.SearchKey(System.String,System.Boolean)">
            <summary>
            Search child node with special keyword
            </summary>
            <param name="key">Special keyword</param>
            <param name="deeply">Whether search deeply</param>
            <returns>Found node</returns>
        </member>
        <member name="M:MsgReader.Rtf.NodeGroup.AppendChild(MsgReader.Rtf.Node)">
            <summary>
            Append child node
            </summary>
            <param name="node">node</param>
        </member>
        <member name="M:MsgReader.Rtf.NodeGroup.RemoveChild(MsgReader.Rtf.Node)">
            <summary>
            Remove child
            </summary>
            <param name="node">node</param>
        </member>
        <member name="M:MsgReader.Rtf.NodeGroup.InsertNode(System.Int32,MsgReader.Rtf.Node)">
            <summary>
            Insert node
            </summary>
            <param name="index">index</param>
            <param name="node">node</param>
        </member>
        <member name="T:MsgReader.Rtf.NodeList">
            <summary>
            RTF node list
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.NodeList.Item(System.Int32)">
            <summary>
            Get node by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MsgReader.Rtf.NodeList.Item(System.String)">
            <summary>
            Get node by keyword
            </summary>
            <param name="keyWord"></param>
            <returns></returns>
        </member>
        <member name="P:MsgReader.Rtf.NodeList.Item(System.Type)">
            <summary>
            Get node by type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MsgReader.Rtf.NodeList.Text">
            <summary>
            Get the node text
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.NodeList.GetParameter(System.String,System.Int32)">
            <summary>
            Get node's parameter value special keyword, if it is not found , return default value.
            </summary>
            <param name="key">Keyword</param>
            <param name="defaultValue">Default value</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:MsgReader.Rtf.NodeList.ContainsKey(System.String)">
            <summary>
            Detect whether the node exist in this list
            </summary>
            <param name="key">keyword</param>
            <returns>True or false</returns>
        </member>
        <member name="M:MsgReader.Rtf.NodeList.IndexOf(MsgReader.Rtf.Node)">
            <summary>
            Get index of node in this list
            </summary>
            <param name="node">node</param>
            <returns>index , if node does no in this list , return -1</returns>
        </member>
        <member name="M:MsgReader.Rtf.NodeList.AddRange(MsgReader.Rtf.NodeList)">
            <summary>
            Add node list range
            </summary>
            <param name="nodeList">A node list</param>
        </member>
        <member name="M:MsgReader.Rtf.NodeList.Add(MsgReader.Rtf.Node)">
            <summary>
            Add node
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:MsgReader.Rtf.NodeList.Remove(MsgReader.Rtf.Node)">
            <summary>
            Remove node
            </summary>
            <param name="node">Node</param>
        </member>
        <member name="M:MsgReader.Rtf.NodeList.Insert(System.Int32,MsgReader.Rtf.Node)">
            <summary>
            Insert node
            </summary>
            <param name="index">Index</param>
            <param name="node">Node</param>
        </member>
        <member name="T:MsgReader.Rtf.ProgressEventHandler">
            <summary>
            Progress event handler type
            </summary>
            <param name="sender">sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:MsgReader.Rtf.ProgressEventArgs">
            <summary>
            Progress event arguments
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ProgressEventArgs.MaxValue">
            <summary>
            Progress max value
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ProgressEventArgs.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ProgressEventArgs.Message">
            <summary>
            Progress message
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.ProgressEventArgs.Cancel">
            <summary>
            Cancel operation
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.RawDocument">
            <summary>
            RTF raw document
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RawDocument._associatedFontChartset">
            <summary>
            Text encoding for current associated font
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RawDocument.InternalColorTable">
            <summary>
            Color table
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RawDocument._fontChartset">
            <summary>
            Text encoding for current font
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RawDocument.InternalFontTable">
            <summary>
            font table
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.RawDocument.InternalInfo">
            <summary>
            document information
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.RawDocument.OwnerDocument">
            <summary>
            The owner of this document
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.RawDocument.Parent">
            <summary>
            No parent node
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.RawDocument.ColorTable">
            <summary>
            color table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.RawDocument.FontTable">
            <summary>
            font table
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.RawDocument.Info">
            <summary>
            Document information
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.RawDocument.Encoding">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.RawDocument.RuntimeEncoding">
            <summary>
            Current text encoding
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.#ctor">
            <summary>
            Initialize instance
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.ReadFontTable(MsgReader.Rtf.NodeGroup)">
            <summary>
            Read font table
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.ReadColorTable(MsgReader.Rtf.NodeGroup)">
            <summary>
            Read color table
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.ReadDocumentInfo(MsgReader.Rtf.NodeGroup)">
            <summary>
            Read document information
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.ReadDateTime(MsgReader.Rtf.Node)">
            <summary>
            Read date and time from node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.LoadRtfText(System.String)">
            <summary>
            Load rtf from string
            </summary>
            <param name="text">Text in rtf format</param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.Load(System.String)">
            <summary>
            Load rtf from file
            </summary>
            <param name="fileName">file name</param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.Load(System.IO.TextReader)">
            <summary>
            Load rtf from text reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.Load(MsgReader.Rtf.Reader)">
            <summary>
            Load rtf from rtf reader
            </summary>
            <param name="reader">RTF text reader</param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.Write(MsgReader.Rtf.Writer)">
            <summary>
            Write rtf
            </summary>
            <param name="writer">RTF writer</param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.Save(System.String)">
            <summary>
            Save rtf to a file
            </summary>
            <param name="fileName">file name</param>
        </member>
        <member name="M:MsgReader.Rtf.RawDocument.Save(System.IO.Stream)">
            <summary>
            Save rtf to a stream
            </summary>
            <param name="stream">stream</param>
        </member>
        <member name="T:MsgReader.Rtf.Reader">
            <summary>
            Rtf reader
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.CurrentToken">
            <summary>
            Current token
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.Format">
            <summary>
            The <see cref="T:MsgReader.Rtf.DocumentFormatInfo"/>
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.TokenType">
            <summary>
            Current token's type
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.Keyword">
            <summary>
            Current keyword
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.HasParam">
            <summary>
            If current token has a parameter
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.Parameter">
            <summary>
            Current parameter
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.FirstTokenInGroup">
            <summary>
            Current token is the first token in owner group
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.LastToken">
            <summary>
            Lost token
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.TokenCount">
            <summary>
            Total of this object handle tokens
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.ParsingHighLowSurrogate">
            <summary>
            When set to <c>true</c> then we are parsing an RTF unicode
            high - low surrogate
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.HighSurrogateValue">
            <summary>
            When <see cref="P:MsgReader.Rtf.Reader.ParsingHighLowSurrogate"/> is set to <c>true</c>
            then this will containt the high surrogate value when we are
            parsing the low surrogate value
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Reader.CurrentLayerInfo">
            <summary>
            <see cref="T:MsgReader.Rtf.LayerInfo"/>
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Reader.#ctor">
            <summary>
            Initialize instance
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Reader.#ctor(System.String)">
            <summary>
            Initialize instance from file
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Reader.#ctor(System.IO.Stream)">
            <summary>
            Initialize instance from stream
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Reader.#ctor(System.IO.TextReader)">
            <summary>
            Initialize instance from text reader
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Reader.Dispose">
            <summary>
            Dispose this object
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Reader.LoadRtfFile(System.String)">
            <summary>
            Load rtf from file
            </summary>
            <param name="fileName">spcial file name</param>
            <returns>is operation successful</returns>
        </member>
        <member name="M:MsgReader.Rtf.Reader.LoadReader(System.IO.TextReader)">
            <summary>
            Load rtf from reader
            </summary>
            <param name="reader">text reader</param>
            <returns>is operation successful</returns>
        </member>
        <member name="M:MsgReader.Rtf.Reader.LoadRtfText(System.String)">
            <summary>
            Load rtf from string
            </summary>
            <param name="text">RTF text</param>
            <returns>is operation successful</returns>
        </member>
        <member name="M:MsgReader.Rtf.Reader.Close">
            <summary>
            Close the inner reader
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Reader.PeekTokenType">
            <summary>
            Get next token type
            </summary>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Rtf.Reader.ReadToken">
            <summary>
            Read token
            </summary>
            <returns>token read</returns>
        </member>
        <member name="M:MsgReader.Rtf.Reader.ReadToEndOfGroup">
            <summary>
            Read and ignore data , until just the end of the current group, preserve the end.
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.StringAttribute.Name">
            <summary>
            Name of the attribute
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.StringAttribute.Value">
            <summary>
            Value of the attribute
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.StringAttributeCollection.Add(MsgReader.Rtf.StringAttribute)">
            <summary>
            Add's an item to the list and returns the index
            </summary>
            <param name="stringAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:MsgReader.Rtf.StringAttributeCollection.Remove(MsgReader.Rtf.StringAttribute)">
            <summary>
            Removes an item from the list
            </summary>
            <param name="stringAttribute"></param>
        </member>
        <member name="T:MsgReader.Rtf.TextContainer">
            <summary>
            Rtf plain text container
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.TextContainer.Document">
            <summary>
            Owner document
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.TextContainer.HasContent">
            <summary>
            Check if this container has some text
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.TextContainer.Text">
            <summary>
            text value
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.TextContainer.#ctor(MsgReader.Rtf.DomDocument)">
            <summary>
            Initialize instance
            </summary>
            <param name="document">owner document</param>
        </member>
        <member name="M:MsgReader.Rtf.TextContainer.Append(System.String)">
            <summary>
            Append text content
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MsgReader.Rtf.TextContainer.Accept(MsgReader.Rtf.Token,MsgReader.Rtf.Reader)">
            <summary>
            Accept rtf token
            </summary>
            <param name="token">RTF token</param>
            <param name="reader"></param>
            <returns>Is accept it?</returns>
        </member>
        <member name="M:MsgReader.Rtf.TextContainer.Clear">
            <summary>
            Clear value
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.TextContainer.CheckBuffer">
            <summary>
            Check if buffer still contains any text
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.Token">
            <summary>
            Rtf token type
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Token.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Token.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Token.HasParam">
            <summary>
            True when the token has a param
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Token.Param">
            <summary>
            Param value
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Token.Parent">
            <summary>
            Parent token
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Token.IsTextToken">
            <summary>
            True when the token contains text
            </summary>
        </member>
        <member name="T:MsgReader.Rtf.Util">
            <summary>
            Some utility functions
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Util.HasContentElement(MsgReader.Rtf.DomElement)">
            <summary>
            Checks if the root element has content elemens
            </summary>
            <param name="rootElement"></param>
            <returns>True when there are content elements</returns>
        </member>
        <member name="T:MsgReader.Rtf.Writer">
            <summary>
            Rtw writer, use it to write a new Rtf document
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.Writer.Hexs">
            <summary>
            Hex characters
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.Writer._textWriter">
            <summary>
            Inner text writer
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.Writer._unicode">
            <summary>
            Text encoding
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.Writer._lineHead">
            <summary>
                current line head
            </summary>
        </member>
        <member name="F:MsgReader.Rtf.Writer._position">
            <summary>
            Current position
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Writer.Indent">
            <summary>
            Whether output rtf code with indent style
            </summary>
            <remarks>
            In rtf formation , recommend do not use indent . this option just to debugger ,
            in software development , use this option can genereate indented rtf code friendly to read,
            but after debug , recommend clear this option and set this attribute = false.
            </remarks>
        </member>
        <member name="P:MsgReader.Rtf.Writer.IndentString">
            <summary>
            String used to indent
            </summary>
        </member>
        <member name="P:MsgReader.Rtf.Writer.GroupLevel">
            <summary>
            Level of nested groups
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Writer.#ctor(System.IO.TextWriter)">
            <summary>
            Initialize instance
            </summary>
            <param name="textWriter">text writer</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.#ctor(System.String)">
            <summary>
            Initialize instance
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteGroup(System.String)">
            <summary>
            Write completed group wich one keyword
            </summary>
            <param name="keyWord">keyword</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteStartGroup">
            <summary>
            Begin write group
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteEndGroup">
            <summary>
            End write group
            </summary>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteRaw(System.String)">
            <summary>
            Write raw text
            </summary>
            <param name="text">text</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteKeyword(System.String)">
            <summary>
            Write keyword
            </summary>
            <param name="keyword">keyword</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteKeyword(System.String,System.Boolean)">
            <summary>
            Write keyword
            </summary>
            <param name="keyword">keyword</param>
            <param name="external">True if it is an external keyword</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteText(System.String)">
            <summary>
            Write plain text
            </summary>
            <param name="text">Text</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteText(System.String,System.Boolean)">
            <summary>
            Write plain text, with the option to automaticly add a white space character
            </summary>
            <param name="text">Text</param>
            <param name="autoAddWhitespace">Write a white space automatic</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteBytes(System.Byte[])">
            <summary>
            Write binary data
            </summary>
            <param name="bytes">Binary data</param>
        </member>
        <member name="M:MsgReader.Rtf.Writer.WriteByte(System.Byte)">
            <summary>
            Write a byte
            </summary>
            <param name="b">byte</param>
        </member>
    </members>
</doc>
