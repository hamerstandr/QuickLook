<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaInfo.Wrapper</name>
    </assembly>
    <members>
        <member name="T:MediaInfo.Builder.AudioStreamBuilder">
            <summary>
            Describes method to build audio stream.
            </summary>
        </member>
        <member name="P:MediaInfo.Builder.AudioStreamBuilder.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.Builder.AudioStreamBuilder.StreamKind">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.Builder.ChapterStreamBuilder">
            <summary>
            Describes method to build chapter stream.
            </summary>
        </member>
        <member name="P:MediaInfo.Builder.ChapterStreamBuilder.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.Builder.ChapterStreamBuilder.StreamKind">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.Builder.IMediaBuilder`1">
            <summary>
            Describes media builder interface
            </summary>
            <typeparam name="TStream">The type of the stream.</typeparam>
        </member>
        <member name="M:MediaInfo.Builder.IMediaBuilder`1.Build">
            <summary>
            Builds media stream.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MediaInfo.Builder.LanguageMediaStreamBuilder`1">
            <summary>
            Describes base methods to build media stream with language
            </summary>
            <typeparam name="TStream">The type of the stream.</typeparam>
        </member>
        <member name="M:MediaInfo.Builder.LanguageMediaStreamBuilder`1.#ctor(MediaInfo.MediaInfo,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.Builder.LanguageMediaStreamBuilder`1"/> class.
            </summary>
            <param name="info">The media info object.</param>
            <param name="number">The stream number.</param>
            <param name="position">The stream position.</param>
        </member>
        <member name="M:MediaInfo.Builder.LanguageMediaStreamBuilder`1.Build">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.Builder.MediaStreamBuilder`1">
            <summary>
            Describes base methods to build media stream
            </summary>
            <typeparam name="TStream">The type of the stream.</typeparam>
        </member>
        <member name="T:MediaInfo.Builder.MediaStreamBuilder`1.ParseDelegate`1">
            <summary>
            Converts the string representation of a value to specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source value.</param>
            <param name="result">The result.</param>
            <returns><b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:MediaInfo.Builder.MediaStreamBuilder`1.#ctor(MediaInfo.MediaInfo,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.Builder.MediaStreamBuilder`1"/> class.
            </summary>
            <param name="info">The media info object.</param>
            <param name="number">The stream number.</param>
            <param name="position">The stream position.</param>
        </member>
        <member name="P:MediaInfo.Builder.MediaStreamBuilder`1.StreamPosition">
            <summary>
            Gets the stream position.
            </summary>
            <value>
            The stream position.
            </value>
        </member>
        <member name="P:MediaInfo.Builder.MediaStreamBuilder`1.StreamNumber">
            <summary>
            Gets the logical stream number.
            </summary>
            <value>
            The logical stream number.
            </value>
        </member>
        <member name="P:MediaInfo.Builder.MediaStreamBuilder`1.Kind">
            <summary>
            Gets the kind of media stream.
            </summary>
            <value>
            The kind of media stream.
            </value>
        </member>
        <member name="P:MediaInfo.Builder.MediaStreamBuilder`1.StreamKind">
            <summary>
            Gets the kind of the stream.
            </summary>
            <value>
            The kind of the stream.
            </value>
        </member>
        <member name="P:MediaInfo.Builder.MediaStreamBuilder`1.Info">
            <summary>
            Gets the media info object to access to low-level functions.
            </summary>
            <value>
            The media info object.
            </value>
        </member>
        <member name="M:MediaInfo.Builder.MediaStreamBuilder`1.Build">
            <inheritdoc />
        </member>
        <member name="M:MediaInfo.Builder.MediaStreamBuilder`1.Get``1(System.String,MediaInfo.Builder.MediaStreamBuilder{`0}.ParseDelegate{``0},System.Func{System.String,System.String})">
            <summary>
            Gets the property <typeparamref name="T">value</typeparamref> by the <paramref name="parameter">property name</paramref>.
            </summary>
            <param name="parameter">The stream parameter name.</param>
            <param name="convert"></param>
            <param name="extractResult">The manual extract result function.</param>
            <returns>Returns property <typeparamref name="T">value</typeparamref> of specified stream <paramref name="parameter">property name</paramref>.</returns>
        </member>
        <member name="M:MediaInfo.Builder.MediaStreamBuilder`1.Get``1(System.Int32,MediaInfo.InfoKind,MediaInfo.Builder.MediaStreamBuilder{`0}.ParseDelegate{``0},System.Func{System.String,System.String})">
            <summary>
            Gets the property <typeparamref name="T">value</typeparamref> by the <paramref name="parameter">property index</paramref>.
            </summary>
            <param name="parameter">The stream property index.</param>
            <param name="infoKind">The kind of property value</param>
            <param name="convert"></param>
            <param name="extractResult">The manual extract result function.</param>
            <returns>Returns property <typeparamref name="T">value</typeparamref> of specified stream <paramref name="parameter">property index</paramref>.</returns>
        </member>
        <member name="M:MediaInfo.Builder.MediaStreamBuilder`1.Get(System.String,System.Func{System.String,System.String})">
            <summary>
            Gets the specified property value by <paramref name="parameter">property name</paramref>.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="extractResult">The extract result.</param>
            <returns>Returns property value by name. If property does not defined will return <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:MediaInfo.Builder.MediaStreamBuilder`1.Get(System.Int32,MediaInfo.InfoKind,System.Func{System.String,System.String})">
            <summary>
            Gets the specified property value by the <paramref name="parameter">property index</paramref>.
            </summary>
            <param name="parameter">The property index.</param>
            <param name="infoKind">The kind of property value</param>
            <param name="extractResult">The extract result.</param>
            <returns>Returns property value by name. If property does not defined will return <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="T:MediaInfo.Builder.MenuStreamBuilder">
            <summary>
            Describes method to build menu stream.
            </summary>
        </member>
        <member name="P:MediaInfo.Builder.MenuStreamBuilder.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.Builder.MenuStreamBuilder.StreamKind">
            <inheritdoc />
        </member>
        <member name="M:MediaInfo.Builder.MenuStreamBuilder.Build">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.Builder.SubtitleStreamBuilder">
            <summary>
            Describes base methods to build subtitle stream.
            </summary>
        </member>
        <member name="M:MediaInfo.Builder.SubtitleStreamBuilder.#ctor(MediaInfo.MediaInfo,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.Builder.SubtitleStreamBuilder"/> class.
            </summary>
            <param name="info">The media info object.</param>
            <param name="number">The stream number.</param>
            <param name="position">The stream position.</param>
        </member>
        <member name="P:MediaInfo.Builder.SubtitleStreamBuilder.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.Builder.SubtitleStreamBuilder.StreamKind">
            <inheritdoc />
        </member>
        <member name="M:MediaInfo.Builder.SubtitleStreamBuilder.Build">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.Builder.TagHelper.ParseDelegate`1">
            <summary>
            Converts the string representation of a value to specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source value.</param>
            <param name="result">The result.</param>
            <returns><b>true</b> if s was converted successfully; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:MediaInfo.Builder.VideoStreamBuilder">
            <summary>
            Describes base methods to build video stream.
            </summary>
        </member>
        <member name="M:MediaInfo.Builder.VideoStreamBuilder.#ctor(MediaInfo.MediaInfo,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.Builder.VideoStreamBuilder"/> class.
            </summary>
            <param name="info">The media info object.</param>
            <param name="number">The stream number.</param>
            <param name="position">The stream position.</param>
        </member>
        <member name="P:MediaInfo.Builder.VideoStreamBuilder.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.Builder.VideoStreamBuilder.StreamKind">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.AspectRatio">
            <summary>
            Describes video aspect ratio
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.Opaque">
            <summary>
            The opaque (1:1)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.HighEndDataGraphics">
            <summary>
            The high end data graphics (5:4)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.FullScreen">
            <summary>
            The full screen (4:3)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.StandardSlides">
            <summary>
            The standard slides (3:3)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.DigitalSlrCameras">
            <summary>
            The digital SLR cameras (3:2)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.HighDefinitionTv">
            <summary>
            The High Definition TV (16:9)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.WideScreenDisplay">
            <summary>
            The wide screen display (16:10)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.WideScreen">
            <summary>
            The wide screen (1.85:1)
            </summary>
        </member>
        <member name="F:MediaInfo.AspectRatio.CinemaScope">
            <summary>
            The cinema scope (21:9)
            </summary>
        </member>
        <member name="T:MediaInfo.AudioCodec">
            <summary>
            Defines constants for different kind of audio codecs.
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Undefined">
            <summary>
            The undefined audio codec
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.MpegLayer1">
            <summary>
            MPEG Layer 1
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.MpegLayer2">
            <summary>
            MPEG Layer 2
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.MpegLayer3">
            <summary>
            MPEG Layer 3
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.PcmIntBig">
            <summary>
            PCM big-endian int 
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.PcmIntLit">
            <summary>
            PCM little-endian int 
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.PcmFloatIeee">
            <summary>
            PCM float IEEE
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Ac3">
            <summary>
            Dolby Digital
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Ac3Atmos">
            <summary>
            Dolby Digital Atmos
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Ac3Bsid9">
            <summary>
            DolbyNet
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Ac3Bsid10">
            <summary>
            DolbyNet
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Eac3">
            <summary>
            Dolby Digital Plus
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Eac3Atmos">
            <summary>
            Dolby Digital Plus Atmos
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Truehd">
            <summary>
            Dolby TrueHD
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.TruehdAtmos">
            <summary>
            Dolby TrueHD Atmos
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Dts">
            <summary>
            DTS
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.DtsHd">
            <summary>
            DTS-HD
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Flac">
            <summary>
            Free Lossless Audio Codec
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Opus">
            <summary>
            OPUS
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Tta1">
            <summary>
            True Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Vorbis">
            <summary>
            VORBIS
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.WavPack4">
            <summary>
            WavPack v4
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.WavPack">
            <summary>
            WavPack
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Wave">
            <summary>
            Waveform Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Wave64">
            <summary>
            Waveform Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Real14_4">
            <summary>
            The Real Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Real28_8">
            <summary>
            The Real Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.RealCook">
            <summary>
            The Real Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.RealSipr">
            <summary>
            The Real Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.RealRalf">
            <summary>
            The Real Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.RealAtrc">
            <summary>
            The Real Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Mlp">
            <summary>
            Meridian Lossless
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Aac">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg2Main">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg2Lc">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg2LcSbr">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg2Ssr">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg4Main">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg4Lc">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg4LcSbr">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg4LcSbrPs">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg4Ssr">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AacMpeg4Ltp">
            <summary>
            Advanced Audio Coding
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Alac">
            <summary>
            Apple Lossless
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Ape">
            <summary>
            Monkey's Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Wma1">
            <summary>
            Windows Media Audio
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Wma2">
            <summary>
            Windows Media Audio v2
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Wma9">
            <summary>
            Windows Media Audio 9
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Adpcm">
            <summary>
            Adaptive differential pulse-code modulation
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Amr">
            <summary>
            Adaptive multi rate
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Atrac1">
            <summary>
            Adaptive Transform Acoustic Coding (SDDS)
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Atrac3">
            <summary>
            Adaptive Transform Acoustic Coding 3
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Atrac3Plus">
            <summary>
            ATRAC3plus
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.AtracLossless">
            <summary>
            ATRAC Advanced Lossless
            </summary>
        </member>
        <member name="F:MediaInfo.AudioCodec.Atrac9">
            <summary>
            ATRAC9
            </summary>
        </member>
        <member name="T:MediaInfo.AudioStream">
            <summary>
            Provides properties and overridden methods for the analyze audio stream 
            and contains information about audio stream.
            </summary>
            <seealso cref="T:MediaInfo.LanguageMediaStream" />
        </member>
        <member name="P:MediaInfo.AudioStream.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.AudioStream.StreamKind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.AudioStream.Codec">
            <summary>
            Gets the audio codec.
            </summary>
            <value>
            The audio codec.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.CodecFriendly">
            <summary>
            Gets the codec friendly name.
            </summary>
            <value>
            The codec friendly name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.Duration">
            <summary>
            Gets the stream duration.
            </summary>
            <value>
            The stream duration.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.Bitrate">
            <summary>
            Gets the audio bitrate.
            </summary>
            <value>
            The audio bitrate.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.Channel">
            <summary>
            Gets the audio channel amount.
            </summary>
            <value>
            The audio channel amount.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.SamplingRate">
            <summary>
            Gets the audio sampling rate.
            </summary>
            <value>
            The audio sampling rate.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.BitDepth">
            <summary>
            Gets the bit depth of stream.
            </summary>
            <value>
            The bit depth of stream.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.Format">
            <summary>
            Gets the audio format.
            </summary>
            <value>
            The audio format.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.CodecName">
            <summary>
            Gets the audio codec name.
            </summary>
            <value>
            The audio codec name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.AudioChannelsFriendly">
            <summary>
            Gets the audio channels friendly.
            </summary>
            <value>
            The audio channels friendly.
            </value>
        </member>
        <member name="P:MediaInfo.AudioStream.Tags">
            <summary>
            Gets the stream tags.
            </summary>
            <value>
            The stream tags.
            </value>
        </member>
        <member name="T:MediaInfo.AudioTags">
            <summary>
            Describes properties of the audio tags
            </summary>
            <seealso cref="T:MediaInfo.BaseTags" />
        </member>
        <member name="P:MediaInfo.AudioTags.Album">
            <summary>
            Gets the title of the album.
            </summary>
            <value>
            The title of the album.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Track">
            <summary>
            Gets the title of the track.
            </summary>
            <value>
            The title of the track.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.SubTrack">
            <summary>
            Gets the title of the subtrack.
            </summary>
            <value>
            The title of the subtrack.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.OriginalAlbum">
            <summary>
            Gets the original album name (in case of a remake/remix).
            </summary>
            <value>
            The original album name (in case of a remake/remix).
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.OriginalTrack">
            <summary>
            Gets the original track name (in case of a remake/remix).
            </summary>
            <value>
            The original track name (in case of a remake/remix).
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.TrackPosition">
            <summary>
            Gets the number of the current track.
            </summary>
            <value>
            The number of the current track.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.TotalTracks">
            <summary>
            Gets the number of all tracks.
            </summary>
            <value>
            The number of all tracks.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.DiscNumber">
            <summary>
            Gets the number of the current part in a multi-disc album.
            </summary>
            <value>
            The number of the current part in a multi-disc album.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.TotalDiscs">
            <summary>
            Gets the number of all parts in a multi-disc album.
            </summary>
            <value>
            The number of all parts in a multi-disc album.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Artist">
            <summary>
            Gets a person or band/collective generally considered responsible for the work : Singer, Implementor.
            </summary>
            <value>
            A person or band/collective generally considered responsible for the work : Singer, Implementor.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.AlbumArtist">
            <summary>
            Gets the album artist.
            </summary>
            <value>
            The album artist.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.ArtistUrl">
            <summary>
            Gets the official artist/performer web page.
            </summary>
            <value>
            The official artist/performer web page.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Accompaniment">
            <summary>
            Gets the accompaniment name.
            </summary>
            <value>
            The accompaniment name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Composer">
            <summary>
            Gets the composer name.
            </summary>
            <value>
            The composer name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.ComposerNationality">
            <summary>
            Gets the composer nationality.
            </summary>
            <value>
            The composer nationality.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Arranger">
            <summary>
            Gets the arranger name.
            </summary>
            <value>
            The arranger name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Lyricist">
            <summary>
            Gets the lyricist name.
            </summary>
            <value>
            The lyricist name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Conductor">
            <summary>
            Gets the conductor name.
            </summary>
            <value>
            The conductor name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.SoundEngineer">
            <summary>
            Gets the sound engineer name.
            </summary>
            <value>
            The sound engineer name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.MasteredBy">
            <summary>
            Gets who mastered track.
            </summary>
            <value>
            Who mastered track.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.RemixedBy">
            <summary>
            Gets who remixed track.
            </summary>
            <value>
            Who remixed track.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Label">
            <summary>
            Gets the label name.
            </summary>
            <value>
            The label name.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.RecordedDate">
            <summary>
            Gets the recorded date.
            </summary>
            <value>
            The recorded date.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Genre">
            <summary>
            Gets the genre.
            </summary>
            <value>
            The genre.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Mood">
            <summary>
            Gets the mood.
            </summary>
            <value>
            The mood.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.EncodedOriginal">
            <summary>
            Gets the encoded original.
            </summary>
            <value>
            The encoded original.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Gain">
            <summary>
            Gets the track gain.
            </summary>
            <value>
            The track gain.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Peak">
            <summary>
            Gets the track peak.
            </summary>
            <value>
            The track peak.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Isrc">
            <summary>
            Gets the track ISRC.
            </summary>
            <value>
            The track ISRC.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Msdi">
            <summary>
            Gets the track MSDI.
            </summary>
            <value>
            The track MSDI.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.BarCode">
            <summary>
            Gets the bar code.
            </summary>
            <value>
            The bar code.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.Lccn">
            <summary>
            Gets the LCCN.
            </summary>
            <value>
            The LCCN.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.CatalogNumber">
            <summary>
            Gets the catalog number.
            </summary>
            <value>
            The catalog number.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.LabelCode">
            <summary>
            Gets the label code.
            </summary>
            <value>
            The label code.
            </value>
        </member>
        <member name="P:MediaInfo.AudioTags.EncodedBy">
            <summary>
            Gets the name of the person or organisation that encoded/ripped the audio file.
            </summary>
            <value>
            The name of the person or organisation that encoded/ripped the audio file.
            </value>
        </member>
        <member name="T:MediaInfo.BaseTags">
            <summary>
            Base class to read tags from stream
            </summary>
        </member>
        <member name="P:MediaInfo.BaseTags.Tags">
            <summary>
            Gets or sets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Title">
            <summary>
            Gets the title of the media.
            </summary>
            <value>
            The title of the media.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Description">
            <summary>
            Gets a short description of the contents, such as "Two birds flying".
            </summary>
            <value>
            A short description of the contents, such as "Two birds flying".
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Keywords">
            <summary>
            Gets the keywords to the item separated by a comma, used for searching.
            </summary>
            <value>
            The keywords to the item separated by a comma, used for searching.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Country">
            <summary>
            Gets the country.
            </summary>
            <value>
            The country.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.ReleasedDate">
            <summary>
            Gets the time that the item was originally released.
            </summary>
            <value>
            The time that the item was originally released.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.EncodedDate">
            <summary>
            Gets the time that the encoding of this item was completed began.
            </summary>
            <value>
            The time that the encoding of this item was completed began.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.TaggedDate">
            <summary>
            Gets the time that the tags were done for this item.
            </summary>
            <value>
            The time that the tags were done for this item.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Comment">
            <summary>
            Gets any comment related to the content.
            </summary>
            <value>
            Any comment related to the content.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Rating">
            <summary>
            Gets a numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating.
            </summary>
            <value>
            a numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Copyright">
            <summary>
            Gets the copyright attribution.
            </summary>
            <value>
            The copyright attribution.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Publisher">
            <summary>
            Gets the name of the organization producing the track (i.e. the 'record label').
            </summary>
            <value>
            The name of the organization producing the track (i.e. the 'record label').
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.PublisherUrl">
            <summary>
            Gets the publishers official web page.
            </summary>
            <value>
            The publishers official web page.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.DistributedBy">
            <summary>
            Gets the name of the organization distributing track.
            </summary>
            <value>
            The name of the organization distributing track.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Bpm">
            <summary>
            Gets the average number of beats per minute in the complete target.
            </summary>
            <value>
            The average number of beats per minute in the complete target.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.Covers">
            <summary>
            Gets the cover media.
            </summary>
            <value>
            The cover media.
            </value>
        </member>
        <member name="T:MediaInfo.BaseTags.CoverInfo">
            <summary>
            Describes properties of the cover tags
            </summary>
        </member>
        <member name="P:MediaInfo.BaseTags.CoverInfo.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:MediaInfo.BaseTags.CoverInfo"/> is exists.
            </summary>
            <value>
            <c>true</c> if exists; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.CoverInfo.Description">
            <summary>
            Gets the description of the cover.
            </summary>
            <value>
            The description of the cover.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.CoverInfo.Type">
            <summary>
            Gets the type of the cover.
            </summary>
            <value>
            The type of the cover.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.CoverInfo.Mime">
            <summary>
            Gets the MIME of the cover.
            </summary>
            <value>
            The MIME of the cover.
            </value>
        </member>
        <member name="P:MediaInfo.BaseTags.CoverInfo.Data">
            <summary>
            Gets the cover data.
            </summary>
            <value>
            The cover data.
            </value>
        </member>
        <member name="T:MediaInfo.ChapterStream">
            <summary>
            Provides properties and overridden methods for the analyze chapter in media 
            and contains information about chapter.
            </summary>
            <seealso cref="T:MediaInfo.MediaStream" />
        </member>
        <member name="P:MediaInfo.ChapterStream.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.ChapterStream.StreamKind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.ChapterStream.Offset">
            <summary>
            Gets the chapter offset.
            </summary>
            <value>
            The chapter offset.
            </value>
        </member>
        <member name="P:MediaInfo.ChapterStream.Description">
            <summary>
            Gets the chapter description.
            </summary>
            <value>
            The chapter description.
            </value>
        </member>
        <member name="T:MediaInfo.FileNameExtensions">
            <summary>
            Static extensions for file paths
            </summary>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsLiveTv(System.String)">
            <summary>
            Determines whether path is live TV.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is live TV; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsRTSP(System.String)">
            <summary>
            Determines whether this instance is RTSP.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is RTSP; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsNetworkVideo(System.String)">
            <summary>
            Determines whether path is network video.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is network video; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsVideo(System.String)">
            <summary>
            Determines whether the specified path is video.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is video; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsPicture(System.String)">
            <summary>
            Determines whether this instance is picture.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is picture; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsLastFmStream(System.String)">
            <summary>
            Determines whether is LastFM stream.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is LastFM stream; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsNetwork(System.String)">
            <summary>
            Determines whether specified path is network path.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is network path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.GetDriveType(System.String)">
            <summary>
            Gets the type of the drive.
            </summary>
            <param name="drive">The drive.</param>
            <returns>Returns drive type.
            <b>0</b> - undefined
            <b>2</b> - removable drive (Flash, Floppy)
            <b>3</b> - fixed drive (HDD)
            <b>4</b> - remote drive (network share)
            <b>5</b> - CD/DVD drive
            <b>6</b> - RAM disk drive
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsUncNetwork(System.String)">
            <summary>
            Determines whether the specified string path is UNC network.
            </summary>
            <param name="strPath">The string path.</param>
            <returns>
              <c>true</c> if the specified string path is UNC network; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsAvStream(System.String)">
            <summary>
            Determines whether the specified string path is A/V stream.
            </summary>
            <param name="strPath">The string path.</param>
            <returns>
              <c>true</c> if the specified string path is A/V stream; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsRemoteUrl(System.String)">
            <summary>
            Determines whether the specified string path is remote URL.
            </summary>
            <param name="strPath">The string path.</param>
            <returns>
              <c>true</c> if the specified string path is remote URL; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MediaInfo.FileNameExtensions.IsAudio(System.String)">
            <summary>
            Determines whether specified path is audio.
            </summary>
            <param name="path">The path.</param>
            <returns>
              <c>true</c> if the specified path is audio; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MediaInfo.GlobalMemory">
            <summary>
            Describes methods to work with unmanaged Global memory block
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MediaInfo.GlobalMemory.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.GlobalMemory"/> class.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:MediaInfo.GlobalMemory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MediaInfo.GlobalMemory"/> class.
            </summary>
        </member>
        <member name="P:MediaInfo.GlobalMemory.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>
            The handle.
            </value>
        </member>
        <member name="M:MediaInfo.GlobalMemory.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:MediaInfo.GlobalMemory.StringToGlobalAnsi(System.String)">
            <summary>
            Strings to global ANSI string.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="T:MediaInfo.LanguageHelper">
            <summary>
            Describes methods to manipulate language data
            </summary>
        </member>
        <member name="M:MediaInfo.LanguageHelper.GetLanguageByLcid(System.Int32)">
            <summary>
            Gets the language by LCID.
            </summary>
            <param name="lcid">The LCID.</param>
            <returns>Returns language name</returns>
        </member>
        <member name="M:MediaInfo.LanguageHelper.GetLanguageByShortName(System.String)">
            <summary>
            Gets language by the short language name.
            </summary>
            <param name="source">The short language name.</param>
            <returns>Returns language name.</returns>
        </member>
        <member name="M:MediaInfo.LanguageHelper.GetLcidByShortName(System.String)">
            <summary>
            Gets LCID by short language name.
            </summary>
            <param name="source">The short language.</param>
            <returns>Returns LCID.</returns>
        </member>
        <member name="T:MediaInfo.LanguageMediaStream">
            <summary>
            Provides properties and overridden methods for the analyze stream 
            and contains information about media stream.
            </summary>
            <seealso cref="T:MediaInfo.MediaStream" />
        </member>
        <member name="P:MediaInfo.LanguageMediaStream.Language">
            <summary>
            Gets the media stream language.
            </summary>
            <value>
            The media stream language.
            </value>
        </member>
        <member name="P:MediaInfo.LanguageMediaStream.Lcid">
            <summary>
            Gets the media stream LCID.
            </summary>
            <value>
            The media stream LCID.
            </value>
        </member>
        <member name="P:MediaInfo.LanguageMediaStream.Default">
            <summary>
            Gets a value indicating whether this <see cref="T:MediaInfo.LanguageMediaStream"/> is default.
            </summary>
            <value>
              <c>true</c> if default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.LanguageMediaStream.Forced">
            <summary>
            Gets a value indicating whether this <see cref="T:MediaInfo.LanguageMediaStream"/> is forced.
            </summary>
            <value>
              <c>true</c> if forced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MediaInfo.StreamKind">
            <summary>
            Describes kind of streams
            </summary>
        </member>
        <member name="F:MediaInfo.StreamKind.General">
            <summary>
            The general (container, disk info)
            </summary>
        </member>
        <member name="F:MediaInfo.StreamKind.Video">
            <summary>
            The video
            </summary>
        </member>
        <member name="F:MediaInfo.StreamKind.Audio">
            <summary>
            The audio
            </summary>
        </member>
        <member name="F:MediaInfo.StreamKind.Text">
            <summary>
            The subtitles and text information
            </summary>
        </member>
        <member name="F:MediaInfo.StreamKind.Other">
            <summary>
            The other (chapters)
            </summary>
        </member>
        <member name="F:MediaInfo.StreamKind.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="F:MediaInfo.StreamKind.Menu">
            <summary>
            The menu
            </summary>
        </member>
        <member name="T:MediaInfo.MediaInfo">
            <summary>
            Describes low-level functions to access to media information
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MediaInfo.MediaInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.MediaInfo"/> class.
            </summary>
        </member>
        <member name="M:MediaInfo.MediaInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.MediaInfo"/> class.
            </summary>
            <param name="pathToDll">The path to mediainfo.dll.</param>
        </member>
        <member name="M:MediaInfo.MediaInfo.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MediaInfo.MediaInfo"/> class.
            </summary>
        </member>
        <member name="M:MediaInfo.MediaInfo.Open(System.String)">
            <summary>
            Opens the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Return internal handle to access to low-level functions.</returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.OpenBufferInit(System.Int64,System.Int64)">
            <summary>
            Opens the buffer initialize.
            </summary>
            <param name="fileSize">Size of the file.</param>
            <param name="fileOffset">The file offset.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.OpenBufferContinue(System.IntPtr,System.IntPtr)">
            <summary>
            Opens the buffer continue.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.OpenBufferContinueGoToGet">
            <summary>
            Opens the buffer continue go to get.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.OpenBufferFinalize">
            <summary>
            Opens the buffer finalize.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:MediaInfo.MediaInfo.Inform">
            <summary>
            Informs media stream data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.Get(MediaInfo.StreamKind,System.Int32,System.String,MediaInfo.InfoKind,MediaInfo.InfoKind)">
            <summary>
            Gets property value by specified stream kind and name.
            </summary>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The parameter.</param>
            <param name="kindOfInfo">The kind of information.</param>
            <param name="kindOfSearch">The kind of search.</param>
            <returns>Returns property value</returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.Option(System.String,System.String)">
            <summary>
            Sets value to specified option name.
            </summary>
            <param name="option">The option name.</param>
            <param name="value">The option value.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.StateGet">
            <summary>
            Gets the state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.CountGet(MediaInfo.StreamKind,System.Int32)">
            <summary>
            Gets count items of the specified stream.
            </summary>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.Get(MediaInfo.StreamKind,System.Int32,System.String)">
            <summary>
            Gets the specified parameter value in the stream by parameter name.
            </summary>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.Get(MediaInfo.StreamKind,System.Int32,System.Int32)">
            <summary>
            Gets the specified parameter value in the stream by parameter index.
            </summary>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.Option(System.String)">
            <summary>
            Gets options value by the specified option name.
            </summary>
            <param name="option">The option.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.CountGet(MediaInfo.StreamKind)">
            <summary>
            Gets count of specified kind of streams.
            </summary>
            <param name="streamKind">Kind of the streams.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfo.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MediaInfo.MediaInfoList">
            <summary>
            Describes low-level function to access to mediaInfo lists
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MediaInfo.MediaInfoList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.MediaInfoList"/> class.
            </summary>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MediaInfo.MediaInfoList"/> class.
            </summary>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Open(System.String,MediaInfo.InfoFileOptions)">
            <summary>
            Opens the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Close(System.Int32)">
            <summary>
            Closes the specified file position.
            </summary>
            <param name="filePos">The file position.</param>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Inform(System.Int32)">
            <summary>
            Informs the specified file position.
            </summary>
            <param name="filePos">The file position.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Get(System.Int32,MediaInfo.StreamKind,System.Int32,System.String,MediaInfo.InfoKind,MediaInfo.InfoKind)">
            <summary>
            Gets the property value in specified file position by stream and property name.
            </summary>
            <param name="filePos">The file position.</param>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The property name.</param>
            <param name="kindOfInfo">The kind of information.</param>
            <param name="kindOfSearch">The kind of search.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Get(System.Int32,MediaInfo.StreamKind,System.Int32,System.Int32,MediaInfo.InfoKind)">
            <summary>
            Gets the property value in specified file position by stream and property index.
            </summary>
            <param name="filePos">The file position.</param>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The property index.</param>
            <param name="kindOfInfo">The kind of information.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Option(System.String,System.String)">
            <summary>
            Sets options value by the specified option name.
            </summary>
            <param name="option">The option name.</param>
            <param name="value">The option value.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.StateGet">
            <summary>
            Gets current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.CountGet(System.Int32,MediaInfo.StreamKind,System.Int32)">
            <summary>
            Gets count of items in file position and stream.
            </summary>
            <param name="filePos">The file position.</param>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Open(System.String)">
            <summary>
            Opens the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Get(System.Int32,MediaInfo.StreamKind,System.Int32,System.String,MediaInfo.InfoKind)">
            <summary>
            Gets the specified file position.
            </summary>
            <param name="filePos">The file position.</param>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The parameter.</param>
            <param name="kindOfInfo">The kind of information.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Get(System.Int32,MediaInfo.StreamKind,System.Int32,System.String)">
            <summary>
            Gets the specified file position.
            </summary>
            <param name="filePos">The file position.</param>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Get(System.Int32,MediaInfo.StreamKind,System.Int32,System.Int32)">
            <summary>
            Gets the specified file position.
            </summary>
            <param name="filePos">The file position.</param>
            <param name="streamKind">Kind of the stream.</param>
            <param name="streamNumber">The stream number.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Option(System.String)">
            <summary>
            Gets options value by the specified option name.
            </summary>
            <param name="option">The option name.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.CountGet(System.Int32,MediaInfo.StreamKind)">
            <summary>
            Gets count of specified kind of stream in th file position.
            </summary>
            <param name="filePos">The file position.</param>
            <param name="streamKind">Kind of the streams.</param>
            <returns></returns>
        </member>
        <member name="M:MediaInfo.MediaInfoList.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MediaInfo.MediaInfoWrapper">
            <summary>
            Describes method and properties to retrieve information from media source
            </summary>
        </member>
        <member name="M:MediaInfo.MediaInfoWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.MediaInfoWrapper"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:MediaInfo.MediaInfoWrapper.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.MediaInfoWrapper"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="pathToDll">The path to DLL.</param>
        </member>
        <member name="M:MediaInfo.MediaInfoWrapper.MediaInfoExist(System.String)">
            <summary>
            Checks if mediaInfo.dll file exist.
            </summary>
            <param name="pathToDll">The path to mediaInfo.dll</param>
            <returns>Returns <b>true</b> if mediaInfo.dll is exists; elsewhere <b>false</b>.</returns>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.HasVideo">
            <summary>
            Gets a value indicating whether this instance has video.
            </summary>
            <value>
              <c>true</c> if this instance has video; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Is3D">
            <summary>
            Gets a value indicating whether media has at least one video stream with stereoscopic effect.
            </summary>
            <value>
              <c>true</c> if is3d; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.VideoStreams">
            <summary>
            Gets the video streams.
            </summary>
            <value>
            The video streams.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.BestVideoStream">
            <summary>
            Gets the best video stream.
            </summary>
            <value>
            The best video stream.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.VideoCodec">
            <summary>
            Gets the video codec.
            </summary>
            <value>
            The video codec.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Framerate">
            <summary>
            Gets the video frame rate.
            </summary>
            <value>
            The video frame rate.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Width">
            <summary>
            Gets the video width.
            </summary>
            <value>
            The video width.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Height">
            <summary>
            Gets the video height.
            </summary>
            <value>
            The video height.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.AspectRatio">
            <summary>
            Gets the video aspect ratio.
            </summary>
            <value>
            The video aspect ratio.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.ScanType">
            <summary>
            Gets the type of the scan.
            </summary>
            <value>
            The type of the scan.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.IsInterlaced">
            <summary>
            Gets a value indicating whether video is interlaced.
            </summary>
            <value>
              <c>true</c> if video is interlaced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.VideoResolution">
            <summary>
            Gets the video resolution.
            </summary>
            <value>
            The video resolution.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.VideoRate">
            <summary>
            Gets the video bitrate.
            </summary>
            <value>
            The video bitrate.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.AudioStreams">
            <summary>
            Gets the audio streams.
            </summary>
            <value>
            The audio streams.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.BestAudioStream">
            <summary>
            Gets the best audio stream.
            </summary>
            <value>
            The best audio stream.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.AudioCodec">
            <summary>
            Gets the audio codec.
            </summary>
            <value>
            The audio codec.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.AudioRate">
            <summary>
            Gets the audio bitrate.
            </summary>
            <value>
            The audio bitrate.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.AudioSampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
            <value>
            The audio sample rate.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.AudioChannels">
            <summary>
            Gets the count of audio channels.
            </summary>
            <value>
            The count of audio channels.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.AudioChannelsFriendly">
            <summary>
            Gets the audio channels friendly name.
            </summary>
            <value>
            The audio channels friendly name.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Subtitles">
            <summary>
            Gets the list of media subtitles.
            </summary>
            <value>
            The media subtitles.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.HasSubtitles">
            <summary>
            Gets a value indicating whether media has internal or external subtitles.
            </summary>
            <value>
              <c>true</c> if media has subtitles; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.HasExternalSubtitles">
            <summary>
            Gets a value indicating whether this instance has external subtitles.
            </summary>
            <value>
              <c>true</c> if this instance has external subtitles; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Chapters">
            <summary>
            Gets the media chapters.
            </summary>
            <value>
            The media chapters.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.HasChapters">
            <summary>
            Gets a value indicating whether media has chapters.
            </summary>
            <value>
              <c>true</c> if media has chapters; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.MenuStreams">
            <summary>
            Gets the menu streams from media.
            </summary>
            <value>
            The menu streams.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.HasMenu">
            <summary>
            Gets a value indicating whether media has menu.
            </summary>
            <value>
              <c>true</c> if media has menu; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.IsDvd">
            <summary>
            Gets a value indicating whether media is DVD.
            </summary>
            <value>
              <c>true</c> if media is DVD; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.IsBluRay">
            <summary>
            Gets a value indicating whether media is BluRay.
            </summary>
            <value>
              <c>true</c> if media is BluRay; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.MediaInfoNotloaded">
            <summary>
            Gets a value indicating whether media information was not loaded.
            </summary>
            <value>
              <c>true</c> if media information was not loaded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Duration">
            <summary>
            Gets the duration of the media.
            </summary>
            <value>
            The duration of the media.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Version">
            <summary>
            Gets the mediainfo.dll version.
            </summary>
            <value>
            The mediainfo.dll version.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Size">
            <summary>
            Gets the media size.
            </summary>
            <value>
            The media size.
            </value>
        </member>
        <member name="P:MediaInfo.MediaInfoWrapper.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="T:MediaInfo.MediaStreamKind">
            <summary>
            Defines constants for media stream kinds.
            </summary>
        </member>
        <member name="F:MediaInfo.MediaStreamKind.Video">
            <summary>
            The video stream
            </summary>
        </member>
        <member name="F:MediaInfo.MediaStreamKind.Audio">
            <summary>
            The audio stream
            </summary>
        </member>
        <member name="F:MediaInfo.MediaStreamKind.Text">
            <summary>
            The subtitle stream
            </summary>
        </member>
        <member name="F:MediaInfo.MediaStreamKind.Image">
            <summary>
            The image stream
            </summary>
        </member>
        <member name="F:MediaInfo.MediaStreamKind.Menu">
            <summary>
            Menu
            </summary>
        </member>
        <member name="T:MediaInfo.MediaStream">
            <summary>
            Provides basic properties and instance methods for the analyze stream 
            and contains information about media stream.
            </summary>
            <seealso cref="T:System.MarshalByRefObject" />
        </member>
        <member name="P:MediaInfo.MediaStream.Id">
            <summary>
            Gets or sets the media steam id.
            </summary>
            <value>
            The media steam id.
            </value>
        </member>
        <member name="P:MediaInfo.MediaStream.Name">
            <summary>
            Gets or sets the name of stream.
            </summary>
            <value>
            The name of stream.
            </value>
        </member>
        <member name="P:MediaInfo.MediaStream.Kind">
            <summary>
            Gets the kind of media stream.
            </summary>
            <value>
            The kind of media stream.
            </value>
        </member>
        <member name="P:MediaInfo.MediaStream.StreamKind">
            <summary>
            Gets the kind of the stream.
            </summary>
            <value>
            The kind of the stream.
            </value>
        </member>
        <member name="P:MediaInfo.MediaStream.StreamPosition">
            <summary>
            Gets the stream position.
            </summary>
            <value>
            The stream position.
            </value>
        </member>
        <member name="P:MediaInfo.MediaStream.StreamNumber">
            <summary>
            Gets the logical stream number.
            </summary>
            <value>
            The logical stream number.
            </value>
        </member>
        <member name="T:MediaInfo.MenuStream">
            <summary>
            Describes properties of the menu
            </summary>
            <seealso cref="T:MediaInfo.MediaStream" />
        </member>
        <member name="M:MediaInfo.MenuStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaInfo.MenuStream"/> class.
            </summary>
        </member>
        <member name="P:MediaInfo.MenuStream.Duration">
            <summary>
            Gets or sets the menu duration.
            </summary>
            <value>
            The menu duration.
            </value>
        </member>
        <member name="P:MediaInfo.MenuStream.Chapters">
            <summary>
            Gets the chapters.
            </summary>
            <value>
            The chapters.
            </value>
        </member>
        <member name="P:MediaInfo.MenuStream.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.MenuStream.StreamKind">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.MenuStream.Chapter">
            <summary>
            Describes properties of the menu chapter
            </summary>
        </member>
        <member name="P:MediaInfo.MenuStream.Chapter.Position">
            <summary>
            Gets or sets the menu position.
            </summary>
            <value>
            The menu position.
            </value>
        </member>
        <member name="P:MediaInfo.MenuStream.Chapter.Name">
            <summary>
            Gets or sets the menu chapter name.
            </summary>
            <value>
            The menu chapter name.
            </value>
        </member>
        <member name="T:MediaInfo.StereoMode">
            <summary>
            Describes 3D stereo mode
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.Mono">
            <summary>
            No 3D (mono)
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.SideBySideLeft">
            <summary>
            The side by side left eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.TopBottomRight">
            <summary>
            The top bottom right eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.TopBottomLeft">
            <summary>
            The top bottom left eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.CheckerboardRight">
            <summary>
            The checkerboard right eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.CheckerboardLeft">
            <summary>
            The checkerboard left eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.RowInterleavedRight">
            <summary>
            The row interleaved right eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.RowInterleavedLeft">
            <summary>
            The row interleaved left eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.ColumnInterleavedRight">
            <summary>
            The column interleaved right eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.ColumnInterleavedLeft">
            <summary>
            The column interleaved left eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.AnaglyphCyanRed">
            <summary>
            The anaglyph cyan-red
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.SideBySideRight">
            <summary>
            The side by side right eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.AnaglyphGreenMagenta">
            <summary>
            The anaglyph green-magenta
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.BothEyesLacedLeft">
            <summary>
            The both eyes laced left eye is first
            </summary>
        </member>
        <member name="F:MediaInfo.StereoMode.BothEyesLacedRight">
            <summary>
            The both eyes laced right eye is first
            </summary>
        </member>
        <member name="T:MediaInfo.SubtitleCodec">
            <summary>
            Defines constants for different kind of subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.Undefined">
            <summary>
            The undefined type.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.Ass">
            <summary>
            The Advanced SubStation Alpha subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.ImageBmp">
            <summary>
            The BMP image subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.Ssa">
            <summary>
            The  SubStation Alpha subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.TextAss">
            <summary>
            The Advanced SubStation Alpha text subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.TextSsa">
            <summary>
            The SubStation Alpha text subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.TextUsf">
            <summary>
            The Universal Subtitle Format text subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.TextUtf8">
            <summary>
            The Unicode text subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.Usf">
            <summary>
            The Universal Subtitle Format subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.Utf8">
            <summary>
            The Unicode subtitles.
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.Vobsub">
            <summary>
            The VOB SUB subtitles (DVD subtitles).
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.HdmvPgs">
            <summary>
            The Presentation Grapic Stream Subtitle Format subtitles
            </summary>
        </member>
        <member name="F:MediaInfo.SubtitleCodec.HdmvTextst">
            <summary>
            The HDMV Text Subtitle Format subtitles
            </summary>
        </member>
        <member name="T:MediaInfo.VideoCodec">
            <summary>
            Describes type of video codecs
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Undefined">
            <summary>
            The undefined
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Uncompressed">
            <summary>
            The uncompressed
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Dirac">
            <summary>
            Dirac
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4">
            <summary>
            MPEG4
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4Is0Sp">
            <summary>
            MPEG4 Simple Profile
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4Is0Asp">
            <summary>
            MPEG4 Advanced Simple Profile
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4Is0Ap">
            <summary>
            MPEG4 Advanced Profile
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4Is0Avc">
            <summary>
            MPEG4 AVC
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4IsoSp">
            <summary>
            MPEG4 ISO Simple Profile
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4IsoAsp">
            <summary>
            MPEG4 ISO Advanced Simple Profile
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4IsoAp">
            <summary>
            MPEG4 ISO Advanced Profile
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4IsoAvc">
            <summary>
            MPEG4 ISO AVC
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.MpeghIsoHevc">
            <summary>
            MPEG4 ISO HEVC
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4MsV1">
            <summary>
            The Windows Media MPEG4 V1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4MsV2">
            <summary>
            The Windows Media MPEG4 V2
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg4MsV3">
            <summary>
            The Windows Media MPEG4 V3
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Vc1">
            <summary>
            VC1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg1">
            <summary>
            The MPEG1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mpeg2">
            <summary>
            The MPEG2
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Prores">
            <summary>
            The ProRes
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.RealRv10">
            <summary>
            Real Video v1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.RealRv20">
            <summary>
            Real Video v2
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.RealRv30">
            <summary>
            Real Video v3
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.RealRv40">
            <summary>
            Real Video v4
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Theora">
            <summary>
            Theora
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Vp6">
            <summary>
            TrueMotion VP6
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Vp8">
            <summary>
            VP8
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Vp9">
            <summary>
            VP9
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Divx1">
            <summary>
            DivX v1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Divx2">
            <summary>
            DivX v2
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Divx3">
            <summary>
            DivX v3.x
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Divx4">
            <summary>
            DivX v4
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Divx50">
            <summary>
            DivX v5
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Xvid">
            <summary>
            The XVid
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Svq1">
            <summary>
            Sorenson Video v1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Svq2">
            <summary>
            Sorenson Video v2
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Svq3">
            <summary>
            Sorenson Video v3
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Sprk">
            <summary>
            The Sorenson Spark
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.H260">
            <summary>
            H.260
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.H261">
            <summary>
            H.261
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.H263">
            <summary>
            H.263
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Avdv">
            <summary>
            AVdv
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Avd1">
            <summary>
            Autodesk Digital Video v1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Ffv1">
            <summary>
            FF video codec 1
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Ffv2">
            <summary>
            FF video codec 2
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Iv21">
            <summary>
            IV21
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Iv30">
            <summary>
            IV30
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Iv40">
            <summary>
            IV40
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Iv50">
            <summary>
            IV50
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Ffds">
            <summary>
            The FFDShow MPEG-4 Video
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Fraps">
            <summary>
            The FFDShow MPEG-4 Video
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Ffvh">
            <summary>
            HuffYUV 2.2
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Mjpg">
            <summary>
            Motion JPEG
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Dv">
            <summary>
            Digital Video
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Hdv">
            <summary>
            Digital Video HD
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.DvcPro50">
            <summary>
            DVCPRO50
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.DvcProHd">
            <summary>
            DVCPRO HD
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Wmv1">
            <summary>
            Windows Media Video V7
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Wmv2">
            <summary>
            Windows Media Video V8
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Wmv3">
            <summary>
            Windows Media Video V9
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.Q8Bps">
            <summary>
            QuickTime 8BPS
            </summary>
        </member>
        <member name="F:MediaInfo.VideoCodec.BinkVideo">
            <summary>
            Bink video
            </summary>
        </member>
        <member name="T:MediaInfo.VideoTags">
            <summary>
            Describes properties of the video tags
            </summary>
            <seealso cref="T:MediaInfo.BaseTags" />
        </member>
        <member name="P:MediaInfo.VideoTags.Collection">
            <summary>
            Gets the title of the collection.
            </summary>
            <value>
            The title of the collection.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Season">
            <summary>
            Gets the title of the season.
            </summary>
            <value>
            The title of the season.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Part">
            <summary>
            Gets the title of part.
            </summary>
            <value>
            The title of part.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Movie">
            <summary>
            Gets the title of the file for a video file.
            </summary>
            <value>
            The title of the file for a video file.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Chapter">
            <summary>
            Gets the title of chapter.
            </summary>
            <value>
            The title of chapter.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.OriginalMovie">
            <summary>
            Gets the original movie.
            </summary>
            <value>
            The original movie.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.TrackPosition">
            <summary>
            Gets the track position.
            </summary>
            <value>
            The track position.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Composer">
            <summary>
            Gets the composer name.
            </summary>
            <value>
            The composer name.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.ComposerNationality">
            <summary>
            Gets the composer nationality.
            </summary>
            <value>
            The composer nationality.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Arranger">
            <summary>
            Gets the arranger name.
            </summary>
            <value>
            The arranger name.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Lyricist">
            <summary>
            Gets the lyricist name.
            </summary>
            <value>
            The lyricist name.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Conductor">
            <summary>
            Gets the conductor name.
            </summary>
            <value>
            The conductor name.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.SoundEngineer">
            <summary>
            Gets the sound engineer name.
            </summary>
            <value>
            The sound engineer name.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Actor">
            <summary>
            Gets the real name of actor.
            </summary>
            <value>
            The real name of actor.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.ActorCharacter">
            <summary>
            Gets the name of the character an actor or actress plays in this movie.
            </summary>
            <value>
            The name of the character an actor or actress plays in this movie.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.WrittenBy">
            <summary>
            Gets the author of the story or script.
            </summary>
            <value>
            The author of the story or script.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.ScreenplayBy">
            <summary>
            Gets the author of the screenplay or scenario (used for movies and TV shows).
            </summary>
            <value>
            The author of the screenplay or scenario (used for movies and TV shows).
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Director">
            <summary>
            Gets the name of the director.
            </summary>
            <value>
            The name of the director.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.AssistantDirector">
            <summary>
            Gets the name of assistant director.
            </summary>
            <value>
            The name of assistant director.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.DirectorOfPhotography">
            <summary>
            Gets the name of the director of photography, also known as cinematographer.
            </summary>
            <value>
            The name of the director of photography, also known as cinematographer.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.ArtDirector">
            <summary>
            Gets the person who oversees the artists and craftspeople who build the sets.
            </summary>
            <value>
            The person who oversees the artists and craftspeople who build the sets.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.EditedBy">
            <summary>
            Gets the editor name.
            </summary>
            <value>
            The editor name.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Producer">
            <summary>
            Gets the name of producer the movie.
            </summary>
            <value>
            The name of producer the movie.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.CoProducer">
            <summary>
            Gets the name of co-producer.
            </summary>
            <value>
            The name of co-producer.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.ExecutiveProducer">
            <summary>
            Gets the name of executive producer.
            </summary>
            <value>
            The name of executive producer.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.ProductionDesigner">
            <summary>
            Gets the artist responsible for designing the overall visual appearance of a movie.
            </summary>
            <value>
            The artist responsible for designing the overall visual appearance of a movie.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.CostumeDesigner">
            <summary>
            Gets the name of the costume designer.
            </summary>
            <value>
            The name of the costume designer.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Choreographer">
            <summary>
            Gets the name of the choreographer.
            </summary>
            <value>
            The name of the choreographer.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.ProductionStudio">
            <summary>
            Gets the name of production studio.
            </summary>
            <value>
            The name of production studio.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.WrittenDate">
            <summary>
            Gets the time that the composition of the music/script began.
            </summary>
            <value>
            The time that the composition of the music/script began.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Genre">
            <summary>
            Gets the main genre of the audio or video; e.g. "classical", "ambient-house", "synthpop", "sci-fi", "drama", etc.
            </summary>
            <value>
            The main genre of the audio or video; e.g. "classical", "ambient-house", "synthpop", "sci-fi", "drama", etc.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Mood">
            <summary>
            Gets intended to reflect the mood of the item with a few keywords, e.g. "Romantic", "Sad", "Uplifting", etc.
            </summary>
            <value>
            Intended to reflect the mood of the item with a few keywords, e.g. "Romantic", "Sad", "Uplifting", etc.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.EncodedApplication">
            <summary>
            Gets the name of the software package used to create the file, such as "Microsoft WaveEdit."
            </summary>
            <value>
            The name of the software package used to create the file, such as "Microsoft WaveEdit."
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.EncodedLibrary">
            <summary>
            Gets the software or hardware used to encode this item; e.g. "LAME" or "XviD"
            </summary>
            <value>
            The software or hardware used to encode this item; e.g. "LAME" or "XviD".
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.EncodedLibrarySettings">
            <summary>
            Gets a list of the settings used for encoding this item. No specific format.
            </summary>
            <value>
            A list of the settings used for encoding this item. No specific format.
            </value>
        </member>
        <member name="P:MediaInfo.VideoTags.Summary">
            <summary>
            Gets a plot outline or a summary of the story.
            </summary>
            <value>
            A plot outline or a summary of the story.
            </value>
        </member>
        <member name="T:MediaInfo.SubtitleStream">
            <summary>
            Provides properties and overridden methods for the analyze subtitle stream 
            and contains information about subtitle.
            </summary>
            <seealso cref="T:MediaInfo.LanguageMediaStream" />
        </member>
        <member name="P:MediaInfo.SubtitleStream.Format">
            <summary>
            Gets the subtitle format.
            </summary>
            <value>
            The subtitle format.
            </value>
        </member>
        <member name="P:MediaInfo.SubtitleStream.Codec">
            <summary>
            Gets the subtitle codec.
            </summary>
            <value>
            The subtitle codec.
            </value>
        </member>
        <member name="P:MediaInfo.SubtitleStream.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.SubtitleStream.StreamKind">
            <inheritdoc />
        </member>
        <member name="T:MediaInfo.VideoStream">
            <summary>
            Describes properties of the video stream and method to analyze stream
            </summary>
            <seealso cref="T:MediaInfo.LanguageMediaStream" />
        </member>
        <member name="P:MediaInfo.VideoStream.Kind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.VideoStream.StreamKind">
            <inheritdoc />
        </member>
        <member name="P:MediaInfo.VideoStream.FrameRate">
            <summary>
            Gets or sets the video frame rate.
            </summary>
            <value>
            The video frame rate.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Width">
            <summary>
            Gets or sets the video width.
            </summary>
            <value>
            The video width.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Height">
            <summary>
            Gets or sets the video height.
            </summary>
            <value>
            The video height.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Bitrate">
            <summary>
            Gets or sets the video bitrate.
            </summary>
            <value>
            The video bitrate.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.AspectRatio">
            <summary>
            Gets or sets the video aspect ratio.
            </summary>
            <value>
            The video aspect ratio.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Interlaced">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MediaInfo.VideoStream"/> is interlaced.
            </summary>
            <value>
              <c>true</c> if interlaced; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Stereoscopic">
            <summary>
            Gets or sets the video stereoscopic mode.
            </summary>
            <value>
            The video stereoscopic mode.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Format">
            <summary>
            Gets or sets the video format.
            </summary>
            <value>
            The video format.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Codec">
            <summary>
            Gets or sets the video codec.
            </summary>
            <value>
            The video codec.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Duration">
            <summary>
            Gets or sets the stream duration.
            </summary>
            <value>
            The stream duration.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.BitDepth">
            <summary>
            Gets or sets the video bit depth.
            </summary>
            <value>
            The video bit depth.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.CodecName">
            <summary>
            Gets or sets the name of the video codec.
            </summary>
            <value>
            The name of the video codec.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Resolution">
            <summary>
            Gets the video resolution.
            </summary>
            <value>
            The video resolution.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Size">
            <summary>
            Gets the video size.
            </summary>
            <value>
            The vidoe size.
            </value>
        </member>
        <member name="P:MediaInfo.VideoStream.Tags">
            <summary>
            Gets the video stream tags.
            </summary>
            <value>
            The video stream tags.
            </value>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
    </members>
</doc>
